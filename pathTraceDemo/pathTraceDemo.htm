<!DOCTYPE html>
<meta charset="utf-8">
<style>

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

text {
  font-family: sans-serif;
  font-size: 10px;
}

#snackbar {
    visibility: hidden;
    min-width: 250px;
    margin-left: -125px;
    background-color: rgb(233, 233, 233);
    color: rgb(145, 145, 145);
    text-align: center;
    border-radius: 2px;
    padding: 16px;
    position: fixed;
    z-index: 1;
    left: 50%;
    bottom: 30px;
    font-size: 17px;
}

#snackbar.show {
    visibility: visible;
    -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
    animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

@-webkit-keyframes fadein {
    from {bottom: 0; opacity: 0;} 
    to {bottom: 30px; opacity: 1;}
}

@keyframes fadein {
    from {bottom: 0; opacity: 0;}
    to {bottom: 30px; opacity: 1;}
}

@-webkit-keyframes fadeout {
    from {bottom: 30px; opacity: 1;} 
    to {bottom: 0; opacity: 0;}
}

@keyframes fadeout {
    from {bottom: 30px; opacity: 1;}
    to {bottom: 0; opacity: 0;}
}

div.side {
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  width: 25%;
  font-family: Arial, Helvetica, sans-serif;
  font-size: 10pt;
  background-color: #049FD9;
  color: white;
  padding: 20px;
  font-weight: bold;
} 

</style>
<div id="snackbar">Some text some message..</div>
<svg width="960" height="600"></svg>
<div id="side" class="side" font color="grey"></div>
<script src="d3.min.js"></script>
<script>
var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory20);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody().strength(function (d, i) {
        var a = i == 0 ? -800 : -300;
        return a;
    }).distanceMin(70).distanceMax(250))
    .force("center", d3.forceCenter(width / 2, height / 2));

//d3.json("junction.json", function(error, graph) { //DO NOT DELETE, alternative if problems with the backend
d3.json("https://cors-anywhere.herokuapp.com/https://peaceful-shelf-99858.herokuapp.com/topology", function(error, graph) {
  if (error) throw error;

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("g")
    .data(graph.nodes)
    .enter().append("g")
    
  var circles = node.append("circle")
      .attr("r", 5)
      .attr("fill", function(d) { return color(d.family); })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  var lables = node.append("text")
      .text(function(d) {
        return d.label;
      })
      .attr('x', 6)
      .attr('y', 3);

  node.append("title")
      .text(function(d) { return d.label; });

  
  node.on("click", function(d){
       link.style("stroke", "light-grey");
       addPathNode(d, "Label: " + d.label + "<br>IP: " + d.ip);         
  });

var startNode = "";
var endNode = "";

function addPathNode(d, message) {
  if (startNode == "") {
    startNode = d.ip;
    snackbar(message + "<br> set as a start node", "Start node set")
  } else {
    endNode = d.ip;
    snackbar(message + "<br> set as a end node", "End node set")
    pathTrace();
    startNode = "";
    endNode = "";
  }
}

function pathTrace() {
  var pathIps = [];
  d3.json("https://cors-anywhere.herokuapp.com/https://peaceful-shelf-99858.herokuapp.com/path-trace?source=" + startNode + "&dest=" + endNode, function(error, graph_1) {

  if(graph_1 != null) {
    var successMessage = "Path trace SUCCESSFUL (time " + graph_1.duration + " ms)"
    graph_1.elements.forEach(function (arrayItem) {
      pathIps.push(arrayItem.ip);
      successMessage += "<br>" + arrayItem.ip + " (" + arrayItem.type + ")"
    });

    snackbar(successMessage, "Path trace successful");
    link.style("stroke", function(l){
    if ((pathIps.indexOf(l.source.ip) > - 1) && (pathIps.indexOf(l.target.ip) > - 1 )){
      return d3.color("green");
    }else{
      return d3.color("light-grey");
    }
   });

   link.style('stroke-width', function(l) {
      if ((pathIps.indexOf(l.source.ip) > - 1) && (pathIps.indexOf(l.target.ip) > - 1 ))
        return 5;
      else
        return 2;
   });



  }else{
    try {
      snackbar(error.target.responseText, "Path trace failed");
    }
    catch(err) {
      snackbar("There was a problem with accessing the topology data.", "Path trace failed");
    }
  }
  });
}

node.on('mouseover', function(d) {
  d3.select(this).select("text").text(function(d) {
    return d.label + "  " + d.ip;
  })
  link.style('stroke-width', function(l) {
    if (d === l.source || d === l.target)
      return 5;
    else
      return 2;
    });
  });


// Set the stroke width back to normal when mouse leaves the node.
node.on('mouseout', function() {
  node.select("text")
      .text(function(d) {
        return d.label;
      })
  link.style('stroke-width', 2);
  //link.style("stroke", "grey");
});

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  function ticked() {
    link
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });
    node
      .attr("transform", function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      })
  }
});

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

function snackbar(message, snackbarMessage) {
  document.getElementById("side").innerHTML += message + "<br><br>";
  document.getElementById("snackbar").innerHTML = snackbarMessage;
  var x = document.getElementById("snackbar");
  x.className = "show";
  setTimeout(function(){ x.className = x.className.replace("show", ""); }, 3000);
}
</script>