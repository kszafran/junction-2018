// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new s w i m API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s w i m API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSoftwareImageDetails gets software image details

Returns software image list based on a filter criteria. For example: "filterbyName = cat3k%"
*/
func (a *Client) GetSoftwareImageDetails(params *GetSoftwareImageDetailsParams) (*GetSoftwareImageDetailsOK, *GetSoftwareImageDetailsNoContent, *GetSoftwareImageDetailsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSoftwareImageDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSoftwareImageDetails",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/image/importation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSoftwareImageDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetSoftwareImageDetailsOK:
		return value, nil, nil, nil
	case *GetSoftwareImageDetailsNoContent:
		return nil, value, nil, nil
	case *GetSoftwareImageDetailsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ImportLocalSoftwareImage imports local software image

Fetches a software image from local file system and uploads to DNA Center. Supported software image files extensions are bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2
*/
func (a *Client) ImportLocalSoftwareImage(params *ImportLocalSoftwareImageParams) (*ImportLocalSoftwareImageOK, *ImportLocalSoftwareImageCreated, *ImportLocalSoftwareImageAccepted, *ImportLocalSoftwareImageNoContent, *ImportLocalSoftwareImagePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportLocalSoftwareImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importLocalSoftwareImage",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/image/importation/source/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportLocalSoftwareImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ImportLocalSoftwareImageOK:
		return value, nil, nil, nil, nil, nil
	case *ImportLocalSoftwareImageCreated:
		return nil, value, nil, nil, nil, nil
	case *ImportLocalSoftwareImageAccepted:
		return nil, nil, value, nil, nil, nil
	case *ImportLocalSoftwareImageNoContent:
		return nil, nil, nil, value, nil, nil
	case *ImportLocalSoftwareImagePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
ImportSoftwareImageViaURL imports software image via URL

Fetches a software image from remote file system (using URL for HTTP/FTP) and uploads to DNA Center. Supported image files extensions are bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2
*/
func (a *Client) ImportSoftwareImageViaURL(params *ImportSoftwareImageViaURLParams) (*ImportSoftwareImageViaURLOK, *ImportSoftwareImageViaURLCreated, *ImportSoftwareImageViaURLAccepted, *ImportSoftwareImageViaURLNoContent, *ImportSoftwareImageViaURLPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportSoftwareImageViaURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importSoftwareImageViaURL",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/image/importation/source/url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportSoftwareImageViaURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ImportSoftwareImageViaURLOK:
		return value, nil, nil, nil, nil, nil
	case *ImportSoftwareImageViaURLCreated:
		return nil, value, nil, nil, nil, nil
	case *ImportSoftwareImageViaURLAccepted:
		return nil, nil, value, nil, nil, nil
	case *ImportSoftwareImageViaURLNoContent:
		return nil, nil, nil, value, nil, nil
	case *ImportSoftwareImageViaURLPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
TriggerSoftwareImageActivation triggers software image activation

Activates a software image on a given device. Software image must be present in the device flash
*/
func (a *Client) TriggerSoftwareImageActivation(params *TriggerSoftwareImageActivationParams) (*TriggerSoftwareImageActivationOK, *TriggerSoftwareImageActivationCreated, *TriggerSoftwareImageActivationAccepted, *TriggerSoftwareImageActivationNoContent, *TriggerSoftwareImageActivationPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerSoftwareImageActivationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerSoftwareImageActivation",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/image/activation/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerSoftwareImageActivationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerSoftwareImageActivationOK:
		return value, nil, nil, nil, nil, nil
	case *TriggerSoftwareImageActivationCreated:
		return nil, value, nil, nil, nil, nil
	case *TriggerSoftwareImageActivationAccepted:
		return nil, nil, value, nil, nil, nil
	case *TriggerSoftwareImageActivationNoContent:
		return nil, nil, nil, value, nil, nil
	case *TriggerSoftwareImageActivationPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
TriggerSoftwareImageDistribution triggers software image distribution

Distributes a software image on a given device. Software image must be imported successfully into DNA Center before it can be distributed
*/
func (a *Client) TriggerSoftwareImageDistribution(params *TriggerSoftwareImageDistributionParams) (*TriggerSoftwareImageDistributionOK, *TriggerSoftwareImageDistributionCreated, *TriggerSoftwareImageDistributionAccepted, *TriggerSoftwareImageDistributionNoContent, *TriggerSoftwareImageDistributionPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerSoftwareImageDistributionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "triggerSoftwareImageDistribution",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/image/distribution",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TriggerSoftwareImageDistributionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerSoftwareImageDistributionOK:
		return value, nil, nil, nil, nil, nil
	case *TriggerSoftwareImageDistributionCreated:
		return nil, value, nil, nil, nil, nil
	case *TriggerSoftwareImageDistributionAccepted:
		return nil, nil, value, nil, nil, nil
	case *TriggerSoftwareImageDistributionNoContent:
		return nil, nil, nil, value, nil, nil
	case *TriggerSoftwareImageDistributionPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
