// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// NewImportSoftwareImageViaURLParams creates a new ImportSoftwareImageViaURLParams object
// with the default values initialized.
func NewImportSoftwareImageViaURLParams() *ImportSoftwareImageViaURLParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportSoftwareImageViaURLParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewImportSoftwareImageViaURLParamsWithTimeout creates a new ImportSoftwareImageViaURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportSoftwareImageViaURLParamsWithTimeout(timeout time.Duration) *ImportSoftwareImageViaURLParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportSoftwareImageViaURLParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewImportSoftwareImageViaURLParamsWithContext creates a new ImportSoftwareImageViaURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportSoftwareImageViaURLParamsWithContext(ctx context.Context) *ImportSoftwareImageViaURLParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportSoftwareImageViaURLParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewImportSoftwareImageViaURLParamsWithHTTPClient creates a new ImportSoftwareImageViaURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportSoftwareImageViaURLParamsWithHTTPClient(client *http.Client) *ImportSoftwareImageViaURLParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportSoftwareImageViaURLParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*ImportSoftwareImageViaURLParams contains all the parameters to send to the API endpoint
for the import software image via URL operation typically these are written to a http.Request
*/
type ImportSoftwareImageViaURLParams struct {

	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*Request
	  request

	*/
	Request models.ImageImportFromURLDTO
	/*ScheduleAt
	  Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional)

	*/
	ScheduleAt *string
	/*ScheduleDesc
	  Custom Description (Optional)

	*/
	ScheduleDesc *string
	/*ScheduleOrigin
	  Originator of this call (Optional)

	*/
	ScheduleOrigin *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithTimeout(timeout time.Duration) *ImportSoftwareImageViaURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithContext(ctx context.Context) *ImportSoftwareImageViaURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithHTTPClient(client *http.Client) *ImportSoftwareImageViaURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithContentType(contentType string) *ImportSoftwareImageViaURLParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithRequest adds the request to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithRequest(request models.ImageImportFromURLDTO) *ImportSoftwareImageViaURLParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetRequest(request models.ImageImportFromURLDTO) {
	o.Request = request
}

// WithScheduleAt adds the scheduleAt to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithScheduleAt(scheduleAt *string) *ImportSoftwareImageViaURLParams {
	o.SetScheduleAt(scheduleAt)
	return o
}

// SetScheduleAt adds the scheduleAt to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetScheduleAt(scheduleAt *string) {
	o.ScheduleAt = scheduleAt
}

// WithScheduleDesc adds the scheduleDesc to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithScheduleDesc(scheduleDesc *string) *ImportSoftwareImageViaURLParams {
	o.SetScheduleDesc(scheduleDesc)
	return o
}

// SetScheduleDesc adds the scheduleDesc to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetScheduleDesc(scheduleDesc *string) {
	o.ScheduleDesc = scheduleDesc
}

// WithScheduleOrigin adds the scheduleOrigin to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) WithScheduleOrigin(scheduleOrigin *string) *ImportSoftwareImageViaURLParams {
	o.SetScheduleOrigin(scheduleOrigin)
	return o
}

// SetScheduleOrigin adds the scheduleOrigin to the import software image via URL params
func (o *ImportSoftwareImageViaURLParams) SetScheduleOrigin(scheduleOrigin *string) {
	o.ScheduleOrigin = scheduleOrigin
}

// WriteToRequest writes these params to a swagger request
func (o *ImportSoftwareImageViaURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if o.ScheduleAt != nil {

		// query param scheduleAt
		var qrScheduleAt string
		if o.ScheduleAt != nil {
			qrScheduleAt = *o.ScheduleAt
		}
		qScheduleAt := qrScheduleAt
		if qScheduleAt != "" {
			if err := r.SetQueryParam("scheduleAt", qScheduleAt); err != nil {
				return err
			}
		}

	}

	if o.ScheduleDesc != nil {

		// query param scheduleDesc
		var qrScheduleDesc string
		if o.ScheduleDesc != nil {
			qrScheduleDesc = *o.ScheduleDesc
		}
		qScheduleDesc := qrScheduleDesc
		if qScheduleDesc != "" {
			if err := r.SetQueryParam("scheduleDesc", qScheduleDesc); err != nil {
				return err
			}
		}

	}

	if o.ScheduleOrigin != nil {

		// query param scheduleOrigin
		var qrScheduleOrigin string
		if o.ScheduleOrigin != nil {
			qrScheduleOrigin = *o.ScheduleOrigin
		}
		qScheduleOrigin := qrScheduleOrigin
		if qScheduleOrigin != "" {
			if err := r.SetQueryParam("scheduleOrigin", qScheduleOrigin); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
