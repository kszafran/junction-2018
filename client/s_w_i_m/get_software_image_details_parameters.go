// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSoftwareImageDetailsParams creates a new GetSoftwareImageDetailsParams object
// with the default values initialized.
func NewGetSoftwareImageDetailsParams() *GetSoftwareImageDetailsParams {
	var ()
	return &GetSoftwareImageDetailsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSoftwareImageDetailsParamsWithTimeout creates a new GetSoftwareImageDetailsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSoftwareImageDetailsParamsWithTimeout(timeout time.Duration) *GetSoftwareImageDetailsParams {
	var ()
	return &GetSoftwareImageDetailsParams{

		timeout: timeout,
	}
}

// NewGetSoftwareImageDetailsParamsWithContext creates a new GetSoftwareImageDetailsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSoftwareImageDetailsParamsWithContext(ctx context.Context) *GetSoftwareImageDetailsParams {
	var ()
	return &GetSoftwareImageDetailsParams{

		Context: ctx,
	}
}

// NewGetSoftwareImageDetailsParamsWithHTTPClient creates a new GetSoftwareImageDetailsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSoftwareImageDetailsParamsWithHTTPClient(client *http.Client) *GetSoftwareImageDetailsParams {
	var ()
	return &GetSoftwareImageDetailsParams{
		HTTPClient: client,
	}
}

/*GetSoftwareImageDetailsParams contains all the parameters to send to the API endpoint
for the get software image details operation typically these are written to a http.Request
*/
type GetSoftwareImageDetailsParams struct {

	/*ApplicationType
	  applicationType

	*/
	ApplicationType *string
	/*CreatedTime
	  time in milliseconds (epoch format)

	*/
	CreatedTime *int64
	/*Family
	  family

	*/
	Family *string
	/*ImageIntegrityStatus
	  imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED

	*/
	ImageIntegrityStatus *string
	/*ImageName
	  image Name

	*/
	ImageName *string
	/*ImageSeries
	  image Series

	*/
	ImageSeries *string
	/*ImageSizeGreaterThan
	  size in bytes

	*/
	ImageSizeGreaterThan *int64
	/*ImageSizeLesserThan
	  size in bytes

	*/
	ImageSizeLesserThan *int64
	/*ImageUUID
	  imageUuid

	*/
	ImageUUID *string
	/*IsCCOLatest
	  is latest from cisco.com

	*/
	IsCCOLatest *bool
	/*IsCCORecommended
	  is recommended from cisco.com

	*/
	IsCCORecommended *bool
	/*IsTaggedGolden
	  is Tagged Golden

	*/
	IsTaggedGolden *bool
	/*Limit
	  limit

	*/
	Limit *int64
	/*Name
	  name

	*/
	Name *string
	/*Offset
	  offset

	*/
	Offset *int64
	/*SortBy
	  sort results by this field

	*/
	SortBy *string
	/*SortOrder
	  sort order - 'asc' or 'des'. Default is asc

	*/
	SortOrder *string
	/*Version
	  software Image Version

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithTimeout(timeout time.Duration) *GetSoftwareImageDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithContext(ctx context.Context) *GetSoftwareImageDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithHTTPClient(client *http.Client) *GetSoftwareImageDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationType adds the applicationType to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithApplicationType(applicationType *string) *GetSoftwareImageDetailsParams {
	o.SetApplicationType(applicationType)
	return o
}

// SetApplicationType adds the applicationType to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetApplicationType(applicationType *string) {
	o.ApplicationType = applicationType
}

// WithCreatedTime adds the createdTime to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithCreatedTime(createdTime *int64) *GetSoftwareImageDetailsParams {
	o.SetCreatedTime(createdTime)
	return o
}

// SetCreatedTime adds the createdTime to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetCreatedTime(createdTime *int64) {
	o.CreatedTime = createdTime
}

// WithFamily adds the family to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithFamily(family *string) *GetSoftwareImageDetailsParams {
	o.SetFamily(family)
	return o
}

// SetFamily adds the family to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetFamily(family *string) {
	o.Family = family
}

// WithImageIntegrityStatus adds the imageIntegrityStatus to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageIntegrityStatus(imageIntegrityStatus *string) *GetSoftwareImageDetailsParams {
	o.SetImageIntegrityStatus(imageIntegrityStatus)
	return o
}

// SetImageIntegrityStatus adds the imageIntegrityStatus to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageIntegrityStatus(imageIntegrityStatus *string) {
	o.ImageIntegrityStatus = imageIntegrityStatus
}

// WithImageName adds the imageName to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageName(imageName *string) *GetSoftwareImageDetailsParams {
	o.SetImageName(imageName)
	return o
}

// SetImageName adds the imageName to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageName(imageName *string) {
	o.ImageName = imageName
}

// WithImageSeries adds the imageSeries to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageSeries(imageSeries *string) *GetSoftwareImageDetailsParams {
	o.SetImageSeries(imageSeries)
	return o
}

// SetImageSeries adds the imageSeries to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageSeries(imageSeries *string) {
	o.ImageSeries = imageSeries
}

// WithImageSizeGreaterThan adds the imageSizeGreaterThan to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageSizeGreaterThan(imageSizeGreaterThan *int64) *GetSoftwareImageDetailsParams {
	o.SetImageSizeGreaterThan(imageSizeGreaterThan)
	return o
}

// SetImageSizeGreaterThan adds the imageSizeGreaterThan to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageSizeGreaterThan(imageSizeGreaterThan *int64) {
	o.ImageSizeGreaterThan = imageSizeGreaterThan
}

// WithImageSizeLesserThan adds the imageSizeLesserThan to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageSizeLesserThan(imageSizeLesserThan *int64) *GetSoftwareImageDetailsParams {
	o.SetImageSizeLesserThan(imageSizeLesserThan)
	return o
}

// SetImageSizeLesserThan adds the imageSizeLesserThan to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageSizeLesserThan(imageSizeLesserThan *int64) {
	o.ImageSizeLesserThan = imageSizeLesserThan
}

// WithImageUUID adds the imageUUID to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithImageUUID(imageUUID *string) *GetSoftwareImageDetailsParams {
	o.SetImageUUID(imageUUID)
	return o
}

// SetImageUUID adds the imageUuid to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetImageUUID(imageUUID *string) {
	o.ImageUUID = imageUUID
}

// WithIsCCOLatest adds the isCCOLatest to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithIsCCOLatest(isCCOLatest *bool) *GetSoftwareImageDetailsParams {
	o.SetIsCCOLatest(isCCOLatest)
	return o
}

// SetIsCCOLatest adds the isCCOLatest to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetIsCCOLatest(isCCOLatest *bool) {
	o.IsCCOLatest = isCCOLatest
}

// WithIsCCORecommended adds the isCCORecommended to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithIsCCORecommended(isCCORecommended *bool) *GetSoftwareImageDetailsParams {
	o.SetIsCCORecommended(isCCORecommended)
	return o
}

// SetIsCCORecommended adds the isCCORecommended to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetIsCCORecommended(isCCORecommended *bool) {
	o.IsCCORecommended = isCCORecommended
}

// WithIsTaggedGolden adds the isTaggedGolden to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithIsTaggedGolden(isTaggedGolden *bool) *GetSoftwareImageDetailsParams {
	o.SetIsTaggedGolden(isTaggedGolden)
	return o
}

// SetIsTaggedGolden adds the isTaggedGolden to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetIsTaggedGolden(isTaggedGolden *bool) {
	o.IsTaggedGolden = isTaggedGolden
}

// WithLimit adds the limit to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithLimit(limit *int64) *GetSoftwareImageDetailsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithName(name *string) *GetSoftwareImageDetailsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithOffset(offset *int64) *GetSoftwareImageDetailsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSortBy adds the sortBy to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithSortBy(sortBy *string) *GetSoftwareImageDetailsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithSortOrder(sortOrder *string) *GetSoftwareImageDetailsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithVersion adds the version to the get software image details params
func (o *GetSoftwareImageDetailsParams) WithVersion(version *string) *GetSoftwareImageDetailsParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get software image details params
func (o *GetSoftwareImageDetailsParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetSoftwareImageDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationType != nil {

		// query param applicationType
		var qrApplicationType string
		if o.ApplicationType != nil {
			qrApplicationType = *o.ApplicationType
		}
		qApplicationType := qrApplicationType
		if qApplicationType != "" {
			if err := r.SetQueryParam("applicationType", qApplicationType); err != nil {
				return err
			}
		}

	}

	if o.CreatedTime != nil {

		// query param createdTime
		var qrCreatedTime int64
		if o.CreatedTime != nil {
			qrCreatedTime = *o.CreatedTime
		}
		qCreatedTime := swag.FormatInt64(qrCreatedTime)
		if qCreatedTime != "" {
			if err := r.SetQueryParam("createdTime", qCreatedTime); err != nil {
				return err
			}
		}

	}

	if o.Family != nil {

		// query param family
		var qrFamily string
		if o.Family != nil {
			qrFamily = *o.Family
		}
		qFamily := qrFamily
		if qFamily != "" {
			if err := r.SetQueryParam("family", qFamily); err != nil {
				return err
			}
		}

	}

	if o.ImageIntegrityStatus != nil {

		// query param imageIntegrityStatus
		var qrImageIntegrityStatus string
		if o.ImageIntegrityStatus != nil {
			qrImageIntegrityStatus = *o.ImageIntegrityStatus
		}
		qImageIntegrityStatus := qrImageIntegrityStatus
		if qImageIntegrityStatus != "" {
			if err := r.SetQueryParam("imageIntegrityStatus", qImageIntegrityStatus); err != nil {
				return err
			}
		}

	}

	if o.ImageName != nil {

		// query param imageName
		var qrImageName string
		if o.ImageName != nil {
			qrImageName = *o.ImageName
		}
		qImageName := qrImageName
		if qImageName != "" {
			if err := r.SetQueryParam("imageName", qImageName); err != nil {
				return err
			}
		}

	}

	if o.ImageSeries != nil {

		// query param imageSeries
		var qrImageSeries string
		if o.ImageSeries != nil {
			qrImageSeries = *o.ImageSeries
		}
		qImageSeries := qrImageSeries
		if qImageSeries != "" {
			if err := r.SetQueryParam("imageSeries", qImageSeries); err != nil {
				return err
			}
		}

	}

	if o.ImageSizeGreaterThan != nil {

		// query param imageSizeGreaterThan
		var qrImageSizeGreaterThan int64
		if o.ImageSizeGreaterThan != nil {
			qrImageSizeGreaterThan = *o.ImageSizeGreaterThan
		}
		qImageSizeGreaterThan := swag.FormatInt64(qrImageSizeGreaterThan)
		if qImageSizeGreaterThan != "" {
			if err := r.SetQueryParam("imageSizeGreaterThan", qImageSizeGreaterThan); err != nil {
				return err
			}
		}

	}

	if o.ImageSizeLesserThan != nil {

		// query param imageSizeLesserThan
		var qrImageSizeLesserThan int64
		if o.ImageSizeLesserThan != nil {
			qrImageSizeLesserThan = *o.ImageSizeLesserThan
		}
		qImageSizeLesserThan := swag.FormatInt64(qrImageSizeLesserThan)
		if qImageSizeLesserThan != "" {
			if err := r.SetQueryParam("imageSizeLesserThan", qImageSizeLesserThan); err != nil {
				return err
			}
		}

	}

	if o.ImageUUID != nil {

		// query param imageUuid
		var qrImageUUID string
		if o.ImageUUID != nil {
			qrImageUUID = *o.ImageUUID
		}
		qImageUUID := qrImageUUID
		if qImageUUID != "" {
			if err := r.SetQueryParam("imageUuid", qImageUUID); err != nil {
				return err
			}
		}

	}

	if o.IsCCOLatest != nil {

		// query param isCCOLatest
		var qrIsCCOLatest bool
		if o.IsCCOLatest != nil {
			qrIsCCOLatest = *o.IsCCOLatest
		}
		qIsCCOLatest := swag.FormatBool(qrIsCCOLatest)
		if qIsCCOLatest != "" {
			if err := r.SetQueryParam("isCCOLatest", qIsCCOLatest); err != nil {
				return err
			}
		}

	}

	if o.IsCCORecommended != nil {

		// query param isCCORecommended
		var qrIsCCORecommended bool
		if o.IsCCORecommended != nil {
			qrIsCCORecommended = *o.IsCCORecommended
		}
		qIsCCORecommended := swag.FormatBool(qrIsCCORecommended)
		if qIsCCORecommended != "" {
			if err := r.SetQueryParam("isCCORecommended", qIsCCORecommended); err != nil {
				return err
			}
		}

	}

	if o.IsTaggedGolden != nil {

		// query param isTaggedGolden
		var qrIsTaggedGolden bool
		if o.IsTaggedGolden != nil {
			qrIsTaggedGolden = *o.IsTaggedGolden
		}
		qIsTaggedGolden := swag.FormatBool(qrIsTaggedGolden)
		if qIsTaggedGolden != "" {
			if err := r.SetQueryParam("isTaggedGolden", qIsTaggedGolden); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
