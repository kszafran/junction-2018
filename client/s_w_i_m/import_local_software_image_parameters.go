// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewImportLocalSoftwareImageParams creates a new ImportLocalSoftwareImageParams object
// with the default values initialized.
func NewImportLocalSoftwareImageParams() *ImportLocalSoftwareImageParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportLocalSoftwareImageParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewImportLocalSoftwareImageParamsWithTimeout creates a new ImportLocalSoftwareImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewImportLocalSoftwareImageParamsWithTimeout(timeout time.Duration) *ImportLocalSoftwareImageParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportLocalSoftwareImageParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewImportLocalSoftwareImageParamsWithContext creates a new ImportLocalSoftwareImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewImportLocalSoftwareImageParamsWithContext(ctx context.Context) *ImportLocalSoftwareImageParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportLocalSoftwareImageParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewImportLocalSoftwareImageParamsWithHTTPClient creates a new ImportLocalSoftwareImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewImportLocalSoftwareImageParamsWithHTTPClient(client *http.Client) *ImportLocalSoftwareImageParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &ImportLocalSoftwareImageParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*ImportLocalSoftwareImageParams contains all the parameters to send to the API endpoint
for the import local software image operation typically these are written to a http.Request
*/
type ImportLocalSoftwareImageParams struct {

	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*IsThirdParty
	  Third party Image check

	*/
	IsThirdParty *bool
	/*ThirdPartyApplicationType
	  Third Party Application Type

	*/
	ThirdPartyApplicationType *string
	/*ThirdPartyImageFamily
	  Third Party image family

	*/
	ThirdPartyImageFamily *string
	/*ThirdPartyVendor
	  Third Party Vendor

	*/
	ThirdPartyVendor *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithTimeout(timeout time.Duration) *ImportLocalSoftwareImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithContext(ctx context.Context) *ImportLocalSoftwareImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithHTTPClient(client *http.Client) *ImportLocalSoftwareImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithContentType(contentType string) *ImportLocalSoftwareImageParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithIsThirdParty adds the isThirdParty to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithIsThirdParty(isThirdParty *bool) *ImportLocalSoftwareImageParams {
	o.SetIsThirdParty(isThirdParty)
	return o
}

// SetIsThirdParty adds the isThirdParty to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetIsThirdParty(isThirdParty *bool) {
	o.IsThirdParty = isThirdParty
}

// WithThirdPartyApplicationType adds the thirdPartyApplicationType to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithThirdPartyApplicationType(thirdPartyApplicationType *string) *ImportLocalSoftwareImageParams {
	o.SetThirdPartyApplicationType(thirdPartyApplicationType)
	return o
}

// SetThirdPartyApplicationType adds the thirdPartyApplicationType to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetThirdPartyApplicationType(thirdPartyApplicationType *string) {
	o.ThirdPartyApplicationType = thirdPartyApplicationType
}

// WithThirdPartyImageFamily adds the thirdPartyImageFamily to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithThirdPartyImageFamily(thirdPartyImageFamily *string) *ImportLocalSoftwareImageParams {
	o.SetThirdPartyImageFamily(thirdPartyImageFamily)
	return o
}

// SetThirdPartyImageFamily adds the thirdPartyImageFamily to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetThirdPartyImageFamily(thirdPartyImageFamily *string) {
	o.ThirdPartyImageFamily = thirdPartyImageFamily
}

// WithThirdPartyVendor adds the thirdPartyVendor to the import local software image params
func (o *ImportLocalSoftwareImageParams) WithThirdPartyVendor(thirdPartyVendor *string) *ImportLocalSoftwareImageParams {
	o.SetThirdPartyVendor(thirdPartyVendor)
	return o
}

// SetThirdPartyVendor adds the thirdPartyVendor to the import local software image params
func (o *ImportLocalSoftwareImageParams) SetThirdPartyVendor(thirdPartyVendor *string) {
	o.ThirdPartyVendor = thirdPartyVendor
}

// WriteToRequest writes these params to a swagger request
func (o *ImportLocalSoftwareImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.IsThirdParty != nil {

		// query param isThirdParty
		var qrIsThirdParty bool
		if o.IsThirdParty != nil {
			qrIsThirdParty = *o.IsThirdParty
		}
		qIsThirdParty := swag.FormatBool(qrIsThirdParty)
		if qIsThirdParty != "" {
			if err := r.SetQueryParam("isThirdParty", qIsThirdParty); err != nil {
				return err
			}
		}

	}

	if o.ThirdPartyApplicationType != nil {

		// query param thirdPartyApplicationType
		var qrThirdPartyApplicationType string
		if o.ThirdPartyApplicationType != nil {
			qrThirdPartyApplicationType = *o.ThirdPartyApplicationType
		}
		qThirdPartyApplicationType := qrThirdPartyApplicationType
		if qThirdPartyApplicationType != "" {
			if err := r.SetQueryParam("thirdPartyApplicationType", qThirdPartyApplicationType); err != nil {
				return err
			}
		}

	}

	if o.ThirdPartyImageFamily != nil {

		// query param thirdPartyImageFamily
		var qrThirdPartyImageFamily string
		if o.ThirdPartyImageFamily != nil {
			qrThirdPartyImageFamily = *o.ThirdPartyImageFamily
		}
		qThirdPartyImageFamily := qrThirdPartyImageFamily
		if qThirdPartyImageFamily != "" {
			if err := r.SetQueryParam("thirdPartyImageFamily", qThirdPartyImageFamily); err != nil {
				return err
			}
		}

	}

	if o.ThirdPartyVendor != nil {

		// query param thirdPartyVendor
		var qrThirdPartyVendor string
		if o.ThirdPartyVendor != nil {
			qrThirdPartyVendor = *o.ThirdPartyVendor
		}
		qThirdPartyVendor := qrThirdPartyVendor
		if qThirdPartyVendor != "" {
			if err := r.SetQueryParam("thirdPartyVendor", qThirdPartyVendor); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
