// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// ImportSoftwareImageViaURLReader is a Reader for the ImportSoftwareImageViaURL structure.
type ImportSoftwareImageViaURLReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportSoftwareImageViaURLReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewImportSoftwareImageViaURLOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewImportSoftwareImageViaURLCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewImportSoftwareImageViaURLAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewImportSoftwareImageViaURLNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewImportSoftwareImageViaURLPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewImportSoftwareImageViaURLBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewImportSoftwareImageViaURLUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewImportSoftwareImageViaURLForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewImportSoftwareImageViaURLNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewImportSoftwareImageViaURLConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewImportSoftwareImageViaURLUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewImportSoftwareImageViaURLInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewImportSoftwareImageViaURLNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewImportSoftwareImageViaURLServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewImportSoftwareImageViaURLGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewImportSoftwareImageViaURLOK creates a ImportSoftwareImageViaURLOK with default headers values
func NewImportSoftwareImageViaURLOK() *ImportSoftwareImageViaURLOK {
	return &ImportSoftwareImageViaURLOK{}
}

/*ImportSoftwareImageViaURLOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type ImportSoftwareImageViaURLOK struct {
	Payload *models.TaskIDResult
}

func (o *ImportSoftwareImageViaURLOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlOK  %+v", 200, o.Payload)
}

func (o *ImportSoftwareImageViaURLOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportSoftwareImageViaURLCreated creates a ImportSoftwareImageViaURLCreated with default headers values
func NewImportSoftwareImageViaURLCreated() *ImportSoftwareImageViaURLCreated {
	return &ImportSoftwareImageViaURLCreated{}
}

/*ImportSoftwareImageViaURLCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type ImportSoftwareImageViaURLCreated struct {
}

func (o *ImportSoftwareImageViaURLCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlCreated ", 201)
}

func (o *ImportSoftwareImageViaURLCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLAccepted creates a ImportSoftwareImageViaURLAccepted with default headers values
func NewImportSoftwareImageViaURLAccepted() *ImportSoftwareImageViaURLAccepted {
	return &ImportSoftwareImageViaURLAccepted{}
}

/*ImportSoftwareImageViaURLAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type ImportSoftwareImageViaURLAccepted struct {
}

func (o *ImportSoftwareImageViaURLAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlAccepted ", 202)
}

func (o *ImportSoftwareImageViaURLAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLNoContent creates a ImportSoftwareImageViaURLNoContent with default headers values
func NewImportSoftwareImageViaURLNoContent() *ImportSoftwareImageViaURLNoContent {
	return &ImportSoftwareImageViaURLNoContent{}
}

/*ImportSoftwareImageViaURLNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type ImportSoftwareImageViaURLNoContent struct {
}

func (o *ImportSoftwareImageViaURLNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlNoContent ", 204)
}

func (o *ImportSoftwareImageViaURLNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLPartialContent creates a ImportSoftwareImageViaURLPartialContent with default headers values
func NewImportSoftwareImageViaURLPartialContent() *ImportSoftwareImageViaURLPartialContent {
	return &ImportSoftwareImageViaURLPartialContent{}
}

/*ImportSoftwareImageViaURLPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type ImportSoftwareImageViaURLPartialContent struct {
}

func (o *ImportSoftwareImageViaURLPartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlPartialContent ", 206)
}

func (o *ImportSoftwareImageViaURLPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLBadRequest creates a ImportSoftwareImageViaURLBadRequest with default headers values
func NewImportSoftwareImageViaURLBadRequest() *ImportSoftwareImageViaURLBadRequest {
	return &ImportSoftwareImageViaURLBadRequest{}
}

/*ImportSoftwareImageViaURLBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type ImportSoftwareImageViaURLBadRequest struct {
}

func (o *ImportSoftwareImageViaURLBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlBadRequest ", 400)
}

func (o *ImportSoftwareImageViaURLBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLUnauthorized creates a ImportSoftwareImageViaURLUnauthorized with default headers values
func NewImportSoftwareImageViaURLUnauthorized() *ImportSoftwareImageViaURLUnauthorized {
	return &ImportSoftwareImageViaURLUnauthorized{}
}

/*ImportSoftwareImageViaURLUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type ImportSoftwareImageViaURLUnauthorized struct {
}

func (o *ImportSoftwareImageViaURLUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlUnauthorized ", 401)
}

func (o *ImportSoftwareImageViaURLUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLForbidden creates a ImportSoftwareImageViaURLForbidden with default headers values
func NewImportSoftwareImageViaURLForbidden() *ImportSoftwareImageViaURLForbidden {
	return &ImportSoftwareImageViaURLForbidden{}
}

/*ImportSoftwareImageViaURLForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type ImportSoftwareImageViaURLForbidden struct {
}

func (o *ImportSoftwareImageViaURLForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlForbidden ", 403)
}

func (o *ImportSoftwareImageViaURLForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLNotFound creates a ImportSoftwareImageViaURLNotFound with default headers values
func NewImportSoftwareImageViaURLNotFound() *ImportSoftwareImageViaURLNotFound {
	return &ImportSoftwareImageViaURLNotFound{}
}

/*ImportSoftwareImageViaURLNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type ImportSoftwareImageViaURLNotFound struct {
}

func (o *ImportSoftwareImageViaURLNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlNotFound ", 404)
}

func (o *ImportSoftwareImageViaURLNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLConflict creates a ImportSoftwareImageViaURLConflict with default headers values
func NewImportSoftwareImageViaURLConflict() *ImportSoftwareImageViaURLConflict {
	return &ImportSoftwareImageViaURLConflict{}
}

/*ImportSoftwareImageViaURLConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type ImportSoftwareImageViaURLConflict struct {
}

func (o *ImportSoftwareImageViaURLConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlConflict ", 409)
}

func (o *ImportSoftwareImageViaURLConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLUnsupportedMediaType creates a ImportSoftwareImageViaURLUnsupportedMediaType with default headers values
func NewImportSoftwareImageViaURLUnsupportedMediaType() *ImportSoftwareImageViaURLUnsupportedMediaType {
	return &ImportSoftwareImageViaURLUnsupportedMediaType{}
}

/*ImportSoftwareImageViaURLUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type ImportSoftwareImageViaURLUnsupportedMediaType struct {
}

func (o *ImportSoftwareImageViaURLUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlUnsupportedMediaType ", 415)
}

func (o *ImportSoftwareImageViaURLUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLInternalServerError creates a ImportSoftwareImageViaURLInternalServerError with default headers values
func NewImportSoftwareImageViaURLInternalServerError() *ImportSoftwareImageViaURLInternalServerError {
	return &ImportSoftwareImageViaURLInternalServerError{}
}

/*ImportSoftwareImageViaURLInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type ImportSoftwareImageViaURLInternalServerError struct {
}

func (o *ImportSoftwareImageViaURLInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlInternalServerError ", 500)
}

func (o *ImportSoftwareImageViaURLInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLNotImplemented creates a ImportSoftwareImageViaURLNotImplemented with default headers values
func NewImportSoftwareImageViaURLNotImplemented() *ImportSoftwareImageViaURLNotImplemented {
	return &ImportSoftwareImageViaURLNotImplemented{}
}

/*ImportSoftwareImageViaURLNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type ImportSoftwareImageViaURLNotImplemented struct {
}

func (o *ImportSoftwareImageViaURLNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlNotImplemented ", 501)
}

func (o *ImportSoftwareImageViaURLNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLServiceUnavailable creates a ImportSoftwareImageViaURLServiceUnavailable with default headers values
func NewImportSoftwareImageViaURLServiceUnavailable() *ImportSoftwareImageViaURLServiceUnavailable {
	return &ImportSoftwareImageViaURLServiceUnavailable{}
}

/*ImportSoftwareImageViaURLServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type ImportSoftwareImageViaURLServiceUnavailable struct {
}

func (o *ImportSoftwareImageViaURLServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlServiceUnavailable ", 503)
}

func (o *ImportSoftwareImageViaURLServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewImportSoftwareImageViaURLGatewayTimeout creates a ImportSoftwareImageViaURLGatewayTimeout with default headers values
func NewImportSoftwareImageViaURLGatewayTimeout() *ImportSoftwareImageViaURLGatewayTimeout {
	return &ImportSoftwareImageViaURLGatewayTimeout{}
}

/*ImportSoftwareImageViaURLGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type ImportSoftwareImageViaURLGatewayTimeout struct {
}

func (o *ImportSoftwareImageViaURLGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/image/importation/source/url][%d] importSoftwareImageViaUrlGatewayTimeout ", 504)
}

func (o *ImportSoftwareImageViaURLGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
