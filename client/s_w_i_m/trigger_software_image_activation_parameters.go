// Code generated by go-swagger; DO NOT EDIT.

package s_w_i_m

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// NewTriggerSoftwareImageActivationParams creates a new TriggerSoftwareImageActivationParams object
// with the default values initialized.
func NewTriggerSoftwareImageActivationParams() *TriggerSoftwareImageActivationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &TriggerSoftwareImageActivationParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTriggerSoftwareImageActivationParamsWithTimeout creates a new TriggerSoftwareImageActivationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTriggerSoftwareImageActivationParamsWithTimeout(timeout time.Duration) *TriggerSoftwareImageActivationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &TriggerSoftwareImageActivationParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewTriggerSoftwareImageActivationParamsWithContext creates a new TriggerSoftwareImageActivationParams object
// with the default values initialized, and the ability to set a context for a request
func NewTriggerSoftwareImageActivationParamsWithContext(ctx context.Context) *TriggerSoftwareImageActivationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &TriggerSoftwareImageActivationParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewTriggerSoftwareImageActivationParamsWithHTTPClient creates a new TriggerSoftwareImageActivationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTriggerSoftwareImageActivationParamsWithHTTPClient(client *http.Client) *TriggerSoftwareImageActivationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &TriggerSoftwareImageActivationParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*TriggerSoftwareImageActivationParams contains all the parameters to send to the API endpoint
for the trigger software image activation operation typically these are written to a http.Request
*/
type TriggerSoftwareImageActivationParams struct {

	/*ClientType
	  Client-type (Optional)

	*/
	ClientType *string
	/*ClientURL
	  Client-url (Optional)

	*/
	ClientURL *string
	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*Request
	  request

	*/
	Request models.ActivateDTO
	/*ScheduleValidate
	  scheduleValidate, validates data before schedule (Optional)

	*/
	ScheduleValidate *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithTimeout(timeout time.Duration) *TriggerSoftwareImageActivationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithContext(ctx context.Context) *TriggerSoftwareImageActivationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithHTTPClient(client *http.Client) *TriggerSoftwareImageActivationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientType adds the clientType to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithClientType(clientType *string) *TriggerSoftwareImageActivationParams {
	o.SetClientType(clientType)
	return o
}

// SetClientType adds the clientType to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetClientType(clientType *string) {
	o.ClientType = clientType
}

// WithClientURL adds the clientURL to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithClientURL(clientURL *string) *TriggerSoftwareImageActivationParams {
	o.SetClientURL(clientURL)
	return o
}

// SetClientURL adds the clientUrl to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetClientURL(clientURL *string) {
	o.ClientURL = clientURL
}

// WithContentType adds the contentType to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithContentType(contentType string) *TriggerSoftwareImageActivationParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithRequest adds the request to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithRequest(request models.ActivateDTO) *TriggerSoftwareImageActivationParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetRequest(request models.ActivateDTO) {
	o.Request = request
}

// WithScheduleValidate adds the scheduleValidate to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) WithScheduleValidate(scheduleValidate *bool) *TriggerSoftwareImageActivationParams {
	o.SetScheduleValidate(scheduleValidate)
	return o
}

// SetScheduleValidate adds the scheduleValidate to the trigger software image activation params
func (o *TriggerSoftwareImageActivationParams) SetScheduleValidate(scheduleValidate *bool) {
	o.ScheduleValidate = scheduleValidate
}

// WriteToRequest writes these params to a swagger request
func (o *TriggerSoftwareImageActivationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientType != nil {

		// header param Client-Type
		if err := r.SetHeaderParam("Client-Type", *o.ClientType); err != nil {
			return err
		}

	}

	if o.ClientURL != nil {

		// header param Client-Url
		if err := r.SetHeaderParam("Client-Url", *o.ClientURL); err != nil {
			return err
		}

	}

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if o.ScheduleValidate != nil {

		// query param scheduleValidate
		var qrScheduleValidate bool
		if o.ScheduleValidate != nil {
			qrScheduleValidate = *o.ScheduleValidate
		}
		qScheduleValidate := swag.FormatBool(qrScheduleValidate)
		if qScheduleValidate != "" {
			if err := r.SetQueryParam("scheduleValidate", qScheduleValidate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
