// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetL3TopologyDetails gets l3 topology details

Returns the Layer 3 network topology by routing protocol
*/
func (a *Client) GetL3TopologyDetails(params *GetL3TopologyDetailsParams) (*GetL3TopologyDetailsOK, *GetL3TopologyDetailsNoContent, *GetL3TopologyDetailsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetL3TopologyDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getL3TopologyDetails",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/topology/l3/{topologyType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetL3TopologyDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetL3TopologyDetailsOK:
		return value, nil, nil, nil
	case *GetL3TopologyDetailsNoContent:
		return nil, value, nil, nil
	case *GetL3TopologyDetailsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetOverallNetworkHealth gets overall network health

Returns Overall Network Health information by Device category (Access, Distribution, Core, Router, Wireless) for any given point of time
*/
func (a *Client) GetOverallNetworkHealth(params *GetOverallNetworkHealthParams) (*GetOverallNetworkHealthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOverallNetworkHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOverallNetworkHealth",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOverallNetworkHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOverallNetworkHealthOK), nil

}

/*
GetPhysicalTopology gets physical topology

Returns the raw physical topology by specified criteria of nodeType
*/
func (a *Client) GetPhysicalTopology(params *GetPhysicalTopologyParams) (*GetPhysicalTopologyOK, *GetPhysicalTopologyNoContent, *GetPhysicalTopologyPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhysicalTopologyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhysicalTopology",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/topology/physical-topology",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPhysicalTopologyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPhysicalTopologyOK:
		return value, nil, nil, nil
	case *GetPhysicalTopologyNoContent:
		return nil, value, nil, nil
	case *GetPhysicalTopologyPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetSiteTopology gets site topology

Returns site topology
*/
func (a *Client) GetSiteTopology(params *GetSiteTopologyParams) (*GetSiteTopologyOK, *GetSiteTopologyNoContent, *GetSiteTopologyPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteTopologyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteTopology",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/topology/site-topology",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSiteTopologyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetSiteTopologyOK:
		return value, nil, nil, nil
	case *GetSiteTopologyNoContent:
		return nil, value, nil, nil
	case *GetSiteTopologyPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTopologyDetails gets topology details

Returns Layer 2 network topology by specified VLAN ID
*/
func (a *Client) GetTopologyDetails(params *GetTopologyDetailsParams) (*GetTopologyDetailsOK, *GetTopologyDetailsNoContent, *GetTopologyDetailsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTopologyDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTopologyDetails",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/topology/l2/{vlanID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTopologyDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTopologyDetailsOK:
		return value, nil, nil, nil
	case *GetTopologyDetailsNoContent:
		return nil, value, nil, nil
	case *GetTopologyDetailsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetVLANDetails gets v l a n details

Returns the list of VLAN names
*/
func (a *Client) GetVLANDetails(params *GetVLANDetailsParams) (*GetVLANDetailsOK, *GetVLANDetailsNoContent, *GetVLANDetailsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVLANDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVLANDetails",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/topology/vlan/vlan-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVLANDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetVLANDetailsOK:
		return value, nil, nil, nil
	case *GetVLANDetailsNoContent:
		return nil, value, nil, nil
	case *GetVLANDetailsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
