// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPhysicalTopologyParams creates a new GetPhysicalTopologyParams object
// with the default values initialized.
func NewGetPhysicalTopologyParams() *GetPhysicalTopologyParams {
	var ()
	return &GetPhysicalTopologyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPhysicalTopologyParamsWithTimeout creates a new GetPhysicalTopologyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPhysicalTopologyParamsWithTimeout(timeout time.Duration) *GetPhysicalTopologyParams {
	var ()
	return &GetPhysicalTopologyParams{

		timeout: timeout,
	}
}

// NewGetPhysicalTopologyParamsWithContext creates a new GetPhysicalTopologyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPhysicalTopologyParamsWithContext(ctx context.Context) *GetPhysicalTopologyParams {
	var ()
	return &GetPhysicalTopologyParams{

		Context: ctx,
	}
}

// NewGetPhysicalTopologyParamsWithHTTPClient creates a new GetPhysicalTopologyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPhysicalTopologyParamsWithHTTPClient(client *http.Client) *GetPhysicalTopologyParams {
	var ()
	return &GetPhysicalTopologyParams{
		HTTPClient: client,
	}
}

/*GetPhysicalTopologyParams contains all the parameters to send to the API endpoint
for the get physical topology operation typically these are written to a http.Request
*/
type GetPhysicalTopologyParams struct {

	/*NodeType
	  nodeType

	*/
	NodeType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get physical topology params
func (o *GetPhysicalTopologyParams) WithTimeout(timeout time.Duration) *GetPhysicalTopologyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get physical topology params
func (o *GetPhysicalTopologyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get physical topology params
func (o *GetPhysicalTopologyParams) WithContext(ctx context.Context) *GetPhysicalTopologyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get physical topology params
func (o *GetPhysicalTopologyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get physical topology params
func (o *GetPhysicalTopologyParams) WithHTTPClient(client *http.Client) *GetPhysicalTopologyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get physical topology params
func (o *GetPhysicalTopologyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNodeType adds the nodeType to the get physical topology params
func (o *GetPhysicalTopologyParams) WithNodeType(nodeType *string) *GetPhysicalTopologyParams {
	o.SetNodeType(nodeType)
	return o
}

// SetNodeType adds the nodeType to the get physical topology params
func (o *GetPhysicalTopologyParams) SetNodeType(nodeType *string) {
	o.NodeType = nodeType
}

// WriteToRequest writes these params to a swagger request
func (o *GetPhysicalTopologyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NodeType != nil {

		// query param nodeType
		var qrNodeType string
		if o.NodeType != nil {
			qrNodeType = *o.NodeType
		}
		qNodeType := qrNodeType
		if qNodeType != "" {
			if err := r.SetQueryParam("nodeType", qNodeType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
