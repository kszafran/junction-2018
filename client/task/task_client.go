// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new task API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for task API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetTaskByID gets task by Id

Returns a task by specified id
*/
func (a *Client) GetTaskByID(params *GetTaskByIDParams) (*GetTaskByIDOK, *GetTaskByIDNoContent, *GetTaskByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/task/{taskId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTaskByIDOK:
		return value, nil, nil, nil
	case *GetTaskByIDNoContent:
		return nil, value, nil, nil
	case *GetTaskByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTaskByOperationID gets task by operation Id

Returns root tasks associated with an Operationid
*/
func (a *Client) GetTaskByOperationID(params *GetTaskByOperationIDParams) (*GetTaskByOperationIDOK, *GetTaskByOperationIDNoContent, *GetTaskByOperationIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskByOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskByOperationId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/task/operation/{operationId}/{offset}/{limit}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskByOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTaskByOperationIDOK:
		return value, nil, nil, nil
	case *GetTaskByOperationIDNoContent:
		return nil, value, nil, nil
	case *GetTaskByOperationIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTaskCount gets task count

Returns Task count
*/
func (a *Client) GetTaskCount(params *GetTaskCountParams) (*GetTaskCountOK, *GetTaskCountNoContent, *GetTaskCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/task/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTaskCountOK:
		return value, nil, nil, nil
	case *GetTaskCountNoContent:
		return nil, value, nil, nil
	case *GetTaskCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTaskTree gets task tree

Returns a task with its children tasks by based on their id
*/
func (a *Client) GetTaskTree(params *GetTaskTreeParams) (*GetTaskTreeOK, *GetTaskTreeNoContent, *GetTaskTreePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTaskTreeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTaskTree",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/task/{taskId}/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTaskTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTaskTreeOK:
		return value, nil, nil, nil
	case *GetTaskTreeNoContent:
		return nil, value, nil, nil
	case *GetTaskTreePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTasks gets tasks

Returns task(s) based on filter criteria
*/
func (a *Client) GetTasks(params *GetTasksParams) (*GetTasksOK, *GetTasksNoContent, *GetTasksPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTasksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTasks",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/task",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTasksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTasksOK:
		return value, nil, nil, nil
	case *GetTasksNoContent:
		return nil, value, nil, nil
	case *GetTasksPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
