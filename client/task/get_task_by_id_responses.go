// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetTaskByIDReader is a Reader for the GetTaskByID structure.
type GetTaskByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTaskByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetTaskByIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetTaskByIDPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTaskByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTaskByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTaskByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTaskByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetTaskByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetTaskByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTaskByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetTaskByIDNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetTaskByIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetTaskByIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTaskByIDOK creates a GetTaskByIDOK with default headers values
func NewGetTaskByIDOK() *GetTaskByIDOK {
	return &GetTaskByIDOK{}
}

/*GetTaskByIDOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetTaskByIDOK struct {
	Payload *models.TaskDTOResponse
}

func (o *GetTaskByIDOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdOK  %+v", 200, o.Payload)
}

func (o *GetTaskByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskDTOResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskByIDNoContent creates a GetTaskByIDNoContent with default headers values
func NewGetTaskByIDNoContent() *GetTaskByIDNoContent {
	return &GetTaskByIDNoContent{}
}

/*GetTaskByIDNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetTaskByIDNoContent struct {
}

func (o *GetTaskByIDNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdNoContent ", 204)
}

func (o *GetTaskByIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDPartialContent creates a GetTaskByIDPartialContent with default headers values
func NewGetTaskByIDPartialContent() *GetTaskByIDPartialContent {
	return &GetTaskByIDPartialContent{}
}

/*GetTaskByIDPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetTaskByIDPartialContent struct {
}

func (o *GetTaskByIDPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdPartialContent ", 206)
}

func (o *GetTaskByIDPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDBadRequest creates a GetTaskByIDBadRequest with default headers values
func NewGetTaskByIDBadRequest() *GetTaskByIDBadRequest {
	return &GetTaskByIDBadRequest{}
}

/*GetTaskByIDBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetTaskByIDBadRequest struct {
}

func (o *GetTaskByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdBadRequest ", 400)
}

func (o *GetTaskByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDUnauthorized creates a GetTaskByIDUnauthorized with default headers values
func NewGetTaskByIDUnauthorized() *GetTaskByIDUnauthorized {
	return &GetTaskByIDUnauthorized{}
}

/*GetTaskByIDUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetTaskByIDUnauthorized struct {
}

func (o *GetTaskByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdUnauthorized ", 401)
}

func (o *GetTaskByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDForbidden creates a GetTaskByIDForbidden with default headers values
func NewGetTaskByIDForbidden() *GetTaskByIDForbidden {
	return &GetTaskByIDForbidden{}
}

/*GetTaskByIDForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetTaskByIDForbidden struct {
}

func (o *GetTaskByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdForbidden ", 403)
}

func (o *GetTaskByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDNotFound creates a GetTaskByIDNotFound with default headers values
func NewGetTaskByIDNotFound() *GetTaskByIDNotFound {
	return &GetTaskByIDNotFound{}
}

/*GetTaskByIDNotFound handles this case with default header values.

No task corresponding to the id was found
*/
type GetTaskByIDNotFound struct {
}

func (o *GetTaskByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdNotFound ", 404)
}

func (o *GetTaskByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDConflict creates a GetTaskByIDConflict with default headers values
func NewGetTaskByIDConflict() *GetTaskByIDConflict {
	return &GetTaskByIDConflict{}
}

/*GetTaskByIDConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetTaskByIDConflict struct {
}

func (o *GetTaskByIDConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdConflict ", 409)
}

func (o *GetTaskByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDUnsupportedMediaType creates a GetTaskByIDUnsupportedMediaType with default headers values
func NewGetTaskByIDUnsupportedMediaType() *GetTaskByIDUnsupportedMediaType {
	return &GetTaskByIDUnsupportedMediaType{}
}

/*GetTaskByIDUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetTaskByIDUnsupportedMediaType struct {
}

func (o *GetTaskByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdUnsupportedMediaType ", 415)
}

func (o *GetTaskByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDInternalServerError creates a GetTaskByIDInternalServerError with default headers values
func NewGetTaskByIDInternalServerError() *GetTaskByIDInternalServerError {
	return &GetTaskByIDInternalServerError{}
}

/*GetTaskByIDInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetTaskByIDInternalServerError struct {
}

func (o *GetTaskByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdInternalServerError ", 500)
}

func (o *GetTaskByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDNotImplemented creates a GetTaskByIDNotImplemented with default headers values
func NewGetTaskByIDNotImplemented() *GetTaskByIDNotImplemented {
	return &GetTaskByIDNotImplemented{}
}

/*GetTaskByIDNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetTaskByIDNotImplemented struct {
}

func (o *GetTaskByIDNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdNotImplemented ", 501)
}

func (o *GetTaskByIDNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDServiceUnavailable creates a GetTaskByIDServiceUnavailable with default headers values
func NewGetTaskByIDServiceUnavailable() *GetTaskByIDServiceUnavailable {
	return &GetTaskByIDServiceUnavailable{}
}

/*GetTaskByIDServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetTaskByIDServiceUnavailable struct {
}

func (o *GetTaskByIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdServiceUnavailable ", 503)
}

func (o *GetTaskByIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDGatewayTimeout creates a GetTaskByIDGatewayTimeout with default headers values
func NewGetTaskByIDGatewayTimeout() *GetTaskByIDGatewayTimeout {
	return &GetTaskByIDGatewayTimeout{}
}

/*GetTaskByIDGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetTaskByIDGatewayTimeout struct {
}

func (o *GetTaskByIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}][%d] getTaskByIdGatewayTimeout ", 504)
}

func (o *GetTaskByIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
