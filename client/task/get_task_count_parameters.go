// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTaskCountParams creates a new GetTaskCountParams object
// with the default values initialized.
func NewGetTaskCountParams() *GetTaskCountParams {
	var ()
	return &GetTaskCountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTaskCountParamsWithTimeout creates a new GetTaskCountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTaskCountParamsWithTimeout(timeout time.Duration) *GetTaskCountParams {
	var ()
	return &GetTaskCountParams{

		timeout: timeout,
	}
}

// NewGetTaskCountParamsWithContext creates a new GetTaskCountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTaskCountParamsWithContext(ctx context.Context) *GetTaskCountParams {
	var ()
	return &GetTaskCountParams{

		Context: ctx,
	}
}

// NewGetTaskCountParamsWithHTTPClient creates a new GetTaskCountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTaskCountParamsWithHTTPClient(client *http.Client) *GetTaskCountParams {
	var ()
	return &GetTaskCountParams{
		HTTPClient: client,
	}
}

/*GetTaskCountParams contains all the parameters to send to the API endpoint
for the get task count operation typically these are written to a http.Request
*/
type GetTaskCountParams struct {

	/*Data
	  Fetch tasks that contains this data

	*/
	Data *string
	/*EndTime
	  This is the epoch end time upto which audit records need to be fetched

	*/
	EndTime *string
	/*ErrorCode
	  Fetch tasks that have this error code

	*/
	ErrorCode *string
	/*FailureReason
	  Fetch tasks that contains this failure reason

	*/
	FailureReason *string
	/*IsError
	  Fetch tasks ended as success or failure. Valid values: true, false

	*/
	IsError *string
	/*ParentID
	  Fetch tasks that have this parent Id

	*/
	ParentID *string
	/*Progress
	  Fetch tasks that contains this progress

	*/
	Progress *string
	/*ServiceType
	  Fetch tasks with this service type

	*/
	ServiceType *string
	/*StartTime
	  This is the epoch start time from which tasks need to be fetched

	*/
	StartTime *string
	/*Username
	  Fetch tasks with this username

	*/
	Username *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get task count params
func (o *GetTaskCountParams) WithTimeout(timeout time.Duration) *GetTaskCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get task count params
func (o *GetTaskCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get task count params
func (o *GetTaskCountParams) WithContext(ctx context.Context) *GetTaskCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get task count params
func (o *GetTaskCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get task count params
func (o *GetTaskCountParams) WithHTTPClient(client *http.Client) *GetTaskCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get task count params
func (o *GetTaskCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithData adds the data to the get task count params
func (o *GetTaskCountParams) WithData(data *string) *GetTaskCountParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the get task count params
func (o *GetTaskCountParams) SetData(data *string) {
	o.Data = data
}

// WithEndTime adds the endTime to the get task count params
func (o *GetTaskCountParams) WithEndTime(endTime *string) *GetTaskCountParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get task count params
func (o *GetTaskCountParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithErrorCode adds the errorCode to the get task count params
func (o *GetTaskCountParams) WithErrorCode(errorCode *string) *GetTaskCountParams {
	o.SetErrorCode(errorCode)
	return o
}

// SetErrorCode adds the errorCode to the get task count params
func (o *GetTaskCountParams) SetErrorCode(errorCode *string) {
	o.ErrorCode = errorCode
}

// WithFailureReason adds the failureReason to the get task count params
func (o *GetTaskCountParams) WithFailureReason(failureReason *string) *GetTaskCountParams {
	o.SetFailureReason(failureReason)
	return o
}

// SetFailureReason adds the failureReason to the get task count params
func (o *GetTaskCountParams) SetFailureReason(failureReason *string) {
	o.FailureReason = failureReason
}

// WithIsError adds the isError to the get task count params
func (o *GetTaskCountParams) WithIsError(isError *string) *GetTaskCountParams {
	o.SetIsError(isError)
	return o
}

// SetIsError adds the isError to the get task count params
func (o *GetTaskCountParams) SetIsError(isError *string) {
	o.IsError = isError
}

// WithParentID adds the parentID to the get task count params
func (o *GetTaskCountParams) WithParentID(parentID *string) *GetTaskCountParams {
	o.SetParentID(parentID)
	return o
}

// SetParentID adds the parentId to the get task count params
func (o *GetTaskCountParams) SetParentID(parentID *string) {
	o.ParentID = parentID
}

// WithProgress adds the progress to the get task count params
func (o *GetTaskCountParams) WithProgress(progress *string) *GetTaskCountParams {
	o.SetProgress(progress)
	return o
}

// SetProgress adds the progress to the get task count params
func (o *GetTaskCountParams) SetProgress(progress *string) {
	o.Progress = progress
}

// WithServiceType adds the serviceType to the get task count params
func (o *GetTaskCountParams) WithServiceType(serviceType *string) *GetTaskCountParams {
	o.SetServiceType(serviceType)
	return o
}

// SetServiceType adds the serviceType to the get task count params
func (o *GetTaskCountParams) SetServiceType(serviceType *string) {
	o.ServiceType = serviceType
}

// WithStartTime adds the startTime to the get task count params
func (o *GetTaskCountParams) WithStartTime(startTime *string) *GetTaskCountParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get task count params
func (o *GetTaskCountParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WithUsername adds the username to the get task count params
func (o *GetTaskCountParams) WithUsername(username *string) *GetTaskCountParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the get task count params
func (o *GetTaskCountParams) SetUsername(username *string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *GetTaskCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Data != nil {

		// query param data
		var qrData string
		if o.Data != nil {
			qrData = *o.Data
		}
		qData := qrData
		if qData != "" {
			if err := r.SetQueryParam("data", qData); err != nil {
				return err
			}
		}

	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime string
		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {
			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}

	}

	if o.ErrorCode != nil {

		// query param errorCode
		var qrErrorCode string
		if o.ErrorCode != nil {
			qrErrorCode = *o.ErrorCode
		}
		qErrorCode := qrErrorCode
		if qErrorCode != "" {
			if err := r.SetQueryParam("errorCode", qErrorCode); err != nil {
				return err
			}
		}

	}

	if o.FailureReason != nil {

		// query param failureReason
		var qrFailureReason string
		if o.FailureReason != nil {
			qrFailureReason = *o.FailureReason
		}
		qFailureReason := qrFailureReason
		if qFailureReason != "" {
			if err := r.SetQueryParam("failureReason", qFailureReason); err != nil {
				return err
			}
		}

	}

	if o.IsError != nil {

		// query param isError
		var qrIsError string
		if o.IsError != nil {
			qrIsError = *o.IsError
		}
		qIsError := qrIsError
		if qIsError != "" {
			if err := r.SetQueryParam("isError", qIsError); err != nil {
				return err
			}
		}

	}

	if o.ParentID != nil {

		// query param parentId
		var qrParentID string
		if o.ParentID != nil {
			qrParentID = *o.ParentID
		}
		qParentID := qrParentID
		if qParentID != "" {
			if err := r.SetQueryParam("parentId", qParentID); err != nil {
				return err
			}
		}

	}

	if o.Progress != nil {

		// query param progress
		var qrProgress string
		if o.Progress != nil {
			qrProgress = *o.Progress
		}
		qProgress := qrProgress
		if qProgress != "" {
			if err := r.SetQueryParam("progress", qProgress); err != nil {
				return err
			}
		}

	}

	if o.ServiceType != nil {

		// query param serviceType
		var qrServiceType string
		if o.ServiceType != nil {
			qrServiceType = *o.ServiceType
		}
		qServiceType := qrServiceType
		if qServiceType != "" {
			if err := r.SetQueryParam("serviceType", qServiceType); err != nil {
				return err
			}
		}

	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string
		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {
			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}

	}

	if o.Username != nil {

		// query param username
		var qrUsername string
		if o.Username != nil {
			qrUsername = *o.Username
		}
		qUsername := qrUsername
		if qUsername != "" {
			if err := r.SetQueryParam("username", qUsername); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
