// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTaskByOperationIDParams creates a new GetTaskByOperationIDParams object
// with the default values initialized.
func NewGetTaskByOperationIDParams() *GetTaskByOperationIDParams {
	var ()
	return &GetTaskByOperationIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTaskByOperationIDParamsWithTimeout creates a new GetTaskByOperationIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTaskByOperationIDParamsWithTimeout(timeout time.Duration) *GetTaskByOperationIDParams {
	var ()
	return &GetTaskByOperationIDParams{

		timeout: timeout,
	}
}

// NewGetTaskByOperationIDParamsWithContext creates a new GetTaskByOperationIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTaskByOperationIDParamsWithContext(ctx context.Context) *GetTaskByOperationIDParams {
	var ()
	return &GetTaskByOperationIDParams{

		Context: ctx,
	}
}

// NewGetTaskByOperationIDParamsWithHTTPClient creates a new GetTaskByOperationIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTaskByOperationIDParamsWithHTTPClient(client *http.Client) *GetTaskByOperationIDParams {
	var ()
	return &GetTaskByOperationIDParams{
		HTTPClient: client,
	}
}

/*GetTaskByOperationIDParams contains all the parameters to send to the API endpoint
for the get task by operation Id operation typically these are written to a http.Request
*/
type GetTaskByOperationIDParams struct {

	/*Limit
	  The maximum value of {limit} supported is 500. <br/> Base 1 indexing for {limit}, minimum value is 1

	*/
	Limit int64
	/*Offset
	  Index, minimum value is 0

	*/
	Offset int64
	/*OperationID
	  operationId

	*/
	OperationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithTimeout(timeout time.Duration) *GetTaskByOperationIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithContext(ctx context.Context) *GetTaskByOperationIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithHTTPClient(client *http.Client) *GetTaskByOperationIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithLimit(limit int64) *GetTaskByOperationIDParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetLimit(limit int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithOffset(offset int64) *GetTaskByOperationIDParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetOffset(offset int64) {
	o.Offset = offset
}

// WithOperationID adds the operationID to the get task by operation Id params
func (o *GetTaskByOperationIDParams) WithOperationID(operationID string) *GetTaskByOperationIDParams {
	o.SetOperationID(operationID)
	return o
}

// SetOperationID adds the operationId to the get task by operation Id params
func (o *GetTaskByOperationIDParams) SetOperationID(operationID string) {
	o.OperationID = operationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTaskByOperationIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param limit
	if err := r.SetPathParam("limit", swag.FormatInt64(o.Limit)); err != nil {
		return err
	}

	// path param offset
	if err := r.SetPathParam("offset", swag.FormatInt64(o.Offset)); err != nil {
		return err
	}

	// path param operationId
	if err := r.SetPathParam("operationId", o.OperationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
