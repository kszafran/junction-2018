// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetTaskTreeReader is a Reader for the GetTaskTree structure.
type GetTaskTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTaskTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetTaskTreeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetTaskTreePartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTaskTreeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTaskTreeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTaskTreeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTaskTreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetTaskTreeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetTaskTreeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTaskTreeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetTaskTreeNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetTaskTreeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetTaskTreeGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTaskTreeOK creates a GetTaskTreeOK with default headers values
func NewGetTaskTreeOK() *GetTaskTreeOK {
	return &GetTaskTreeOK{}
}

/*GetTaskTreeOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetTaskTreeOK struct {
	Payload *models.TaskDTOListResponse
}

func (o *GetTaskTreeOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeOK  %+v", 200, o.Payload)
}

func (o *GetTaskTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskDTOListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskTreeNoContent creates a GetTaskTreeNoContent with default headers values
func NewGetTaskTreeNoContent() *GetTaskTreeNoContent {
	return &GetTaskTreeNoContent{}
}

/*GetTaskTreeNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetTaskTreeNoContent struct {
}

func (o *GetTaskTreeNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeNoContent ", 204)
}

func (o *GetTaskTreeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreePartialContent creates a GetTaskTreePartialContent with default headers values
func NewGetTaskTreePartialContent() *GetTaskTreePartialContent {
	return &GetTaskTreePartialContent{}
}

/*GetTaskTreePartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetTaskTreePartialContent struct {
}

func (o *GetTaskTreePartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreePartialContent ", 206)
}

func (o *GetTaskTreePartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeBadRequest creates a GetTaskTreeBadRequest with default headers values
func NewGetTaskTreeBadRequest() *GetTaskTreeBadRequest {
	return &GetTaskTreeBadRequest{}
}

/*GetTaskTreeBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetTaskTreeBadRequest struct {
}

func (o *GetTaskTreeBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeBadRequest ", 400)
}

func (o *GetTaskTreeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeUnauthorized creates a GetTaskTreeUnauthorized with default headers values
func NewGetTaskTreeUnauthorized() *GetTaskTreeUnauthorized {
	return &GetTaskTreeUnauthorized{}
}

/*GetTaskTreeUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetTaskTreeUnauthorized struct {
}

func (o *GetTaskTreeUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeUnauthorized ", 401)
}

func (o *GetTaskTreeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeForbidden creates a GetTaskTreeForbidden with default headers values
func NewGetTaskTreeForbidden() *GetTaskTreeForbidden {
	return &GetTaskTreeForbidden{}
}

/*GetTaskTreeForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetTaskTreeForbidden struct {
}

func (o *GetTaskTreeForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeForbidden ", 403)
}

func (o *GetTaskTreeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeNotFound creates a GetTaskTreeNotFound with default headers values
func NewGetTaskTreeNotFound() *GetTaskTreeNotFound {
	return &GetTaskTreeNotFound{}
}

/*GetTaskTreeNotFound handles this case with default header values.

No task corresponding to the id was found
*/
type GetTaskTreeNotFound struct {
}

func (o *GetTaskTreeNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeNotFound ", 404)
}

func (o *GetTaskTreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeConflict creates a GetTaskTreeConflict with default headers values
func NewGetTaskTreeConflict() *GetTaskTreeConflict {
	return &GetTaskTreeConflict{}
}

/*GetTaskTreeConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetTaskTreeConflict struct {
}

func (o *GetTaskTreeConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeConflict ", 409)
}

func (o *GetTaskTreeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeUnsupportedMediaType creates a GetTaskTreeUnsupportedMediaType with default headers values
func NewGetTaskTreeUnsupportedMediaType() *GetTaskTreeUnsupportedMediaType {
	return &GetTaskTreeUnsupportedMediaType{}
}

/*GetTaskTreeUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetTaskTreeUnsupportedMediaType struct {
}

func (o *GetTaskTreeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeUnsupportedMediaType ", 415)
}

func (o *GetTaskTreeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeInternalServerError creates a GetTaskTreeInternalServerError with default headers values
func NewGetTaskTreeInternalServerError() *GetTaskTreeInternalServerError {
	return &GetTaskTreeInternalServerError{}
}

/*GetTaskTreeInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetTaskTreeInternalServerError struct {
}

func (o *GetTaskTreeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeInternalServerError ", 500)
}

func (o *GetTaskTreeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeNotImplemented creates a GetTaskTreeNotImplemented with default headers values
func NewGetTaskTreeNotImplemented() *GetTaskTreeNotImplemented {
	return &GetTaskTreeNotImplemented{}
}

/*GetTaskTreeNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetTaskTreeNotImplemented struct {
}

func (o *GetTaskTreeNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeNotImplemented ", 501)
}

func (o *GetTaskTreeNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeServiceUnavailable creates a GetTaskTreeServiceUnavailable with default headers values
func NewGetTaskTreeServiceUnavailable() *GetTaskTreeServiceUnavailable {
	return &GetTaskTreeServiceUnavailable{}
}

/*GetTaskTreeServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetTaskTreeServiceUnavailable struct {
}

func (o *GetTaskTreeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeServiceUnavailable ", 503)
}

func (o *GetTaskTreeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskTreeGatewayTimeout creates a GetTaskTreeGatewayTimeout with default headers values
func NewGetTaskTreeGatewayTimeout() *GetTaskTreeGatewayTimeout {
	return &GetTaskTreeGatewayTimeout{}
}

/*GetTaskTreeGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetTaskTreeGatewayTimeout struct {
}

func (o *GetTaskTreeGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/{taskId}/tree][%d] getTaskTreeGatewayTimeout ", 504)
}

func (o *GetTaskTreeGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
