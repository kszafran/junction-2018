// Code generated by go-swagger; DO NOT EDIT.

package task

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetTaskCountReader is a Reader for the GetTaskCount structure.
type GetTaskCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTaskCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetTaskCountNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetTaskCountPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTaskCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTaskCountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTaskCountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTaskCountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetTaskCountConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetTaskCountUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetTaskCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetTaskCountNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetTaskCountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetTaskCountGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTaskCountOK creates a GetTaskCountOK with default headers values
func NewGetTaskCountOK() *GetTaskCountOK {
	return &GetTaskCountOK{}
}

/*GetTaskCountOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetTaskCountOK struct {
	Payload *models.CountResult
}

func (o *GetTaskCountOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountOK  %+v", 200, o.Payload)
}

func (o *GetTaskCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CountResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskCountNoContent creates a GetTaskCountNoContent with default headers values
func NewGetTaskCountNoContent() *GetTaskCountNoContent {
	return &GetTaskCountNoContent{}
}

/*GetTaskCountNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetTaskCountNoContent struct {
}

func (o *GetTaskCountNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountNoContent ", 204)
}

func (o *GetTaskCountNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountPartialContent creates a GetTaskCountPartialContent with default headers values
func NewGetTaskCountPartialContent() *GetTaskCountPartialContent {
	return &GetTaskCountPartialContent{}
}

/*GetTaskCountPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetTaskCountPartialContent struct {
}

func (o *GetTaskCountPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountPartialContent ", 206)
}

func (o *GetTaskCountPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountBadRequest creates a GetTaskCountBadRequest with default headers values
func NewGetTaskCountBadRequest() *GetTaskCountBadRequest {
	return &GetTaskCountBadRequest{}
}

/*GetTaskCountBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetTaskCountBadRequest struct {
}

func (o *GetTaskCountBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountBadRequest ", 400)
}

func (o *GetTaskCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountUnauthorized creates a GetTaskCountUnauthorized with default headers values
func NewGetTaskCountUnauthorized() *GetTaskCountUnauthorized {
	return &GetTaskCountUnauthorized{}
}

/*GetTaskCountUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetTaskCountUnauthorized struct {
}

func (o *GetTaskCountUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountUnauthorized ", 401)
}

func (o *GetTaskCountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountForbidden creates a GetTaskCountForbidden with default headers values
func NewGetTaskCountForbidden() *GetTaskCountForbidden {
	return &GetTaskCountForbidden{}
}

/*GetTaskCountForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetTaskCountForbidden struct {
}

func (o *GetTaskCountForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountForbidden ", 403)
}

func (o *GetTaskCountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountNotFound creates a GetTaskCountNotFound with default headers values
func NewGetTaskCountNotFound() *GetTaskCountNotFound {
	return &GetTaskCountNotFound{}
}

/*GetTaskCountNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type GetTaskCountNotFound struct {
}

func (o *GetTaskCountNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountNotFound ", 404)
}

func (o *GetTaskCountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountConflict creates a GetTaskCountConflict with default headers values
func NewGetTaskCountConflict() *GetTaskCountConflict {
	return &GetTaskCountConflict{}
}

/*GetTaskCountConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetTaskCountConflict struct {
}

func (o *GetTaskCountConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountConflict ", 409)
}

func (o *GetTaskCountConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountUnsupportedMediaType creates a GetTaskCountUnsupportedMediaType with default headers values
func NewGetTaskCountUnsupportedMediaType() *GetTaskCountUnsupportedMediaType {
	return &GetTaskCountUnsupportedMediaType{}
}

/*GetTaskCountUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetTaskCountUnsupportedMediaType struct {
}

func (o *GetTaskCountUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountUnsupportedMediaType ", 415)
}

func (o *GetTaskCountUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountInternalServerError creates a GetTaskCountInternalServerError with default headers values
func NewGetTaskCountInternalServerError() *GetTaskCountInternalServerError {
	return &GetTaskCountInternalServerError{}
}

/*GetTaskCountInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetTaskCountInternalServerError struct {
}

func (o *GetTaskCountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountInternalServerError ", 500)
}

func (o *GetTaskCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountNotImplemented creates a GetTaskCountNotImplemented with default headers values
func NewGetTaskCountNotImplemented() *GetTaskCountNotImplemented {
	return &GetTaskCountNotImplemented{}
}

/*GetTaskCountNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetTaskCountNotImplemented struct {
}

func (o *GetTaskCountNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountNotImplemented ", 501)
}

func (o *GetTaskCountNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountServiceUnavailable creates a GetTaskCountServiceUnavailable with default headers values
func NewGetTaskCountServiceUnavailable() *GetTaskCountServiceUnavailable {
	return &GetTaskCountServiceUnavailable{}
}

/*GetTaskCountServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetTaskCountServiceUnavailable struct {
}

func (o *GetTaskCountServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountServiceUnavailable ", 503)
}

func (o *GetTaskCountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskCountGatewayTimeout creates a GetTaskCountGatewayTimeout with default headers values
func NewGetTaskCountGatewayTimeout() *GetTaskCountGatewayTimeout {
	return &GetTaskCountGatewayTimeout{}
}

/*GetTaskCountGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetTaskCountGatewayTimeout struct {
}

func (o *GetTaskCountGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/task/count][%d] getTaskCountGatewayTimeout ", 504)
}

func (o *GetTaskCountGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
