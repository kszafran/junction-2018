// Code generated by go-swagger; DO NOT EDIT.

package command_runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new command runner API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for command runner API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAllKeywordsOfCLIsAcceptedByCommandRunner gets all keywords of c l is accepted by command runner

Get valid keywords
*/
func (a *Client) GetAllKeywordsOfCLIsAcceptedByCommandRunner(params *GetAllKeywordsOfCLIsAcceptedByCommandRunnerParams) (*GetAllKeywordsOfCLIsAcceptedByCommandRunnerOK, *GetAllKeywordsOfCLIsAcceptedByCommandRunnerNoContent, *GetAllKeywordsOfCLIsAcceptedByCommandRunnerPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllKeywordsOfCLIsAcceptedByCommandRunnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllKeywordsOfCLIsAcceptedByCommandRunner",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device-poller/cli/legit-reads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllKeywordsOfCLIsAcceptedByCommandRunnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllKeywordsOfCLIsAcceptedByCommandRunnerOK:
		return value, nil, nil, nil
	case *GetAllKeywordsOfCLIsAcceptedByCommandRunnerNoContent:
		return nil, value, nil, nil
	case *GetAllKeywordsOfCLIsAcceptedByCommandRunnerPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfiguration runs read only commands on devices to get their real time configuration

Submit request for read-only CLIs
*/
func (a *Client) RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfiguration(params *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) (*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK, *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated, *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted, *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent, *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "runRead-onlyCommandsOnDevicesToGetTheirReal-timeConfiguration",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/network-device-poller/cli/read-request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK:
		return value, nil, nil, nil, nil, nil
	case *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated:
		return nil, value, nil, nil, nil, nil
	case *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted:
		return nil, nil, value, nil, nil, nil
	case *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent:
		return nil, nil, nil, value, nil, nil
	case *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
