// Code generated by go-swagger; DO NOT EDIT.

package command_runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams creates a new RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams object
// with the default values initialized.
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithTimeout creates a new RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithTimeout(timeout time.Duration) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithContext creates a new RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams object
// with the default values initialized, and the ability to set a context for a request
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithContext(ctx context.Context) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithHTTPClient creates a new RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParamsWithHTTPClient(client *http.Client) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams contains all the parameters to send to the API endpoint
for the run read only commands on devices to get their real time configuration operation typically these are written to a http.Request
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams struct {

	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*Request
	  request

	*/
	Request *models.CommandRunnerDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WithTimeout(timeout time.Duration) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WithContext(ctx context.Context) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WithHTTPClient(client *http.Client) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WithContentType(contentType string) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithRequest adds the request to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WithRequest(request *models.CommandRunnerDTO) *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the run read only commands on devices to get their real time configuration params
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) SetRequest(request *models.CommandRunnerDTO) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
