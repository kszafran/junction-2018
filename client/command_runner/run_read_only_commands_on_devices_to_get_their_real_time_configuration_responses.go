// Code generated by go-swagger; DO NOT EDIT.

package command_runner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationReader is a Reader for the RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfiguration structure.
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK struct {
	Payload *models.TaskIDResult
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK  %+v", 200, o.Payload)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated ", 201)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted ", 202)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent ", 204)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent ", 206)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest ", 400)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized ", 401)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden ", 403)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound ", 404)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict ", 409)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType ", 415)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError ", 500)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented ", 501)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable ", 503)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout creates a RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout with default headers values
func NewRunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout() *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout {
	return &RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout{}
}

/*RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout struct {
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device-poller/cli/read-request][%d] runReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout ", 504)
}

func (o *RunReadOnlyCommandsOnDevicesToGetTheirRealTimeConfigurationGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
