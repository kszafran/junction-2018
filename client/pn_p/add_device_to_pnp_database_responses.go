// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// AddDeviceToPnpDatabaseReader is a Reader for the AddDeviceToPnpDatabase structure.
type AddDeviceToPnpDatabaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddDeviceToPnpDatabaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddDeviceToPnpDatabaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewAddDeviceToPnpDatabaseCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewAddDeviceToPnpDatabaseAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewAddDeviceToPnpDatabaseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewAddDeviceToPnpDatabasePartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddDeviceToPnpDatabaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddDeviceToPnpDatabaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddDeviceToPnpDatabaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddDeviceToPnpDatabaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddDeviceToPnpDatabaseConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewAddDeviceToPnpDatabaseUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddDeviceToPnpDatabaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewAddDeviceToPnpDatabaseNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAddDeviceToPnpDatabaseServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewAddDeviceToPnpDatabaseGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddDeviceToPnpDatabaseOK creates a AddDeviceToPnpDatabaseOK with default headers values
func NewAddDeviceToPnpDatabaseOK() *AddDeviceToPnpDatabaseOK {
	return &AddDeviceToPnpDatabaseOK{}
}

/*AddDeviceToPnpDatabaseOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type AddDeviceToPnpDatabaseOK struct {
	Payload *models.Device
}

func (o *AddDeviceToPnpDatabaseOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseOK  %+v", 200, o.Payload)
}

func (o *AddDeviceToPnpDatabaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Device)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddDeviceToPnpDatabaseCreated creates a AddDeviceToPnpDatabaseCreated with default headers values
func NewAddDeviceToPnpDatabaseCreated() *AddDeviceToPnpDatabaseCreated {
	return &AddDeviceToPnpDatabaseCreated{}
}

/*AddDeviceToPnpDatabaseCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type AddDeviceToPnpDatabaseCreated struct {
}

func (o *AddDeviceToPnpDatabaseCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseCreated ", 201)
}

func (o *AddDeviceToPnpDatabaseCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseAccepted creates a AddDeviceToPnpDatabaseAccepted with default headers values
func NewAddDeviceToPnpDatabaseAccepted() *AddDeviceToPnpDatabaseAccepted {
	return &AddDeviceToPnpDatabaseAccepted{}
}

/*AddDeviceToPnpDatabaseAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type AddDeviceToPnpDatabaseAccepted struct {
}

func (o *AddDeviceToPnpDatabaseAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseAccepted ", 202)
}

func (o *AddDeviceToPnpDatabaseAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseNoContent creates a AddDeviceToPnpDatabaseNoContent with default headers values
func NewAddDeviceToPnpDatabaseNoContent() *AddDeviceToPnpDatabaseNoContent {
	return &AddDeviceToPnpDatabaseNoContent{}
}

/*AddDeviceToPnpDatabaseNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type AddDeviceToPnpDatabaseNoContent struct {
}

func (o *AddDeviceToPnpDatabaseNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseNoContent ", 204)
}

func (o *AddDeviceToPnpDatabaseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabasePartialContent creates a AddDeviceToPnpDatabasePartialContent with default headers values
func NewAddDeviceToPnpDatabasePartialContent() *AddDeviceToPnpDatabasePartialContent {
	return &AddDeviceToPnpDatabasePartialContent{}
}

/*AddDeviceToPnpDatabasePartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type AddDeviceToPnpDatabasePartialContent struct {
}

func (o *AddDeviceToPnpDatabasePartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabasePartialContent ", 206)
}

func (o *AddDeviceToPnpDatabasePartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseBadRequest creates a AddDeviceToPnpDatabaseBadRequest with default headers values
func NewAddDeviceToPnpDatabaseBadRequest() *AddDeviceToPnpDatabaseBadRequest {
	return &AddDeviceToPnpDatabaseBadRequest{}
}

/*AddDeviceToPnpDatabaseBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type AddDeviceToPnpDatabaseBadRequest struct {
}

func (o *AddDeviceToPnpDatabaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseBadRequest ", 400)
}

func (o *AddDeviceToPnpDatabaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseUnauthorized creates a AddDeviceToPnpDatabaseUnauthorized with default headers values
func NewAddDeviceToPnpDatabaseUnauthorized() *AddDeviceToPnpDatabaseUnauthorized {
	return &AddDeviceToPnpDatabaseUnauthorized{}
}

/*AddDeviceToPnpDatabaseUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type AddDeviceToPnpDatabaseUnauthorized struct {
}

func (o *AddDeviceToPnpDatabaseUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseUnauthorized ", 401)
}

func (o *AddDeviceToPnpDatabaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseForbidden creates a AddDeviceToPnpDatabaseForbidden with default headers values
func NewAddDeviceToPnpDatabaseForbidden() *AddDeviceToPnpDatabaseForbidden {
	return &AddDeviceToPnpDatabaseForbidden{}
}

/*AddDeviceToPnpDatabaseForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type AddDeviceToPnpDatabaseForbidden struct {
}

func (o *AddDeviceToPnpDatabaseForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseForbidden ", 403)
}

func (o *AddDeviceToPnpDatabaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseNotFound creates a AddDeviceToPnpDatabaseNotFound with default headers values
func NewAddDeviceToPnpDatabaseNotFound() *AddDeviceToPnpDatabaseNotFound {
	return &AddDeviceToPnpDatabaseNotFound{}
}

/*AddDeviceToPnpDatabaseNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type AddDeviceToPnpDatabaseNotFound struct {
}

func (o *AddDeviceToPnpDatabaseNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseNotFound ", 404)
}

func (o *AddDeviceToPnpDatabaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseConflict creates a AddDeviceToPnpDatabaseConflict with default headers values
func NewAddDeviceToPnpDatabaseConflict() *AddDeviceToPnpDatabaseConflict {
	return &AddDeviceToPnpDatabaseConflict{}
}

/*AddDeviceToPnpDatabaseConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type AddDeviceToPnpDatabaseConflict struct {
}

func (o *AddDeviceToPnpDatabaseConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseConflict ", 409)
}

func (o *AddDeviceToPnpDatabaseConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseUnsupportedMediaType creates a AddDeviceToPnpDatabaseUnsupportedMediaType with default headers values
func NewAddDeviceToPnpDatabaseUnsupportedMediaType() *AddDeviceToPnpDatabaseUnsupportedMediaType {
	return &AddDeviceToPnpDatabaseUnsupportedMediaType{}
}

/*AddDeviceToPnpDatabaseUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type AddDeviceToPnpDatabaseUnsupportedMediaType struct {
}

func (o *AddDeviceToPnpDatabaseUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseUnsupportedMediaType ", 415)
}

func (o *AddDeviceToPnpDatabaseUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseInternalServerError creates a AddDeviceToPnpDatabaseInternalServerError with default headers values
func NewAddDeviceToPnpDatabaseInternalServerError() *AddDeviceToPnpDatabaseInternalServerError {
	return &AddDeviceToPnpDatabaseInternalServerError{}
}

/*AddDeviceToPnpDatabaseInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type AddDeviceToPnpDatabaseInternalServerError struct {
}

func (o *AddDeviceToPnpDatabaseInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseInternalServerError ", 500)
}

func (o *AddDeviceToPnpDatabaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseNotImplemented creates a AddDeviceToPnpDatabaseNotImplemented with default headers values
func NewAddDeviceToPnpDatabaseNotImplemented() *AddDeviceToPnpDatabaseNotImplemented {
	return &AddDeviceToPnpDatabaseNotImplemented{}
}

/*AddDeviceToPnpDatabaseNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type AddDeviceToPnpDatabaseNotImplemented struct {
}

func (o *AddDeviceToPnpDatabaseNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseNotImplemented ", 501)
}

func (o *AddDeviceToPnpDatabaseNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseServiceUnavailable creates a AddDeviceToPnpDatabaseServiceUnavailable with default headers values
func NewAddDeviceToPnpDatabaseServiceUnavailable() *AddDeviceToPnpDatabaseServiceUnavailable {
	return &AddDeviceToPnpDatabaseServiceUnavailable{}
}

/*AddDeviceToPnpDatabaseServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type AddDeviceToPnpDatabaseServiceUnavailable struct {
}

func (o *AddDeviceToPnpDatabaseServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseServiceUnavailable ", 503)
}

func (o *AddDeviceToPnpDatabaseServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceToPnpDatabaseGatewayTimeout creates a AddDeviceToPnpDatabaseGatewayTimeout with default headers values
func NewAddDeviceToPnpDatabaseGatewayTimeout() *AddDeviceToPnpDatabaseGatewayTimeout {
	return &AddDeviceToPnpDatabaseGatewayTimeout{}
}

/*AddDeviceToPnpDatabaseGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type AddDeviceToPnpDatabaseGatewayTimeout struct {
}

func (o *AddDeviceToPnpDatabaseGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/onboarding/pnp-device][%d] addDeviceToPnpDatabaseGatewayTimeout ", 504)
}

func (o *AddDeviceToPnpDatabaseGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
