// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pn p API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pn p API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddAWorkflow adds a workflow

Adds a PnP Workflow along with the relevant tasks in the workflow into the PnP database
*/
func (a *Client) AddAWorkflow(params *AddAWorkflowParams) (*AddAWorkflowOK, *AddAWorkflowCreated, *AddAWorkflowAccepted, *AddAWorkflowNoContent, *AddAWorkflowPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addAWorkflow",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddAWorkflowOK:
		return value, nil, nil, nil, nil, nil
	case *AddAWorkflowCreated:
		return nil, value, nil, nil, nil, nil
	case *AddAWorkflowAccepted:
		return nil, nil, value, nil, nil, nil
	case *AddAWorkflowNoContent:
		return nil, nil, nil, value, nil, nil
	case *AddAWorkflowPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
AddDeviceToPnpDatabase adds device

Adds a device to the PnP database.
*/
func (a *Client) AddDeviceToPnpDatabase(params *AddDeviceToPnpDatabaseParams) (*AddDeviceToPnpDatabaseOK, *AddDeviceToPnpDatabaseCreated, *AddDeviceToPnpDatabaseAccepted, *AddDeviceToPnpDatabaseNoContent, *AddDeviceToPnpDatabasePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceToPnpDatabaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceToPnpDatabase",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDeviceToPnpDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddDeviceToPnpDatabaseOK:
		return value, nil, nil, nil, nil, nil
	case *AddDeviceToPnpDatabaseCreated:
		return nil, value, nil, nil, nil, nil
	case *AddDeviceToPnpDatabaseAccepted:
		return nil, nil, value, nil, nil, nil
	case *AddDeviceToPnpDatabaseNoContent:
		return nil, nil, nil, value, nil, nil
	case *AddDeviceToPnpDatabasePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
AddVirtualAccount adds virtual account

Registers a Smart Account, Virtual Account and the relevant server profile info with the PnP System & database. The devices present in the registered virtual account are synced with the PnP database as well. The response payload returns the new profile
*/
func (a *Client) AddVirtualAccount(params *AddVirtualAccountParams) (*AddVirtualAccountOK, *AddVirtualAccountCreated, *AddVirtualAccountAccepted, *AddVirtualAccountNoContent, *AddVirtualAccountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVirtualAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addVirtualAccount",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings/savacct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddVirtualAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddVirtualAccountOK:
		return value, nil, nil, nil, nil, nil
	case *AddVirtualAccountCreated:
		return nil, value, nil, nil, nil, nil
	case *AddVirtualAccountAccepted:
		return nil, nil, value, nil, nil, nil
	case *AddVirtualAccountNoContent:
		return nil, nil, nil, value, nil, nil
	case *AddVirtualAccountPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
ClaimDevice claims device

Claims one of more devices with specified workflow
*/
func (a *Client) ClaimDevice(params *ClaimDeviceParams) (*ClaimDeviceOK, *ClaimDeviceCreated, *ClaimDeviceAccepted, *ClaimDeviceNoContent, *ClaimDevicePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewClaimDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "claimDevice",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/claim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ClaimDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ClaimDeviceOK:
		return value, nil, nil, nil, nil, nil
	case *ClaimDeviceCreated:
		return nil, value, nil, nil, nil, nil
	case *ClaimDeviceAccepted:
		return nil, nil, value, nil, nil, nil
	case *ClaimDeviceNoContent:
		return nil, nil, nil, value, nil, nil
	case *ClaimDevicePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
DeleteDeviceByIDFromPnP deletes device by Id from pn p

Deletes specified device from PnP database
*/
func (a *Client) DeleteDeviceByIDFromPnP(params *DeleteDeviceByIDFromPnPParams) (*DeleteDeviceByIDFromPnPOK, *DeleteDeviceByIDFromPnPNoContent, *DeleteDeviceByIDFromPnPPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceByIDFromPnPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceByIdFromPnP",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeviceByIDFromPnPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDeviceByIDFromPnPOK:
		return value, nil, nil, nil
	case *DeleteDeviceByIDFromPnPNoContent:
		return nil, value, nil, nil
	case *DeleteDeviceByIDFromPnPPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteWorkflowByID deletes workflow by Id

Deletes a workflow specified by id
*/
func (a *Client) DeleteWorkflowByID(params *DeleteWorkflowByIDParams) (*DeleteWorkflowByIDOK, *DeleteWorkflowByIDNoContent, *DeleteWorkflowByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWorkflowById",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWorkflowByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteWorkflowByIDOK:
		return value, nil, nil, nil
	case *DeleteWorkflowByIDNoContent:
		return nil, value, nil, nil
	case *DeleteWorkflowByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeregisterVirtualAccount deregisters virtual account

Deregisters the specified smart account & virtual account info and the associated device information from the PnP System & database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The response payload contains the deregistered smart & virtual account information
*/
func (a *Client) DeregisterVirtualAccount(params *DeregisterVirtualAccountParams) (*DeregisterVirtualAccountOK, *DeregisterVirtualAccountNoContent, *DeregisterVirtualAccountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeregisterVirtualAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deregisterVirtualAccount",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings/vacct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeregisterVirtualAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeregisterVirtualAccountOK:
		return value, nil, nil, nil
	case *DeregisterVirtualAccountNoContent:
		return nil, value, nil, nil
	case *DeregisterVirtualAccountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceByID gets device by Id

Returns device details specified by device id
*/
func (a *Client) GetDeviceByID(params *GetDeviceByIDParams) (*GetDeviceByIDOK, *GetDeviceByIDNoContent, *GetDeviceByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceByIDOK:
		return value, nil, nil, nil
	case *GetDeviceByIDNoContent:
		return nil, value, nil, nil
	case *GetDeviceByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceHistory gets device history

Returns history for a specific device. Serial number is a required parameter
*/
func (a *Client) GetDeviceHistory(params *GetDeviceHistoryParams) (*GetDeviceHistoryOK, *GetDeviceHistoryNoContent, *GetDeviceHistoryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceHistory",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceHistoryOK:
		return value, nil, nil, nil
	case *GetDeviceHistoryNoContent:
		return nil, value, nil, nil
	case *GetDeviceHistoryPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetPnPGlobalSettings gets pn p global settings

Returns global PnP settings of the user
*/
func (a *Client) GetPnPGlobalSettings(params *GetPnPGlobalSettingsParams) (*GetPnPGlobalSettingsOK, *GetPnPGlobalSettingsNoContent, *GetPnPGlobalSettingsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPnPGlobalSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPnPGlobalSettings",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPnPGlobalSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPnPGlobalSettingsOK:
		return value, nil, nil, nil
	case *GetPnPGlobalSettingsNoContent:
		return nil, value, nil, nil
	case *GetPnPGlobalSettingsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetPnpDeviceCount gets device count

Returns the device count based on filter criteria. This is useful for pagination
*/
func (a *Client) GetPnpDeviceCount(params *GetPnpDeviceCountParams) (*GetPnpDeviceCountOK, *GetPnpDeviceCountNoContent, *GetPnpDeviceCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPnpDeviceCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPnpDeviceCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPnpDeviceCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPnpDeviceCountOK:
		return value, nil, nil, nil
	case *GetPnpDeviceCountNoContent:
		return nil, value, nil, nil
	case *GetPnpDeviceCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetPnpDeviceList gets device list

Returns list of devices based on filter crieteria. If a limit is not specified, it will default to return 50 devices. Pagination and sorting are also supported by this endpoint
*/
func (a *Client) GetPnpDeviceList(params *GetPnpDeviceListParams) (*GetPnpDeviceListOK, *GetPnpDeviceListNoContent, *GetPnpDeviceListPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPnpDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPnpDeviceList",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPnpDeviceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPnpDeviceListOK:
		return value, nil, nil, nil
	case *GetPnpDeviceListNoContent:
		return nil, value, nil, nil
	case *GetPnpDeviceListPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetSmartAccountList gets smart account list

Returns the list of Smart Account domains
*/
func (a *Client) GetSmartAccountList(params *GetSmartAccountListParams) (*GetSmartAccountListOK, *GetSmartAccountListNoContent, *GetSmartAccountListPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmartAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmartAccountList",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings/sacct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSmartAccountListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetSmartAccountListOK:
		return value, nil, nil, nil
	case *GetSmartAccountListNoContent:
		return nil, value, nil, nil
	case *GetSmartAccountListPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetSyncResultForVirtualAccount gets sync result for virtual account

Returns the summary of devices synced from the given smart account & virtual account with PnP
*/
func (a *Client) GetSyncResultForVirtualAccount(params *GetSyncResultForVirtualAccountParams) (*GetSyncResultForVirtualAccountOK, *GetSyncResultForVirtualAccountNoContent, *GetSyncResultForVirtualAccountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyncResultForVirtualAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSyncResultForVirtualAccount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSyncResultForVirtualAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetSyncResultForVirtualAccountOK:
		return value, nil, nil, nil
	case *GetSyncResultForVirtualAccountNoContent:
		return nil, value, nil, nil
	case *GetSyncResultForVirtualAccountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetVirtualAccountList gets virtual account list

Returns list of virtual accounts associated with the specified smart account
*/
func (a *Client) GetVirtualAccountList(params *GetVirtualAccountListParams) (*GetVirtualAccountListOK, *GetVirtualAccountListNoContent, *GetVirtualAccountListPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVirtualAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVirtualAccountList",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVirtualAccountListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetVirtualAccountListOK:
		return value, nil, nil, nil
	case *GetVirtualAccountListNoContent:
		return nil, value, nil, nil
	case *GetVirtualAccountListPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetWorkflowByID gets workflow by Id

Returns a workflow specified by id
*/
func (a *Client) GetWorkflowByID(params *GetWorkflowByIDParams) (*GetWorkflowByIDOK, *GetWorkflowByIDNoContent, *GetWorkflowByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetWorkflowByIDOK:
		return value, nil, nil, nil
	case *GetWorkflowByIDNoContent:
		return nil, value, nil, nil
	case *GetWorkflowByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetWorkflowCount gets workflow count

Returns the workflow count
*/
func (a *Client) GetWorkflowCount(params *GetWorkflowCountParams) (*GetWorkflowCountOK, *GetWorkflowCountNoContent, *GetWorkflowCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetWorkflowCountOK:
		return value, nil, nil, nil
	case *GetWorkflowCountNoContent:
		return nil, value, nil, nil
	case *GetWorkflowCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetWorkflows gets workflows

Returns the list of workflows based on filter criteria. If a limit is not specified, it will default to return 50 workflows. Pagination and sorting are also supported by this endpoint
*/
func (a *Client) GetWorkflows(params *GetWorkflowsParams) (*GetWorkflowsOK, *GetWorkflowsNoContent, *GetWorkflowsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflows",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWorkflowsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetWorkflowsOK:
		return value, nil, nil, nil
	case *GetWorkflowsNoContent:
		return nil, value, nil, nil
	case *GetWorkflowsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ImportDevicesInBulk imports devices in bulk

Add devices to PnP in bulk
*/
func (a *Client) ImportDevicesInBulk(params *ImportDevicesInBulkParams) (*ImportDevicesInBulkOK, *ImportDevicesInBulkCreated, *ImportDevicesInBulkAccepted, *ImportDevicesInBulkNoContent, *ImportDevicesInBulkPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportDevicesInBulkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importDevicesInBulk",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportDevicesInBulkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ImportDevicesInBulkOK:
		return value, nil, nil, nil, nil, nil
	case *ImportDevicesInBulkCreated:
		return nil, value, nil, nil, nil, nil
	case *ImportDevicesInBulkAccepted:
		return nil, nil, value, nil, nil, nil
	case *ImportDevicesInBulkNoContent:
		return nil, nil, nil, value, nil, nil
	case *ImportDevicesInBulkPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
ResetDevice resets device

Recovers a device from a Workflow Execution Error state
*/
func (a *Client) ResetDevice(params *ResetDeviceParams) (*ResetDeviceOK, *ResetDeviceCreated, *ResetDeviceAccepted, *ResetDeviceNoContent, *ResetDevicePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetDevice",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ResetDeviceOK:
		return value, nil, nil, nil, nil, nil
	case *ResetDeviceCreated:
		return nil, value, nil, nil, nil, nil
	case *ResetDeviceAccepted:
		return nil, nil, value, nil, nil, nil
	case *ResetDeviceNoContent:
		return nil, nil, nil, value, nil, nil
	case *ResetDevicePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
SyncVirtualAccountDevices syncs virtual account devices

Synchronizes the device info from the given smart account & virtual account with the PnP database. The response payload returns a list of synced devices
*/
func (a *Client) SyncVirtualAccountDevices(params *SyncVirtualAccountDevicesParams) (*SyncVirtualAccountDevicesOK, *SyncVirtualAccountDevicesCreated, *SyncVirtualAccountDevicesAccepted, *SyncVirtualAccountDevicesNoContent, *SyncVirtualAccountDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncVirtualAccountDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncVirtualAccountDevices",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/vacct-sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncVirtualAccountDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SyncVirtualAccountDevicesOK:
		return value, nil, nil, nil, nil, nil
	case *SyncVirtualAccountDevicesCreated:
		return nil, value, nil, nil, nil, nil
	case *SyncVirtualAccountDevicesAccepted:
		return nil, nil, value, nil, nil, nil
	case *SyncVirtualAccountDevicesNoContent:
		return nil, nil, nil, value, nil, nil
	case *SyncVirtualAccountDevicesPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UnClaimDevice uns claim device

Un-Claims one of more devices with specified workflow
*/
func (a *Client) UnClaimDevice(params *UnClaimDeviceParams) (*UnClaimDeviceOK, *UnClaimDeviceCreated, *UnClaimDeviceAccepted, *UnClaimDeviceNoContent, *UnClaimDevicePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnClaimDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "un-ClaimDevice",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/unclaim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnClaimDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UnClaimDeviceOK:
		return value, nil, nil, nil, nil, nil
	case *UnClaimDeviceCreated:
		return nil, value, nil, nil, nil, nil
	case *UnClaimDeviceAccepted:
		return nil, nil, value, nil, nil, nil
	case *UnClaimDeviceNoContent:
		return nil, nil, nil, value, nil, nil
	case *UnClaimDevicePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateDevice updates device

Updates device details specified by device id in PnP database
*/
func (a *Client) UpdateDevice(params *UpdateDeviceParams) (*UpdateDeviceOK, *UpdateDeviceCreated, *UpdateDeviceAccepted, *UpdateDeviceNoContent, *UpdateDevicePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDevice",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDeviceOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateDeviceCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateDeviceAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateDeviceNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateDevicePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdatePnPGlobalSettings updates pn p global settings

Updates the user's list of global PnP settings
*/
func (a *Client) UpdatePnPGlobalSettings(params *UpdatePnPGlobalSettingsParams) (*UpdatePnPGlobalSettingsOK, *UpdatePnPGlobalSettingsCreated, *UpdatePnPGlobalSettingsAccepted, *UpdatePnPGlobalSettingsNoContent, *UpdatePnPGlobalSettingsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePnPGlobalSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePnPGlobalSettings",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePnPGlobalSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePnPGlobalSettingsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdatePnPGlobalSettingsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdatePnPGlobalSettingsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdatePnPGlobalSettingsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdatePnPGlobalSettingsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdatePnPServerProfile updates pn p server profile

Updates the PnP Server profile in a registered Virtual Account in the PnP database. The response payload returns the updated smart & virtual account info
*/
func (a *Client) UpdatePnPServerProfile(params *UpdatePnPServerProfileParams) (*UpdatePnPServerProfileOK, *UpdatePnPServerProfileCreated, *UpdatePnPServerProfileAccepted, *UpdatePnPServerProfileNoContent, *UpdatePnPServerProfilePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePnPServerProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePnPServerProfile",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-settings/savacct",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePnPServerProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePnPServerProfileOK:
		return value, nil, nil, nil, nil, nil
	case *UpdatePnPServerProfileCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdatePnPServerProfileAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdatePnPServerProfileNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdatePnPServerProfilePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateWorkflow updates workflow

Updates an existing workflow
*/
func (a *Client) UpdateWorkflow(params *UpdateWorkflowParams) (*UpdateWorkflowOK, *UpdateWorkflowCreated, *UpdateWorkflowAccepted, *UpdateWorkflowNoContent, *UpdateWorkflowPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWorkflowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWorkflow",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/onboarding/pnp-workflow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWorkflowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateWorkflowOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateWorkflowCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateWorkflowAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateWorkflowNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateWorkflowPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
