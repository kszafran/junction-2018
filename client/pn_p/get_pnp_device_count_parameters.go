// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPnpDeviceCountParams creates a new GetPnpDeviceCountParams object
// with the default values initialized.
func NewGetPnpDeviceCountParams() *GetPnpDeviceCountParams {
	var ()
	return &GetPnpDeviceCountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPnpDeviceCountParamsWithTimeout creates a new GetPnpDeviceCountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPnpDeviceCountParamsWithTimeout(timeout time.Duration) *GetPnpDeviceCountParams {
	var ()
	return &GetPnpDeviceCountParams{

		timeout: timeout,
	}
}

// NewGetPnpDeviceCountParamsWithContext creates a new GetPnpDeviceCountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPnpDeviceCountParamsWithContext(ctx context.Context) *GetPnpDeviceCountParams {
	var ()
	return &GetPnpDeviceCountParams{

		Context: ctx,
	}
}

// NewGetPnpDeviceCountParamsWithHTTPClient creates a new GetPnpDeviceCountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPnpDeviceCountParamsWithHTTPClient(client *http.Client) *GetPnpDeviceCountParams {
	var ()
	return &GetPnpDeviceCountParams{
		HTTPClient: client,
	}
}

/*GetPnpDeviceCountParams contains all the parameters to send to the API endpoint
for the get pnp device count operation typically these are written to a http.Request
*/
type GetPnpDeviceCountParams struct {

	/*CmState
	  Device Connection Manager State

	*/
	CmState []string
	/*LastContact
	  Device Has Contacted lastContact > 0

	*/
	LastContact *bool
	/*Name
	  Device Name

	*/
	Name []string
	/*OnbState
	  Device Onboarding State

	*/
	OnbState []string
	/*Pid
	  Device ProductId

	*/
	Pid []string
	/*ProjectID
	  Device Project Id

	*/
	ProjectID []string
	/*ProjectName
	  Device Project Name

	*/
	ProjectName []string
	/*SerialNumber
	  Device Serial Number

	*/
	SerialNumber []string
	/*SmartAccountID
	  Device Smart Account

	*/
	SmartAccountID []string
	/*Source
	  Device Source

	*/
	Source []string
	/*State
	  Device State

	*/
	State []string
	/*VirtualAccountID
	  Device Virtual Account

	*/
	VirtualAccountID []string
	/*WorkflowID
	  Device Workflow Id

	*/
	WorkflowID []string
	/*WorkflowName
	  Device Workflow Name

	*/
	WorkflowName []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithTimeout(timeout time.Duration) *GetPnpDeviceCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithContext(ctx context.Context) *GetPnpDeviceCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithHTTPClient(client *http.Client) *GetPnpDeviceCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCmState adds the cmState to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithCmState(cmState []string) *GetPnpDeviceCountParams {
	o.SetCmState(cmState)
	return o
}

// SetCmState adds the cmState to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetCmState(cmState []string) {
	o.CmState = cmState
}

// WithLastContact adds the lastContact to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithLastContact(lastContact *bool) *GetPnpDeviceCountParams {
	o.SetLastContact(lastContact)
	return o
}

// SetLastContact adds the lastContact to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetLastContact(lastContact *bool) {
	o.LastContact = lastContact
}

// WithName adds the name to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithName(name []string) *GetPnpDeviceCountParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetName(name []string) {
	o.Name = name
}

// WithOnbState adds the onbState to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithOnbState(onbState []string) *GetPnpDeviceCountParams {
	o.SetOnbState(onbState)
	return o
}

// SetOnbState adds the onbState to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetOnbState(onbState []string) {
	o.OnbState = onbState
}

// WithPid adds the pid to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithPid(pid []string) *GetPnpDeviceCountParams {
	o.SetPid(pid)
	return o
}

// SetPid adds the pid to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetPid(pid []string) {
	o.Pid = pid
}

// WithProjectID adds the projectID to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithProjectID(projectID []string) *GetPnpDeviceCountParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetProjectID(projectID []string) {
	o.ProjectID = projectID
}

// WithProjectName adds the projectName to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithProjectName(projectName []string) *GetPnpDeviceCountParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetProjectName(projectName []string) {
	o.ProjectName = projectName
}

// WithSerialNumber adds the serialNumber to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithSerialNumber(serialNumber []string) *GetPnpDeviceCountParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetSerialNumber(serialNumber []string) {
	o.SerialNumber = serialNumber
}

// WithSmartAccountID adds the smartAccountID to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithSmartAccountID(smartAccountID []string) *GetPnpDeviceCountParams {
	o.SetSmartAccountID(smartAccountID)
	return o
}

// SetSmartAccountID adds the smartAccountId to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetSmartAccountID(smartAccountID []string) {
	o.SmartAccountID = smartAccountID
}

// WithSource adds the source to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithSource(source []string) *GetPnpDeviceCountParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetSource(source []string) {
	o.Source = source
}

// WithState adds the state to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithState(state []string) *GetPnpDeviceCountParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetState(state []string) {
	o.State = state
}

// WithVirtualAccountID adds the virtualAccountID to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithVirtualAccountID(virtualAccountID []string) *GetPnpDeviceCountParams {
	o.SetVirtualAccountID(virtualAccountID)
	return o
}

// SetVirtualAccountID adds the virtualAccountId to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetVirtualAccountID(virtualAccountID []string) {
	o.VirtualAccountID = virtualAccountID
}

// WithWorkflowID adds the workflowID to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithWorkflowID(workflowID []string) *GetPnpDeviceCountParams {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetWorkflowID(workflowID []string) {
	o.WorkflowID = workflowID
}

// WithWorkflowName adds the workflowName to the get pnp device count params
func (o *GetPnpDeviceCountParams) WithWorkflowName(workflowName []string) *GetPnpDeviceCountParams {
	o.SetWorkflowName(workflowName)
	return o
}

// SetWorkflowName adds the workflowName to the get pnp device count params
func (o *GetPnpDeviceCountParams) SetWorkflowName(workflowName []string) {
	o.WorkflowName = workflowName
}

// WriteToRequest writes these params to a swagger request
func (o *GetPnpDeviceCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCmState := o.CmState

	joinedCmState := swag.JoinByFormat(valuesCmState, "")
	// query array param cmState
	if err := r.SetQueryParam("cmState", joinedCmState...); err != nil {
		return err
	}

	if o.LastContact != nil {

		// query param lastContact
		var qrLastContact bool
		if o.LastContact != nil {
			qrLastContact = *o.LastContact
		}
		qLastContact := swag.FormatBool(qrLastContact)
		if qLastContact != "" {
			if err := r.SetQueryParam("lastContact", qLastContact); err != nil {
				return err
			}
		}

	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	valuesOnbState := o.OnbState

	joinedOnbState := swag.JoinByFormat(valuesOnbState, "")
	// query array param onbState
	if err := r.SetQueryParam("onbState", joinedOnbState...); err != nil {
		return err
	}

	valuesPid := o.Pid

	joinedPid := swag.JoinByFormat(valuesPid, "")
	// query array param pid
	if err := r.SetQueryParam("pid", joinedPid...); err != nil {
		return err
	}

	valuesProjectID := o.ProjectID

	joinedProjectID := swag.JoinByFormat(valuesProjectID, "")
	// query array param projectId
	if err := r.SetQueryParam("projectId", joinedProjectID...); err != nil {
		return err
	}

	valuesProjectName := o.ProjectName

	joinedProjectName := swag.JoinByFormat(valuesProjectName, "")
	// query array param projectName
	if err := r.SetQueryParam("projectName", joinedProjectName...); err != nil {
		return err
	}

	valuesSerialNumber := o.SerialNumber

	joinedSerialNumber := swag.JoinByFormat(valuesSerialNumber, "")
	// query array param serialNumber
	if err := r.SetQueryParam("serialNumber", joinedSerialNumber...); err != nil {
		return err
	}

	valuesSmartAccountID := o.SmartAccountID

	joinedSmartAccountID := swag.JoinByFormat(valuesSmartAccountID, "")
	// query array param smartAccountId
	if err := r.SetQueryParam("smartAccountId", joinedSmartAccountID...); err != nil {
		return err
	}

	valuesSource := o.Source

	joinedSource := swag.JoinByFormat(valuesSource, "")
	// query array param source
	if err := r.SetQueryParam("source", joinedSource...); err != nil {
		return err
	}

	valuesState := o.State

	joinedState := swag.JoinByFormat(valuesState, "")
	// query array param state
	if err := r.SetQueryParam("state", joinedState...); err != nil {
		return err
	}

	valuesVirtualAccountID := o.VirtualAccountID

	joinedVirtualAccountID := swag.JoinByFormat(valuesVirtualAccountID, "")
	// query array param virtualAccountId
	if err := r.SetQueryParam("virtualAccountId", joinedVirtualAccountID...); err != nil {
		return err
	}

	valuesWorkflowID := o.WorkflowID

	joinedWorkflowID := swag.JoinByFormat(valuesWorkflowID, "")
	// query array param workflowId
	if err := r.SetQueryParam("workflowId", joinedWorkflowID...); err != nil {
		return err
	}

	valuesWorkflowName := o.WorkflowName

	joinedWorkflowName := swag.JoinByFormat(valuesWorkflowName, "")
	// query array param workflowName
	if err := r.SetQueryParam("workflowName", joinedWorkflowName...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
