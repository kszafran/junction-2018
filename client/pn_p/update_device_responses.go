// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateDeviceReader is a Reader for the UpdateDevice structure.
type UpdateDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateDeviceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateDeviceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateDeviceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateDevicePartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateDeviceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateDeviceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateDeviceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateDeviceNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateDeviceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateDeviceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateDeviceOK creates a UpdateDeviceOK with default headers values
func NewUpdateDeviceOK() *UpdateDeviceOK {
	return &UpdateDeviceOK{}
}

/*UpdateDeviceOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateDeviceOK struct {
	Payload *models.UpdateDeviceResponse
}

func (o *UpdateDeviceOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceOK  %+v", 200, o.Payload)
}

func (o *UpdateDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateDeviceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDeviceCreated creates a UpdateDeviceCreated with default headers values
func NewUpdateDeviceCreated() *UpdateDeviceCreated {
	return &UpdateDeviceCreated{}
}

/*UpdateDeviceCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateDeviceCreated struct {
}

func (o *UpdateDeviceCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceCreated ", 201)
}

func (o *UpdateDeviceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceAccepted creates a UpdateDeviceAccepted with default headers values
func NewUpdateDeviceAccepted() *UpdateDeviceAccepted {
	return &UpdateDeviceAccepted{}
}

/*UpdateDeviceAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateDeviceAccepted struct {
}

func (o *UpdateDeviceAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceAccepted ", 202)
}

func (o *UpdateDeviceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceNoContent creates a UpdateDeviceNoContent with default headers values
func NewUpdateDeviceNoContent() *UpdateDeviceNoContent {
	return &UpdateDeviceNoContent{}
}

/*UpdateDeviceNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateDeviceNoContent struct {
}

func (o *UpdateDeviceNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceNoContent ", 204)
}

func (o *UpdateDeviceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDevicePartialContent creates a UpdateDevicePartialContent with default headers values
func NewUpdateDevicePartialContent() *UpdateDevicePartialContent {
	return &UpdateDevicePartialContent{}
}

/*UpdateDevicePartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateDevicePartialContent struct {
}

func (o *UpdateDevicePartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDevicePartialContent ", 206)
}

func (o *UpdateDevicePartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceBadRequest creates a UpdateDeviceBadRequest with default headers values
func NewUpdateDeviceBadRequest() *UpdateDeviceBadRequest {
	return &UpdateDeviceBadRequest{}
}

/*UpdateDeviceBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateDeviceBadRequest struct {
}

func (o *UpdateDeviceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceBadRequest ", 400)
}

func (o *UpdateDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceUnauthorized creates a UpdateDeviceUnauthorized with default headers values
func NewUpdateDeviceUnauthorized() *UpdateDeviceUnauthorized {
	return &UpdateDeviceUnauthorized{}
}

/*UpdateDeviceUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateDeviceUnauthorized struct {
}

func (o *UpdateDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceUnauthorized ", 401)
}

func (o *UpdateDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceForbidden creates a UpdateDeviceForbidden with default headers values
func NewUpdateDeviceForbidden() *UpdateDeviceForbidden {
	return &UpdateDeviceForbidden{}
}

/*UpdateDeviceForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateDeviceForbidden struct {
}

func (o *UpdateDeviceForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceForbidden ", 403)
}

func (o *UpdateDeviceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceNotFound creates a UpdateDeviceNotFound with default headers values
func NewUpdateDeviceNotFound() *UpdateDeviceNotFound {
	return &UpdateDeviceNotFound{}
}

/*UpdateDeviceNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateDeviceNotFound struct {
}

func (o *UpdateDeviceNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceNotFound ", 404)
}

func (o *UpdateDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceConflict creates a UpdateDeviceConflict with default headers values
func NewUpdateDeviceConflict() *UpdateDeviceConflict {
	return &UpdateDeviceConflict{}
}

/*UpdateDeviceConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateDeviceConflict struct {
}

func (o *UpdateDeviceConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceConflict ", 409)
}

func (o *UpdateDeviceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceUnsupportedMediaType creates a UpdateDeviceUnsupportedMediaType with default headers values
func NewUpdateDeviceUnsupportedMediaType() *UpdateDeviceUnsupportedMediaType {
	return &UpdateDeviceUnsupportedMediaType{}
}

/*UpdateDeviceUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateDeviceUnsupportedMediaType struct {
}

func (o *UpdateDeviceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceUnsupportedMediaType ", 415)
}

func (o *UpdateDeviceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceInternalServerError creates a UpdateDeviceInternalServerError with default headers values
func NewUpdateDeviceInternalServerError() *UpdateDeviceInternalServerError {
	return &UpdateDeviceInternalServerError{}
}

/*UpdateDeviceInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateDeviceInternalServerError struct {
}

func (o *UpdateDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceInternalServerError ", 500)
}

func (o *UpdateDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceNotImplemented creates a UpdateDeviceNotImplemented with default headers values
func NewUpdateDeviceNotImplemented() *UpdateDeviceNotImplemented {
	return &UpdateDeviceNotImplemented{}
}

/*UpdateDeviceNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateDeviceNotImplemented struct {
}

func (o *UpdateDeviceNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceNotImplemented ", 501)
}

func (o *UpdateDeviceNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceServiceUnavailable creates a UpdateDeviceServiceUnavailable with default headers values
func NewUpdateDeviceServiceUnavailable() *UpdateDeviceServiceUnavailable {
	return &UpdateDeviceServiceUnavailable{}
}

/*UpdateDeviceServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateDeviceServiceUnavailable struct {
}

func (o *UpdateDeviceServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceServiceUnavailable ", 503)
}

func (o *UpdateDeviceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateDeviceGatewayTimeout creates a UpdateDeviceGatewayTimeout with default headers values
func NewUpdateDeviceGatewayTimeout() *UpdateDeviceGatewayTimeout {
	return &UpdateDeviceGatewayTimeout{}
}

/*UpdateDeviceGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateDeviceGatewayTimeout struct {
}

func (o *UpdateDeviceGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/onboarding/pnp-device/{id}][%d] updateDeviceGatewayTimeout ", 504)
}

func (o *UpdateDeviceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
