// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetWorkflowsParams creates a new GetWorkflowsParams object
// with the default values initialized.
func NewGetWorkflowsParams() *GetWorkflowsParams {
	var ()
	return &GetWorkflowsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetWorkflowsParamsWithTimeout creates a new GetWorkflowsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetWorkflowsParamsWithTimeout(timeout time.Duration) *GetWorkflowsParams {
	var ()
	return &GetWorkflowsParams{

		timeout: timeout,
	}
}

// NewGetWorkflowsParamsWithContext creates a new GetWorkflowsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetWorkflowsParamsWithContext(ctx context.Context) *GetWorkflowsParams {
	var ()
	return &GetWorkflowsParams{

		Context: ctx,
	}
}

// NewGetWorkflowsParamsWithHTTPClient creates a new GetWorkflowsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetWorkflowsParamsWithHTTPClient(client *http.Client) *GetWorkflowsParams {
	var ()
	return &GetWorkflowsParams{
		HTTPClient: client,
	}
}

/*GetWorkflowsParams contains all the parameters to send to the API endpoint
for the get workflows operation typically these are written to a http.Request
*/
type GetWorkflowsParams struct {

	/*Limit
	  Limits number of results

	*/
	Limit *int64
	/*Name
	  Workflow Name

	*/
	Name []string
	/*Offset
	  Index of first result

	*/
	Offset *int64
	/*Sort
	  Comma seperated lost of fields to sort on

	*/
	Sort []string
	/*SortOrder
	  Sort Order Ascending (asc) or Descending (des)

	*/
	SortOrder *string
	/*Type
	  Workflow Type

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get workflows params
func (o *GetWorkflowsParams) WithTimeout(timeout time.Duration) *GetWorkflowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get workflows params
func (o *GetWorkflowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get workflows params
func (o *GetWorkflowsParams) WithContext(ctx context.Context) *GetWorkflowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get workflows params
func (o *GetWorkflowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get workflows params
func (o *GetWorkflowsParams) WithHTTPClient(client *http.Client) *GetWorkflowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get workflows params
func (o *GetWorkflowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get workflows params
func (o *GetWorkflowsParams) WithLimit(limit *int64) *GetWorkflowsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get workflows params
func (o *GetWorkflowsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get workflows params
func (o *GetWorkflowsParams) WithName(name []string) *GetWorkflowsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get workflows params
func (o *GetWorkflowsParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the get workflows params
func (o *GetWorkflowsParams) WithOffset(offset *int64) *GetWorkflowsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get workflows params
func (o *GetWorkflowsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSort adds the sort to the get workflows params
func (o *GetWorkflowsParams) WithSort(sort []string) *GetWorkflowsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get workflows params
func (o *GetWorkflowsParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithSortOrder adds the sortOrder to the get workflows params
func (o *GetWorkflowsParams) WithSortOrder(sortOrder *string) *GetWorkflowsParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get workflows params
func (o *GetWorkflowsParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithType adds the typeVar to the get workflows params
func (o *GetWorkflowsParams) WithType(typeVar []string) *GetWorkflowsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get workflows params
func (o *GetWorkflowsParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetWorkflowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
