// Code generated by go-swagger; DO NOT EDIT.

package pn_p

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPnpDeviceListParams creates a new GetPnpDeviceListParams object
// with the default values initialized.
func NewGetPnpDeviceListParams() *GetPnpDeviceListParams {
	var ()
	return &GetPnpDeviceListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPnpDeviceListParamsWithTimeout creates a new GetPnpDeviceListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPnpDeviceListParamsWithTimeout(timeout time.Duration) *GetPnpDeviceListParams {
	var ()
	return &GetPnpDeviceListParams{

		timeout: timeout,
	}
}

// NewGetPnpDeviceListParamsWithContext creates a new GetPnpDeviceListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPnpDeviceListParamsWithContext(ctx context.Context) *GetPnpDeviceListParams {
	var ()
	return &GetPnpDeviceListParams{

		Context: ctx,
	}
}

// NewGetPnpDeviceListParamsWithHTTPClient creates a new GetPnpDeviceListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPnpDeviceListParamsWithHTTPClient(client *http.Client) *GetPnpDeviceListParams {
	var ()
	return &GetPnpDeviceListParams{
		HTTPClient: client,
	}
}

/*GetPnpDeviceListParams contains all the parameters to send to the API endpoint
for the get pnp device list operation typically these are written to a http.Request
*/
type GetPnpDeviceListParams struct {

	/*CmState
	  Device Connection Manager State

	*/
	CmState []string
	/*LastContact
	  Device Has Contacted lastContact > 0

	*/
	LastContact *bool
	/*Limit
	  Limits number of results

	*/
	Limit *int64
	/*Name
	  Device Name

	*/
	Name []string
	/*Offset
	  Index of first result

	*/
	Offset *int64
	/*OnbState
	  Device Onboarding State

	*/
	OnbState []string
	/*Pid
	  Device ProductId

	*/
	Pid []string
	/*ProjectID
	  Device Project Id

	*/
	ProjectID []string
	/*ProjectName
	  Device Project Name

	*/
	ProjectName []string
	/*SerialNumber
	  Device Serial Number

	*/
	SerialNumber []string
	/*SmartAccountID
	  Device Smart Account

	*/
	SmartAccountID []string
	/*Sort
	  Comma seperated list of fields to sort on

	*/
	Sort []string
	/*SortOrder
	  Sort Order Ascending (asc) or Descending (des)

	*/
	SortOrder *string
	/*Source
	  Device Source

	*/
	Source []string
	/*State
	  Device State

	*/
	State []string
	/*VirtualAccountID
	  Device Virtual Account

	*/
	VirtualAccountID []string
	/*WorkflowID
	  Device Workflow Id

	*/
	WorkflowID []string
	/*WorkflowName
	  Device Workflow Name

	*/
	WorkflowName []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pnp device list params
func (o *GetPnpDeviceListParams) WithTimeout(timeout time.Duration) *GetPnpDeviceListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pnp device list params
func (o *GetPnpDeviceListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pnp device list params
func (o *GetPnpDeviceListParams) WithContext(ctx context.Context) *GetPnpDeviceListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pnp device list params
func (o *GetPnpDeviceListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pnp device list params
func (o *GetPnpDeviceListParams) WithHTTPClient(client *http.Client) *GetPnpDeviceListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pnp device list params
func (o *GetPnpDeviceListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCmState adds the cmState to the get pnp device list params
func (o *GetPnpDeviceListParams) WithCmState(cmState []string) *GetPnpDeviceListParams {
	o.SetCmState(cmState)
	return o
}

// SetCmState adds the cmState to the get pnp device list params
func (o *GetPnpDeviceListParams) SetCmState(cmState []string) {
	o.CmState = cmState
}

// WithLastContact adds the lastContact to the get pnp device list params
func (o *GetPnpDeviceListParams) WithLastContact(lastContact *bool) *GetPnpDeviceListParams {
	o.SetLastContact(lastContact)
	return o
}

// SetLastContact adds the lastContact to the get pnp device list params
func (o *GetPnpDeviceListParams) SetLastContact(lastContact *bool) {
	o.LastContact = lastContact
}

// WithLimit adds the limit to the get pnp device list params
func (o *GetPnpDeviceListParams) WithLimit(limit *int64) *GetPnpDeviceListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get pnp device list params
func (o *GetPnpDeviceListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the get pnp device list params
func (o *GetPnpDeviceListParams) WithName(name []string) *GetPnpDeviceListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get pnp device list params
func (o *GetPnpDeviceListParams) SetName(name []string) {
	o.Name = name
}

// WithOffset adds the offset to the get pnp device list params
func (o *GetPnpDeviceListParams) WithOffset(offset *int64) *GetPnpDeviceListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get pnp device list params
func (o *GetPnpDeviceListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOnbState adds the onbState to the get pnp device list params
func (o *GetPnpDeviceListParams) WithOnbState(onbState []string) *GetPnpDeviceListParams {
	o.SetOnbState(onbState)
	return o
}

// SetOnbState adds the onbState to the get pnp device list params
func (o *GetPnpDeviceListParams) SetOnbState(onbState []string) {
	o.OnbState = onbState
}

// WithPid adds the pid to the get pnp device list params
func (o *GetPnpDeviceListParams) WithPid(pid []string) *GetPnpDeviceListParams {
	o.SetPid(pid)
	return o
}

// SetPid adds the pid to the get pnp device list params
func (o *GetPnpDeviceListParams) SetPid(pid []string) {
	o.Pid = pid
}

// WithProjectID adds the projectID to the get pnp device list params
func (o *GetPnpDeviceListParams) WithProjectID(projectID []string) *GetPnpDeviceListParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the get pnp device list params
func (o *GetPnpDeviceListParams) SetProjectID(projectID []string) {
	o.ProjectID = projectID
}

// WithProjectName adds the projectName to the get pnp device list params
func (o *GetPnpDeviceListParams) WithProjectName(projectName []string) *GetPnpDeviceListParams {
	o.SetProjectName(projectName)
	return o
}

// SetProjectName adds the projectName to the get pnp device list params
func (o *GetPnpDeviceListParams) SetProjectName(projectName []string) {
	o.ProjectName = projectName
}

// WithSerialNumber adds the serialNumber to the get pnp device list params
func (o *GetPnpDeviceListParams) WithSerialNumber(serialNumber []string) *GetPnpDeviceListParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the get pnp device list params
func (o *GetPnpDeviceListParams) SetSerialNumber(serialNumber []string) {
	o.SerialNumber = serialNumber
}

// WithSmartAccountID adds the smartAccountID to the get pnp device list params
func (o *GetPnpDeviceListParams) WithSmartAccountID(smartAccountID []string) *GetPnpDeviceListParams {
	o.SetSmartAccountID(smartAccountID)
	return o
}

// SetSmartAccountID adds the smartAccountId to the get pnp device list params
func (o *GetPnpDeviceListParams) SetSmartAccountID(smartAccountID []string) {
	o.SmartAccountID = smartAccountID
}

// WithSort adds the sort to the get pnp device list params
func (o *GetPnpDeviceListParams) WithSort(sort []string) *GetPnpDeviceListParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get pnp device list params
func (o *GetPnpDeviceListParams) SetSort(sort []string) {
	o.Sort = sort
}

// WithSortOrder adds the sortOrder to the get pnp device list params
func (o *GetPnpDeviceListParams) WithSortOrder(sortOrder *string) *GetPnpDeviceListParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get pnp device list params
func (o *GetPnpDeviceListParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithSource adds the source to the get pnp device list params
func (o *GetPnpDeviceListParams) WithSource(source []string) *GetPnpDeviceListParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the get pnp device list params
func (o *GetPnpDeviceListParams) SetSource(source []string) {
	o.Source = source
}

// WithState adds the state to the get pnp device list params
func (o *GetPnpDeviceListParams) WithState(state []string) *GetPnpDeviceListParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get pnp device list params
func (o *GetPnpDeviceListParams) SetState(state []string) {
	o.State = state
}

// WithVirtualAccountID adds the virtualAccountID to the get pnp device list params
func (o *GetPnpDeviceListParams) WithVirtualAccountID(virtualAccountID []string) *GetPnpDeviceListParams {
	o.SetVirtualAccountID(virtualAccountID)
	return o
}

// SetVirtualAccountID adds the virtualAccountId to the get pnp device list params
func (o *GetPnpDeviceListParams) SetVirtualAccountID(virtualAccountID []string) {
	o.VirtualAccountID = virtualAccountID
}

// WithWorkflowID adds the workflowID to the get pnp device list params
func (o *GetPnpDeviceListParams) WithWorkflowID(workflowID []string) *GetPnpDeviceListParams {
	o.SetWorkflowID(workflowID)
	return o
}

// SetWorkflowID adds the workflowId to the get pnp device list params
func (o *GetPnpDeviceListParams) SetWorkflowID(workflowID []string) {
	o.WorkflowID = workflowID
}

// WithWorkflowName adds the workflowName to the get pnp device list params
func (o *GetPnpDeviceListParams) WithWorkflowName(workflowName []string) *GetPnpDeviceListParams {
	o.SetWorkflowName(workflowName)
	return o
}

// SetWorkflowName adds the workflowName to the get pnp device list params
func (o *GetPnpDeviceListParams) SetWorkflowName(workflowName []string) {
	o.WorkflowName = workflowName
}

// WriteToRequest writes these params to a swagger request
func (o *GetPnpDeviceListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCmState := o.CmState

	joinedCmState := swag.JoinByFormat(valuesCmState, "")
	// query array param cmState
	if err := r.SetQueryParam("cmState", joinedCmState...); err != nil {
		return err
	}

	if o.LastContact != nil {

		// query param lastContact
		var qrLastContact bool
		if o.LastContact != nil {
			qrLastContact = *o.LastContact
		}
		qLastContact := swag.FormatBool(qrLastContact)
		if qLastContact != "" {
			if err := r.SetQueryParam("lastContact", qLastContact); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesName := o.Name

	joinedName := swag.JoinByFormat(valuesName, "")
	// query array param name
	if err := r.SetQueryParam("name", joinedName...); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesOnbState := o.OnbState

	joinedOnbState := swag.JoinByFormat(valuesOnbState, "")
	// query array param onbState
	if err := r.SetQueryParam("onbState", joinedOnbState...); err != nil {
		return err
	}

	valuesPid := o.Pid

	joinedPid := swag.JoinByFormat(valuesPid, "")
	// query array param pid
	if err := r.SetQueryParam("pid", joinedPid...); err != nil {
		return err
	}

	valuesProjectID := o.ProjectID

	joinedProjectID := swag.JoinByFormat(valuesProjectID, "")
	// query array param projectId
	if err := r.SetQueryParam("projectId", joinedProjectID...); err != nil {
		return err
	}

	valuesProjectName := o.ProjectName

	joinedProjectName := swag.JoinByFormat(valuesProjectName, "")
	// query array param projectName
	if err := r.SetQueryParam("projectName", joinedProjectName...); err != nil {
		return err
	}

	valuesSerialNumber := o.SerialNumber

	joinedSerialNumber := swag.JoinByFormat(valuesSerialNumber, "")
	// query array param serialNumber
	if err := r.SetQueryParam("serialNumber", joinedSerialNumber...); err != nil {
		return err
	}

	valuesSmartAccountID := o.SmartAccountID

	joinedSmartAccountID := swag.JoinByFormat(valuesSmartAccountID, "")
	// query array param smartAccountId
	if err := r.SetQueryParam("smartAccountId", joinedSmartAccountID...); err != nil {
		return err
	}

	valuesSort := o.Sort

	joinedSort := swag.JoinByFormat(valuesSort, "")
	// query array param sort
	if err := r.SetQueryParam("sort", joinedSort...); err != nil {
		return err
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string
		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {
			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}

	}

	valuesSource := o.Source

	joinedSource := swag.JoinByFormat(valuesSource, "")
	// query array param source
	if err := r.SetQueryParam("source", joinedSource...); err != nil {
		return err
	}

	valuesState := o.State

	joinedState := swag.JoinByFormat(valuesState, "")
	// query array param state
	if err := r.SetQueryParam("state", joinedState...); err != nil {
		return err
	}

	valuesVirtualAccountID := o.VirtualAccountID

	joinedVirtualAccountID := swag.JoinByFormat(valuesVirtualAccountID, "")
	// query array param virtualAccountId
	if err := r.SetQueryParam("virtualAccountId", joinedVirtualAccountID...); err != nil {
		return err
	}

	valuesWorkflowID := o.WorkflowID

	joinedWorkflowID := swag.JoinByFormat(valuesWorkflowID, "")
	// query array param workflowId
	if err := r.SetQueryParam("workflowId", joinedWorkflowID...); err != nil {
		return err
	}

	valuesWorkflowName := o.WorkflowName

	joinedWorkflowName := swag.JoinByFormat(valuesWorkflowName, "")
	// query array param workflowName
	if err := r.SetQueryParam("workflowName", joinedWorkflowName...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
