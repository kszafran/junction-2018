// Code generated by go-swagger; DO NOT EDIT.

package site_profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new site profile API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for site profile API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NFVProvisioningDetail ns f v provisioning detail

Checks the provisioning detail of an ENCS device including log information.
*/
func (a *Client) NFVProvisioningDetail(params *NFVProvisioningDetailParams) (*NFVProvisioningDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNFVProvisioningDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "nFVProvisioningDetail",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/nfv-provision-detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &NFVProvisioningDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*NFVProvisioningDetailOK), nil

}

/*
ProvisionNFV provisions n f v

Design and Provision single/multi NFV device with given site/area/building/floor information.
*/
func (a *Client) ProvisionNFV(params *ProvisionNFVParams) (*ProvisionNFVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProvisionNFVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "provisionNFV",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/provision-nfv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProvisionNFVReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ProvisionNFVOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
