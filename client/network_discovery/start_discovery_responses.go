// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// StartDiscoveryReader is a Reader for the StartDiscovery structure.
type StartDiscoveryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartDiscoveryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStartDiscoveryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewStartDiscoveryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewStartDiscoveryAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewStartDiscoveryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewStartDiscoveryPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewStartDiscoveryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewStartDiscoveryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewStartDiscoveryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewStartDiscoveryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewStartDiscoveryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewStartDiscoveryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewStartDiscoveryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewStartDiscoveryNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewStartDiscoveryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewStartDiscoveryGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStartDiscoveryOK creates a StartDiscoveryOK with default headers values
func NewStartDiscoveryOK() *StartDiscoveryOK {
	return &StartDiscoveryOK{}
}

/*StartDiscoveryOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type StartDiscoveryOK struct {
	Payload *models.TaskIDResult
}

func (o *StartDiscoveryOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryOK  %+v", 200, o.Payload)
}

func (o *StartDiscoveryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartDiscoveryCreated creates a StartDiscoveryCreated with default headers values
func NewStartDiscoveryCreated() *StartDiscoveryCreated {
	return &StartDiscoveryCreated{}
}

/*StartDiscoveryCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type StartDiscoveryCreated struct {
}

func (o *StartDiscoveryCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryCreated ", 201)
}

func (o *StartDiscoveryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryAccepted creates a StartDiscoveryAccepted with default headers values
func NewStartDiscoveryAccepted() *StartDiscoveryAccepted {
	return &StartDiscoveryAccepted{}
}

/*StartDiscoveryAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type StartDiscoveryAccepted struct {
}

func (o *StartDiscoveryAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryAccepted ", 202)
}

func (o *StartDiscoveryAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryNoContent creates a StartDiscoveryNoContent with default headers values
func NewStartDiscoveryNoContent() *StartDiscoveryNoContent {
	return &StartDiscoveryNoContent{}
}

/*StartDiscoveryNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type StartDiscoveryNoContent struct {
}

func (o *StartDiscoveryNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryNoContent ", 204)
}

func (o *StartDiscoveryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryPartialContent creates a StartDiscoveryPartialContent with default headers values
func NewStartDiscoveryPartialContent() *StartDiscoveryPartialContent {
	return &StartDiscoveryPartialContent{}
}

/*StartDiscoveryPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type StartDiscoveryPartialContent struct {
}

func (o *StartDiscoveryPartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryPartialContent ", 206)
}

func (o *StartDiscoveryPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryBadRequest creates a StartDiscoveryBadRequest with default headers values
func NewStartDiscoveryBadRequest() *StartDiscoveryBadRequest {
	return &StartDiscoveryBadRequest{}
}

/*StartDiscoveryBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type StartDiscoveryBadRequest struct {
}

func (o *StartDiscoveryBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryBadRequest ", 400)
}

func (o *StartDiscoveryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryUnauthorized creates a StartDiscoveryUnauthorized with default headers values
func NewStartDiscoveryUnauthorized() *StartDiscoveryUnauthorized {
	return &StartDiscoveryUnauthorized{}
}

/*StartDiscoveryUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type StartDiscoveryUnauthorized struct {
}

func (o *StartDiscoveryUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryUnauthorized ", 401)
}

func (o *StartDiscoveryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryForbidden creates a StartDiscoveryForbidden with default headers values
func NewStartDiscoveryForbidden() *StartDiscoveryForbidden {
	return &StartDiscoveryForbidden{}
}

/*StartDiscoveryForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type StartDiscoveryForbidden struct {
}

func (o *StartDiscoveryForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryForbidden ", 403)
}

func (o *StartDiscoveryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryNotFound creates a StartDiscoveryNotFound with default headers values
func NewStartDiscoveryNotFound() *StartDiscoveryNotFound {
	return &StartDiscoveryNotFound{}
}

/*StartDiscoveryNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type StartDiscoveryNotFound struct {
}

func (o *StartDiscoveryNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryNotFound ", 404)
}

func (o *StartDiscoveryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryConflict creates a StartDiscoveryConflict with default headers values
func NewStartDiscoveryConflict() *StartDiscoveryConflict {
	return &StartDiscoveryConflict{}
}

/*StartDiscoveryConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type StartDiscoveryConflict struct {
}

func (o *StartDiscoveryConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryConflict ", 409)
}

func (o *StartDiscoveryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryUnsupportedMediaType creates a StartDiscoveryUnsupportedMediaType with default headers values
func NewStartDiscoveryUnsupportedMediaType() *StartDiscoveryUnsupportedMediaType {
	return &StartDiscoveryUnsupportedMediaType{}
}

/*StartDiscoveryUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type StartDiscoveryUnsupportedMediaType struct {
}

func (o *StartDiscoveryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryUnsupportedMediaType ", 415)
}

func (o *StartDiscoveryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryInternalServerError creates a StartDiscoveryInternalServerError with default headers values
func NewStartDiscoveryInternalServerError() *StartDiscoveryInternalServerError {
	return &StartDiscoveryInternalServerError{}
}

/*StartDiscoveryInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type StartDiscoveryInternalServerError struct {
}

func (o *StartDiscoveryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryInternalServerError ", 500)
}

func (o *StartDiscoveryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryNotImplemented creates a StartDiscoveryNotImplemented with default headers values
func NewStartDiscoveryNotImplemented() *StartDiscoveryNotImplemented {
	return &StartDiscoveryNotImplemented{}
}

/*StartDiscoveryNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type StartDiscoveryNotImplemented struct {
}

func (o *StartDiscoveryNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryNotImplemented ", 501)
}

func (o *StartDiscoveryNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryServiceUnavailable creates a StartDiscoveryServiceUnavailable with default headers values
func NewStartDiscoveryServiceUnavailable() *StartDiscoveryServiceUnavailable {
	return &StartDiscoveryServiceUnavailable{}
}

/*StartDiscoveryServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type StartDiscoveryServiceUnavailable struct {
}

func (o *StartDiscoveryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryServiceUnavailable ", 503)
}

func (o *StartDiscoveryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartDiscoveryGatewayTimeout creates a StartDiscoveryGatewayTimeout with default headers values
func NewStartDiscoveryGatewayTimeout() *StartDiscoveryGatewayTimeout {
	return &StartDiscoveryGatewayTimeout{}
}

/*StartDiscoveryGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type StartDiscoveryGatewayTimeout struct {
}

func (o *StartDiscoveryGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/discovery][%d] startDiscoveryGatewayTimeout ", 504)
}

func (o *StartDiscoveryGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
