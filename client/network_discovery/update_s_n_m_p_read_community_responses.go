// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateSNMPReadCommunityReader is a Reader for the UpdateSNMPReadCommunity structure.
type UpdateSNMPReadCommunityReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSNMPReadCommunityReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateSNMPReadCommunityOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateSNMPReadCommunityCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateSNMPReadCommunityAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateSNMPReadCommunityNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateSNMPReadCommunityPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateSNMPReadCommunityBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateSNMPReadCommunityUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateSNMPReadCommunityForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateSNMPReadCommunityNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateSNMPReadCommunityConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateSNMPReadCommunityUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateSNMPReadCommunityInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateSNMPReadCommunityNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateSNMPReadCommunityServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateSNMPReadCommunityGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSNMPReadCommunityOK creates a UpdateSNMPReadCommunityOK with default headers values
func NewUpdateSNMPReadCommunityOK() *UpdateSNMPReadCommunityOK {
	return &UpdateSNMPReadCommunityOK{}
}

/*UpdateSNMPReadCommunityOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateSNMPReadCommunityOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdateSNMPReadCommunityOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityOK  %+v", 200, o.Payload)
}

func (o *UpdateSNMPReadCommunityOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSNMPReadCommunityCreated creates a UpdateSNMPReadCommunityCreated with default headers values
func NewUpdateSNMPReadCommunityCreated() *UpdateSNMPReadCommunityCreated {
	return &UpdateSNMPReadCommunityCreated{}
}

/*UpdateSNMPReadCommunityCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateSNMPReadCommunityCreated struct {
}

func (o *UpdateSNMPReadCommunityCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityCreated ", 201)
}

func (o *UpdateSNMPReadCommunityCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityAccepted creates a UpdateSNMPReadCommunityAccepted with default headers values
func NewUpdateSNMPReadCommunityAccepted() *UpdateSNMPReadCommunityAccepted {
	return &UpdateSNMPReadCommunityAccepted{}
}

/*UpdateSNMPReadCommunityAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateSNMPReadCommunityAccepted struct {
}

func (o *UpdateSNMPReadCommunityAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityAccepted ", 202)
}

func (o *UpdateSNMPReadCommunityAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityNoContent creates a UpdateSNMPReadCommunityNoContent with default headers values
func NewUpdateSNMPReadCommunityNoContent() *UpdateSNMPReadCommunityNoContent {
	return &UpdateSNMPReadCommunityNoContent{}
}

/*UpdateSNMPReadCommunityNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateSNMPReadCommunityNoContent struct {
}

func (o *UpdateSNMPReadCommunityNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityNoContent ", 204)
}

func (o *UpdateSNMPReadCommunityNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityPartialContent creates a UpdateSNMPReadCommunityPartialContent with default headers values
func NewUpdateSNMPReadCommunityPartialContent() *UpdateSNMPReadCommunityPartialContent {
	return &UpdateSNMPReadCommunityPartialContent{}
}

/*UpdateSNMPReadCommunityPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateSNMPReadCommunityPartialContent struct {
}

func (o *UpdateSNMPReadCommunityPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityPartialContent ", 206)
}

func (o *UpdateSNMPReadCommunityPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityBadRequest creates a UpdateSNMPReadCommunityBadRequest with default headers values
func NewUpdateSNMPReadCommunityBadRequest() *UpdateSNMPReadCommunityBadRequest {
	return &UpdateSNMPReadCommunityBadRequest{}
}

/*UpdateSNMPReadCommunityBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateSNMPReadCommunityBadRequest struct {
}

func (o *UpdateSNMPReadCommunityBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityBadRequest ", 400)
}

func (o *UpdateSNMPReadCommunityBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityUnauthorized creates a UpdateSNMPReadCommunityUnauthorized with default headers values
func NewUpdateSNMPReadCommunityUnauthorized() *UpdateSNMPReadCommunityUnauthorized {
	return &UpdateSNMPReadCommunityUnauthorized{}
}

/*UpdateSNMPReadCommunityUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateSNMPReadCommunityUnauthorized struct {
}

func (o *UpdateSNMPReadCommunityUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityUnauthorized ", 401)
}

func (o *UpdateSNMPReadCommunityUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityForbidden creates a UpdateSNMPReadCommunityForbidden with default headers values
func NewUpdateSNMPReadCommunityForbidden() *UpdateSNMPReadCommunityForbidden {
	return &UpdateSNMPReadCommunityForbidden{}
}

/*UpdateSNMPReadCommunityForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateSNMPReadCommunityForbidden struct {
}

func (o *UpdateSNMPReadCommunityForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityForbidden ", 403)
}

func (o *UpdateSNMPReadCommunityForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityNotFound creates a UpdateSNMPReadCommunityNotFound with default headers values
func NewUpdateSNMPReadCommunityNotFound() *UpdateSNMPReadCommunityNotFound {
	return &UpdateSNMPReadCommunityNotFound{}
}

/*UpdateSNMPReadCommunityNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateSNMPReadCommunityNotFound struct {
}

func (o *UpdateSNMPReadCommunityNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityNotFound ", 404)
}

func (o *UpdateSNMPReadCommunityNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityConflict creates a UpdateSNMPReadCommunityConflict with default headers values
func NewUpdateSNMPReadCommunityConflict() *UpdateSNMPReadCommunityConflict {
	return &UpdateSNMPReadCommunityConflict{}
}

/*UpdateSNMPReadCommunityConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateSNMPReadCommunityConflict struct {
}

func (o *UpdateSNMPReadCommunityConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityConflict ", 409)
}

func (o *UpdateSNMPReadCommunityConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityUnsupportedMediaType creates a UpdateSNMPReadCommunityUnsupportedMediaType with default headers values
func NewUpdateSNMPReadCommunityUnsupportedMediaType() *UpdateSNMPReadCommunityUnsupportedMediaType {
	return &UpdateSNMPReadCommunityUnsupportedMediaType{}
}

/*UpdateSNMPReadCommunityUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateSNMPReadCommunityUnsupportedMediaType struct {
}

func (o *UpdateSNMPReadCommunityUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityUnsupportedMediaType ", 415)
}

func (o *UpdateSNMPReadCommunityUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityInternalServerError creates a UpdateSNMPReadCommunityInternalServerError with default headers values
func NewUpdateSNMPReadCommunityInternalServerError() *UpdateSNMPReadCommunityInternalServerError {
	return &UpdateSNMPReadCommunityInternalServerError{}
}

/*UpdateSNMPReadCommunityInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateSNMPReadCommunityInternalServerError struct {
}

func (o *UpdateSNMPReadCommunityInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityInternalServerError ", 500)
}

func (o *UpdateSNMPReadCommunityInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityNotImplemented creates a UpdateSNMPReadCommunityNotImplemented with default headers values
func NewUpdateSNMPReadCommunityNotImplemented() *UpdateSNMPReadCommunityNotImplemented {
	return &UpdateSNMPReadCommunityNotImplemented{}
}

/*UpdateSNMPReadCommunityNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateSNMPReadCommunityNotImplemented struct {
}

func (o *UpdateSNMPReadCommunityNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityNotImplemented ", 501)
}

func (o *UpdateSNMPReadCommunityNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityServiceUnavailable creates a UpdateSNMPReadCommunityServiceUnavailable with default headers values
func NewUpdateSNMPReadCommunityServiceUnavailable() *UpdateSNMPReadCommunityServiceUnavailable {
	return &UpdateSNMPReadCommunityServiceUnavailable{}
}

/*UpdateSNMPReadCommunityServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateSNMPReadCommunityServiceUnavailable struct {
}

func (o *UpdateSNMPReadCommunityServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityServiceUnavailable ", 503)
}

func (o *UpdateSNMPReadCommunityServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSNMPReadCommunityGatewayTimeout creates a UpdateSNMPReadCommunityGatewayTimeout with default headers values
func NewUpdateSNMPReadCommunityGatewayTimeout() *UpdateSNMPReadCommunityGatewayTimeout {
	return &UpdateSNMPReadCommunityGatewayTimeout{}
}

/*UpdateSNMPReadCommunityGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateSNMPReadCommunityGatewayTimeout struct {
}

func (o *UpdateSNMPReadCommunityGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/snmpv2-read-community][%d] updateSNMPReadCommunityGatewayTimeout ", 504)
}

func (o *UpdateSNMPReadCommunityGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
