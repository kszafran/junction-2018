// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetGlobalCredentialsParams creates a new GetGlobalCredentialsParams object
// with the default values initialized.
func NewGetGlobalCredentialsParams() *GetGlobalCredentialsParams {
	var ()
	return &GetGlobalCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGlobalCredentialsParamsWithTimeout creates a new GetGlobalCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGlobalCredentialsParamsWithTimeout(timeout time.Duration) *GetGlobalCredentialsParams {
	var ()
	return &GetGlobalCredentialsParams{

		timeout: timeout,
	}
}

// NewGetGlobalCredentialsParamsWithContext creates a new GetGlobalCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGlobalCredentialsParamsWithContext(ctx context.Context) *GetGlobalCredentialsParams {
	var ()
	return &GetGlobalCredentialsParams{

		Context: ctx,
	}
}

// NewGetGlobalCredentialsParamsWithHTTPClient creates a new GetGlobalCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGlobalCredentialsParamsWithHTTPClient(client *http.Client) *GetGlobalCredentialsParams {
	var ()
	return &GetGlobalCredentialsParams{
		HTTPClient: client,
	}
}

/*GetGlobalCredentialsParams contains all the parameters to send to the API endpoint
for the get global credentials operation typically these are written to a http.Request
*/
type GetGlobalCredentialsParams struct {

	/*CredentialSubType
	  Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF

	*/
	CredentialSubType *string
	/*Order
	  order

	*/
	Order *string
	/*SortBy
	  sortBy

	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get global credentials params
func (o *GetGlobalCredentialsParams) WithTimeout(timeout time.Duration) *GetGlobalCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get global credentials params
func (o *GetGlobalCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get global credentials params
func (o *GetGlobalCredentialsParams) WithContext(ctx context.Context) *GetGlobalCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get global credentials params
func (o *GetGlobalCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get global credentials params
func (o *GetGlobalCredentialsParams) WithHTTPClient(client *http.Client) *GetGlobalCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get global credentials params
func (o *GetGlobalCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialSubType adds the credentialSubType to the get global credentials params
func (o *GetGlobalCredentialsParams) WithCredentialSubType(credentialSubType *string) *GetGlobalCredentialsParams {
	o.SetCredentialSubType(credentialSubType)
	return o
}

// SetCredentialSubType adds the credentialSubType to the get global credentials params
func (o *GetGlobalCredentialsParams) SetCredentialSubType(credentialSubType *string) {
	o.CredentialSubType = credentialSubType
}

// WithOrder adds the order to the get global credentials params
func (o *GetGlobalCredentialsParams) WithOrder(order *string) *GetGlobalCredentialsParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get global credentials params
func (o *GetGlobalCredentialsParams) SetOrder(order *string) {
	o.Order = order
}

// WithSortBy adds the sortBy to the get global credentials params
func (o *GetGlobalCredentialsParams) WithSortBy(sortBy *string) *GetGlobalCredentialsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get global credentials params
func (o *GetGlobalCredentialsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetGlobalCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CredentialSubType != nil {

		// query param credentialSubType
		var qrCredentialSubType string
		if o.CredentialSubType != nil {
			qrCredentialSubType = *o.CredentialSubType
		}
		qCredentialSubType := qrCredentialSubType
		if qCredentialSubType != "" {
			if err := r.SetQueryParam("credentialSubType", qCredentialSubType); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
