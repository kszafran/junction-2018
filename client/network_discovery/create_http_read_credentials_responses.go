// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// CreateHTTPReadCredentialsReader is a Reader for the CreateHTTPReadCredentials structure.
type CreateHTTPReadCredentialsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateHTTPReadCredentialsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateHTTPReadCredentialsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewCreateHTTPReadCredentialsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewCreateHTTPReadCredentialsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewCreateHTTPReadCredentialsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewCreateHTTPReadCredentialsPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateHTTPReadCredentialsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateHTTPReadCredentialsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateHTTPReadCredentialsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateHTTPReadCredentialsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateHTTPReadCredentialsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewCreateHTTPReadCredentialsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateHTTPReadCredentialsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewCreateHTTPReadCredentialsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewCreateHTTPReadCredentialsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewCreateHTTPReadCredentialsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateHTTPReadCredentialsOK creates a CreateHTTPReadCredentialsOK with default headers values
func NewCreateHTTPReadCredentialsOK() *CreateHTTPReadCredentialsOK {
	return &CreateHTTPReadCredentialsOK{}
}

/*CreateHTTPReadCredentialsOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type CreateHTTPReadCredentialsOK struct {
	Payload *models.TaskIDResult
}

func (o *CreateHTTPReadCredentialsOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsOK  %+v", 200, o.Payload)
}

func (o *CreateHTTPReadCredentialsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateHTTPReadCredentialsCreated creates a CreateHTTPReadCredentialsCreated with default headers values
func NewCreateHTTPReadCredentialsCreated() *CreateHTTPReadCredentialsCreated {
	return &CreateHTTPReadCredentialsCreated{}
}

/*CreateHTTPReadCredentialsCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type CreateHTTPReadCredentialsCreated struct {
}

func (o *CreateHTTPReadCredentialsCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsCreated ", 201)
}

func (o *CreateHTTPReadCredentialsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsAccepted creates a CreateHTTPReadCredentialsAccepted with default headers values
func NewCreateHTTPReadCredentialsAccepted() *CreateHTTPReadCredentialsAccepted {
	return &CreateHTTPReadCredentialsAccepted{}
}

/*CreateHTTPReadCredentialsAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type CreateHTTPReadCredentialsAccepted struct {
}

func (o *CreateHTTPReadCredentialsAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsAccepted ", 202)
}

func (o *CreateHTTPReadCredentialsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsNoContent creates a CreateHTTPReadCredentialsNoContent with default headers values
func NewCreateHTTPReadCredentialsNoContent() *CreateHTTPReadCredentialsNoContent {
	return &CreateHTTPReadCredentialsNoContent{}
}

/*CreateHTTPReadCredentialsNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type CreateHTTPReadCredentialsNoContent struct {
}

func (o *CreateHTTPReadCredentialsNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsNoContent ", 204)
}

func (o *CreateHTTPReadCredentialsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsPartialContent creates a CreateHTTPReadCredentialsPartialContent with default headers values
func NewCreateHTTPReadCredentialsPartialContent() *CreateHTTPReadCredentialsPartialContent {
	return &CreateHTTPReadCredentialsPartialContent{}
}

/*CreateHTTPReadCredentialsPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type CreateHTTPReadCredentialsPartialContent struct {
}

func (o *CreateHTTPReadCredentialsPartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsPartialContent ", 206)
}

func (o *CreateHTTPReadCredentialsPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsBadRequest creates a CreateHTTPReadCredentialsBadRequest with default headers values
func NewCreateHTTPReadCredentialsBadRequest() *CreateHTTPReadCredentialsBadRequest {
	return &CreateHTTPReadCredentialsBadRequest{}
}

/*CreateHTTPReadCredentialsBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type CreateHTTPReadCredentialsBadRequest struct {
}

func (o *CreateHTTPReadCredentialsBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsBadRequest ", 400)
}

func (o *CreateHTTPReadCredentialsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsUnauthorized creates a CreateHTTPReadCredentialsUnauthorized with default headers values
func NewCreateHTTPReadCredentialsUnauthorized() *CreateHTTPReadCredentialsUnauthorized {
	return &CreateHTTPReadCredentialsUnauthorized{}
}

/*CreateHTTPReadCredentialsUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type CreateHTTPReadCredentialsUnauthorized struct {
}

func (o *CreateHTTPReadCredentialsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsUnauthorized ", 401)
}

func (o *CreateHTTPReadCredentialsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsForbidden creates a CreateHTTPReadCredentialsForbidden with default headers values
func NewCreateHTTPReadCredentialsForbidden() *CreateHTTPReadCredentialsForbidden {
	return &CreateHTTPReadCredentialsForbidden{}
}

/*CreateHTTPReadCredentialsForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type CreateHTTPReadCredentialsForbidden struct {
}

func (o *CreateHTTPReadCredentialsForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsForbidden ", 403)
}

func (o *CreateHTTPReadCredentialsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsNotFound creates a CreateHTTPReadCredentialsNotFound with default headers values
func NewCreateHTTPReadCredentialsNotFound() *CreateHTTPReadCredentialsNotFound {
	return &CreateHTTPReadCredentialsNotFound{}
}

/*CreateHTTPReadCredentialsNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type CreateHTTPReadCredentialsNotFound struct {
}

func (o *CreateHTTPReadCredentialsNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsNotFound ", 404)
}

func (o *CreateHTTPReadCredentialsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsConflict creates a CreateHTTPReadCredentialsConflict with default headers values
func NewCreateHTTPReadCredentialsConflict() *CreateHTTPReadCredentialsConflict {
	return &CreateHTTPReadCredentialsConflict{}
}

/*CreateHTTPReadCredentialsConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type CreateHTTPReadCredentialsConflict struct {
}

func (o *CreateHTTPReadCredentialsConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsConflict ", 409)
}

func (o *CreateHTTPReadCredentialsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsUnsupportedMediaType creates a CreateHTTPReadCredentialsUnsupportedMediaType with default headers values
func NewCreateHTTPReadCredentialsUnsupportedMediaType() *CreateHTTPReadCredentialsUnsupportedMediaType {
	return &CreateHTTPReadCredentialsUnsupportedMediaType{}
}

/*CreateHTTPReadCredentialsUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type CreateHTTPReadCredentialsUnsupportedMediaType struct {
}

func (o *CreateHTTPReadCredentialsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsUnsupportedMediaType ", 415)
}

func (o *CreateHTTPReadCredentialsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsInternalServerError creates a CreateHTTPReadCredentialsInternalServerError with default headers values
func NewCreateHTTPReadCredentialsInternalServerError() *CreateHTTPReadCredentialsInternalServerError {
	return &CreateHTTPReadCredentialsInternalServerError{}
}

/*CreateHTTPReadCredentialsInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type CreateHTTPReadCredentialsInternalServerError struct {
}

func (o *CreateHTTPReadCredentialsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsInternalServerError ", 500)
}

func (o *CreateHTTPReadCredentialsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsNotImplemented creates a CreateHTTPReadCredentialsNotImplemented with default headers values
func NewCreateHTTPReadCredentialsNotImplemented() *CreateHTTPReadCredentialsNotImplemented {
	return &CreateHTTPReadCredentialsNotImplemented{}
}

/*CreateHTTPReadCredentialsNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type CreateHTTPReadCredentialsNotImplemented struct {
}

func (o *CreateHTTPReadCredentialsNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsNotImplemented ", 501)
}

func (o *CreateHTTPReadCredentialsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsServiceUnavailable creates a CreateHTTPReadCredentialsServiceUnavailable with default headers values
func NewCreateHTTPReadCredentialsServiceUnavailable() *CreateHTTPReadCredentialsServiceUnavailable {
	return &CreateHTTPReadCredentialsServiceUnavailable{}
}

/*CreateHTTPReadCredentialsServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type CreateHTTPReadCredentialsServiceUnavailable struct {
}

func (o *CreateHTTPReadCredentialsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsServiceUnavailable ", 503)
}

func (o *CreateHTTPReadCredentialsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateHTTPReadCredentialsGatewayTimeout creates a CreateHTTPReadCredentialsGatewayTimeout with default headers values
func NewCreateHTTPReadCredentialsGatewayTimeout() *CreateHTTPReadCredentialsGatewayTimeout {
	return &CreateHTTPReadCredentialsGatewayTimeout{}
}

/*CreateHTTPReadCredentialsGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type CreateHTTPReadCredentialsGatewayTimeout struct {
}

func (o *CreateHTTPReadCredentialsGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/global-credential/http-read][%d] createHttpReadCredentialsGatewayTimeout ", 504)
}

func (o *CreateHTTPReadCredentialsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
