// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network discovery API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network discovery API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateUpdateSNMPProperties creates update s n m p properties

Adds SNMP properties
*/
func (a *Client) CreateUpdateSNMPProperties(params *CreateUpdateSNMPPropertiesParams) (*CreateUpdateSNMPPropertiesOK, *CreateUpdateSNMPPropertiesCreated, *CreateUpdateSNMPPropertiesAccepted, *CreateUpdateSNMPPropertiesNoContent, *CreateUpdateSNMPPropertiesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUpdateSNMPPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "create/UpdateSNMPProperties",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/snmp-property",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUpdateSNMPPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateUpdateSNMPPropertiesOK:
		return value, nil, nil, nil, nil, nil
	case *CreateUpdateSNMPPropertiesCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateUpdateSNMPPropertiesAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateUpdateSNMPPropertiesNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateUpdateSNMPPropertiesPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateCLICredentials creates c l i credentials

Adds global CLI credential
*/
func (a *Client) CreateCLICredentials(params *CreateCLICredentialsParams) (*CreateCLICredentialsOK, *CreateCLICredentialsCreated, *CreateCLICredentialsAccepted, *CreateCLICredentialsNoContent, *CreateCLICredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCLICredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCLICredentials",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/cli",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCLICredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCLICredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *CreateCLICredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateCLICredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateCLICredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateCLICredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateHTTPReadCredentials creates HTTP read credentials

Adds HTTP read credentials
*/
func (a *Client) CreateHTTPReadCredentials(params *CreateHTTPReadCredentialsParams) (*CreateHTTPReadCredentialsOK, *CreateHTTPReadCredentialsCreated, *CreateHTTPReadCredentialsAccepted, *CreateHTTPReadCredentialsNoContent, *CreateHTTPReadCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPReadCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHTTPReadCredentials",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/http-read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHTTPReadCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHTTPReadCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *CreateHTTPReadCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateHTTPReadCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateHTTPReadCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateHTTPReadCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateHTTPWriteCredentials creates HTTP write credentials

Adds global HTTP write credentials
*/
func (a *Client) CreateHTTPWriteCredentials(params *CreateHTTPWriteCredentialsParams) (*CreateHTTPWriteCredentialsOK, *CreateHTTPWriteCredentialsCreated, *CreateHTTPWriteCredentialsAccepted, *CreateHTTPWriteCredentialsNoContent, *CreateHTTPWriteCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPWriteCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHTTPWriteCredentials",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/http-write",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHTTPWriteCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHTTPWriteCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *CreateHTTPWriteCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateHTTPWriteCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateHTTPWriteCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateHTTPWriteCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateNetconfCredentials creates netconf credentials

Adds global netconf credentials
*/
func (a *Client) CreateNetconfCredentials(params *CreateNetconfCredentialsParams) (*CreateNetconfCredentialsOK, *CreateNetconfCredentialsCreated, *CreateNetconfCredentialsAccepted, *CreateNetconfCredentialsNoContent, *CreateNetconfCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetconfCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetconfCredentials",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/netconf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNetconfCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNetconfCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *CreateNetconfCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateNetconfCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateNetconfCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateNetconfCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateSNMPReadCommunity creates s n m p read community

Adds global SNMP read community
*/
func (a *Client) CreateSNMPReadCommunity(params *CreateSNMPReadCommunityParams) (*CreateSNMPReadCommunityOK, *CreateSNMPReadCommunityCreated, *CreateSNMPReadCommunityAccepted, *CreateSNMPReadCommunityNoContent, *CreateSNMPReadCommunityPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSNMPReadCommunityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSNMPReadCommunity",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv2-read-community",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSNMPReadCommunityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSNMPReadCommunityOK:
		return value, nil, nil, nil, nil, nil
	case *CreateSNMPReadCommunityCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateSNMPReadCommunityAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateSNMPReadCommunityNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateSNMPReadCommunityPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateSNMPWriteCommunity creates s n m p write community

Adds global SNMP write community
*/
func (a *Client) CreateSNMPWriteCommunity(params *CreateSNMPWriteCommunityParams) (*CreateSNMPWriteCommunityOK, *CreateSNMPWriteCommunityCreated, *CreateSNMPWriteCommunityAccepted, *CreateSNMPWriteCommunityNoContent, *CreateSNMPWriteCommunityPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSNMPWriteCommunityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSNMPWriteCommunity",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv2-write-community",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSNMPWriteCommunityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSNMPWriteCommunityOK:
		return value, nil, nil, nil, nil, nil
	case *CreateSNMPWriteCommunityCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateSNMPWriteCommunityAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateSNMPWriteCommunityNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateSNMPWriteCommunityPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateSNMPv3Credentials creates s n m pv3 credentials

Adds global SNMPv3 credentials
*/
func (a *Client) CreateSNMPv3Credentials(params *CreateSNMPv3CredentialsParams) (*CreateSNMPv3CredentialsOK, *CreateSNMPv3CredentialsCreated, *CreateSNMPv3CredentialsAccepted, *CreateSNMPv3CredentialsNoContent, *CreateSNMPv3CredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSNMPv3CredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSNMPv3Credentials",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSNMPv3CredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateSNMPv3CredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *CreateSNMPv3CredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateSNMPv3CredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateSNMPv3CredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateSNMPv3CredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
DeleteAllDiscovery deletes all discovery

Stops all the discoveries and removes them
*/
func (a *Client) DeleteAllDiscovery(params *DeleteAllDiscoveryParams) (*DeleteAllDiscoveryOK, *DeleteAllDiscoveryNoContent, *DeleteAllDiscoveryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllDiscoveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllDiscovery",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/discovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAllDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAllDiscoveryOK:
		return value, nil, nil, nil
	case *DeleteAllDiscoveryNoContent:
		return nil, value, nil, nil
	case *DeleteAllDiscoveryPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteDiscoveryByID deletes discovery by Id

Stops the discovery for the given ID and removes it
*/
func (a *Client) DeleteDiscoveryByID(params *DeleteDiscoveryByIDParams) (*DeleteDiscoveryByIDOK, *DeleteDiscoveryByIDNoContent, *DeleteDiscoveryByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscoveryByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDiscoveryById",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDiscoveryByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDiscoveryByIDOK:
		return value, nil, nil, nil
	case *DeleteDiscoveryByIDNoContent:
		return nil, value, nil, nil
	case *DeleteDiscoveryByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteDiscoveryBySpecifiedRange deletes discovery by specified range

Stops discovery for the given range and removes them
*/
func (a *Client) DeleteDiscoveryBySpecifiedRange(params *DeleteDiscoveryBySpecifiedRangeParams) (*DeleteDiscoveryBySpecifiedRangeOK, *DeleteDiscoveryBySpecifiedRangeNoContent, *DeleteDiscoveryBySpecifiedRangePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDiscoveryBySpecifiedRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDiscoveryBySpecifiedRange",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/discovery/{startIndex}/{recordsToDelete}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDiscoveryBySpecifiedRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDiscoveryBySpecifiedRangeOK:
		return value, nil, nil, nil
	case *DeleteDiscoveryBySpecifiedRangeNoContent:
		return nil, value, nil, nil
	case *DeleteDiscoveryBySpecifiedRangePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteGlobalCredentialsByID deletes global credentials by Id

Deletes global credential for the given ID
*/
func (a *Client) DeleteGlobalCredentialsByID(params *DeleteGlobalCredentialsByIDParams) (*DeleteGlobalCredentialsByIDOK, *DeleteGlobalCredentialsByIDNoContent, *DeleteGlobalCredentialsByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGlobalCredentialsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGlobalCredentialsById",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/global-credential/{globalCredentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGlobalCredentialsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGlobalCredentialsByIDOK:
		return value, nil, nil, nil
	case *DeleteGlobalCredentialsByIDNoContent:
		return nil, value, nil, nil
	case *DeleteGlobalCredentialsByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetCountOfAllDiscoveryJobs gets count of all discovery jobs

Returns the count of all available discovery jobs
*/
func (a *Client) GetCountOfAllDiscoveryJobs(params *GetCountOfAllDiscoveryJobsParams) (*GetCountOfAllDiscoveryJobsOK, *GetCountOfAllDiscoveryJobsNoContent, *GetCountOfAllDiscoveryJobsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCountOfAllDiscoveryJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCountOfAllDiscoveryJobs",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCountOfAllDiscoveryJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetCountOfAllDiscoveryJobsOK:
		return value, nil, nil, nil
	case *GetCountOfAllDiscoveryJobsNoContent:
		return nil, value, nil, nil
	case *GetCountOfAllDiscoveryJobsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetCredentialSubTypeByCredentialID gets credential sub type by credential Id

Returns the credential sub type for the given Id
*/
func (a *Client) GetCredentialSubTypeByCredentialID(params *GetCredentialSubTypeByCredentialIDParams) (*GetCredentialSubTypeByCredentialIDOK, *GetCredentialSubTypeByCredentialIDNoContent, *GetCredentialSubTypeByCredentialIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialSubTypeByCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCredentialSubTypeByCredentialId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/global-credential/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCredentialSubTypeByCredentialIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetCredentialSubTypeByCredentialIDOK:
		return value, nil, nil, nil
	case *GetCredentialSubTypeByCredentialIDNoContent:
		return nil, value, nil, nil
	case *GetCredentialSubTypeByCredentialIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDevicesDiscoveredByID gets devices discovered by Id

Returns the count of network devices discovered in the given discovery
*/
func (a *Client) GetDevicesDiscoveredByID(params *GetDevicesDiscoveredByIDParams) (*GetDevicesDiscoveredByIDOK, *GetDevicesDiscoveredByIDNoContent, *GetDevicesDiscoveredByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesDiscoveredByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesDiscoveredById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}/network-device/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDevicesDiscoveredByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDevicesDiscoveredByIDOK:
		return value, nil, nil, nil
	case *GetDevicesDiscoveredByIDNoContent:
		return nil, value, nil, nil
	case *GetDevicesDiscoveredByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDiscoveredDevicesByRange gets discovered devices by range

Returns the network devices discovered for the given discovery and for the given range. The maximum number of records that can be retrieved is 500
*/
func (a *Client) GetDiscoveredDevicesByRange(params *GetDiscoveredDevicesByRangeParams) (*GetDiscoveredDevicesByRangeOK, *GetDiscoveredDevicesByRangeNoContent, *GetDiscoveredDevicesByRangePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveredDevicesByRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveredDevicesByRange",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}/network-device/{startIndex}/{recordsToReturn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveredDevicesByRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDiscoveredDevicesByRangeOK:
		return value, nil, nil, nil
	case *GetDiscoveredDevicesByRangeNoContent:
		return nil, value, nil, nil
	case *GetDiscoveredDevicesByRangePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDiscoveredNetworkDevicesByDiscoveryID gets discovered network devices by discovery Id

Returns the network devices discovered for the given discovery ID
*/
func (a *Client) GetDiscoveredNetworkDevicesByDiscoveryID(params *GetDiscoveredNetworkDevicesByDiscoveryIDParams) (*GetDiscoveredNetworkDevicesByDiscoveryIDOK, *GetDiscoveredNetworkDevicesByDiscoveryIDNoContent, *GetDiscoveredNetworkDevicesByDiscoveryIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveredNetworkDevicesByDiscoveryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveredNetworkDevicesByDiscoveryId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}/network-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveredNetworkDevicesByDiscoveryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDiscoveredNetworkDevicesByDiscoveryIDOK:
		return value, nil, nil, nil
	case *GetDiscoveredNetworkDevicesByDiscoveryIDNoContent:
		return nil, value, nil, nil
	case *GetDiscoveredNetworkDevicesByDiscoveryIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDiscoveriesByRange gets discoveries by range

Returns the discovery by specified range
*/
func (a *Client) GetDiscoveriesByRange(params *GetDiscoveriesByRangeParams) (*GetDiscoveriesByRangeOK, *GetDiscoveriesByRangeNoContent, *GetDiscoveriesByRangePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveriesByRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveriesByRange",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{startIndex}/{recordsToReturn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveriesByRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDiscoveriesByRangeOK:
		return value, nil, nil, nil
	case *GetDiscoveriesByRangeNoContent:
		return nil, value, nil, nil
	case *GetDiscoveriesByRangePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDiscoveryByID gets discovery by Id

Returns discovery by ID
*/
func (a *Client) GetDiscoveryByID(params *GetDiscoveryByIDParams) (*GetDiscoveryByIDOK, *GetDiscoveryByIDNoContent, *GetDiscoveryByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveryByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveryById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveryByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDiscoveryByIDOK:
		return value, nil, nil, nil
	case *GetDiscoveryByIDNoContent:
		return nil, value, nil, nil
	case *GetDiscoveryByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDiscoveryJobsByIP gets discovery jobs by IP

Returns the list of discovery jobs for the given IP
*/
func (a *Client) GetDiscoveryJobsByIP(params *GetDiscoveryJobsByIPParams) (*GetDiscoveryJobsByIPOK, *GetDiscoveryJobsByIPNoContent, *GetDiscoveryJobsByIPPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoveryJobsByIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDiscoveryJobsByIP",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDiscoveryJobsByIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDiscoveryJobsByIPOK:
		return value, nil, nil, nil
	case *GetDiscoveryJobsByIPNoContent:
		return nil, value, nil, nil
	case *GetDiscoveryJobsByIPPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetGlobalCredentials gets global credentials

Returns global credential for the given credential sub type
*/
func (a *Client) GetGlobalCredentials(params *GetGlobalCredentialsParams) (*GetGlobalCredentialsOK, *GetGlobalCredentialsNoContent, *GetGlobalCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGlobalCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGlobalCredentials",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/global-credential",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGlobalCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetGlobalCredentialsOK:
		return value, nil, nil, nil
	case *GetGlobalCredentialsNoContent:
		return nil, value, nil, nil
	case *GetGlobalCredentialsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetListOfDiscoveriesByDiscoveryID gets list of discoveries by discovery Id

Returns the list of discovery jobs for the given id. The results can be optionally filtered based on IP
*/
func (a *Client) GetListOfDiscoveriesByDiscoveryID(params *GetListOfDiscoveriesByDiscoveryIDParams) (*GetListOfDiscoveriesByDiscoveryIDOK, *GetListOfDiscoveriesByDiscoveryIDNoContent, *GetListOfDiscoveriesByDiscoveryIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfDiscoveriesByDiscoveryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListOfDiscoveriesByDiscoveryId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}/job",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListOfDiscoveriesByDiscoveryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetListOfDiscoveriesByDiscoveryIDOK:
		return value, nil, nil, nil
	case *GetListOfDiscoveriesByDiscoveryIDNoContent:
		return nil, value, nil, nil
	case *GetListOfDiscoveriesByDiscoveryIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetNetworkDevicesFromDiscovery gets network devices from discovery

Returns the network devices from a discovery job based on given filters
*/
func (a *Client) GetNetworkDevicesFromDiscovery(params *GetNetworkDevicesFromDiscoveryParams) (*GetNetworkDevicesFromDiscoveryOK, *GetNetworkDevicesFromDiscoveryNoContent, *GetNetworkDevicesFromDiscoveryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDevicesFromDiscoveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDevicesFromDiscovery",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/discovery/{id}/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkDevicesFromDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetNetworkDevicesFromDiscoveryOK:
		return value, nil, nil, nil
	case *GetNetworkDevicesFromDiscoveryNoContent:
		return nil, value, nil, nil
	case *GetNetworkDevicesFromDiscoveryPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetSNMPProperties gets s n m p properties

Returns SNMP properties
*/
func (a *Client) GetSNMPProperties(params *GetSNMPPropertiesParams) (*GetSNMPPropertiesOK, *GetSNMPPropertiesNoContent, *GetSNMPPropertiesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSNMPPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSNMPProperties",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/snmp-property",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSNMPPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetSNMPPropertiesOK:
		return value, nil, nil, nil
	case *GetSNMPPropertiesNoContent:
		return nil, value, nil, nil
	case *GetSNMPPropertiesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
StartDiscovery starts discovery

Initiates discovery with the given parameters
*/
func (a *Client) StartDiscovery(params *StartDiscoveryParams) (*StartDiscoveryOK, *StartDiscoveryCreated, *StartDiscoveryAccepted, *StartDiscoveryNoContent, *StartDiscoveryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDiscoveryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDiscovery",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/discovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartDiscoveryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *StartDiscoveryOK:
		return value, nil, nil, nil, nil, nil
	case *StartDiscoveryCreated:
		return nil, value, nil, nil, nil, nil
	case *StartDiscoveryAccepted:
		return nil, nil, value, nil, nil, nil
	case *StartDiscoveryNoContent:
		return nil, nil, nil, value, nil, nil
	case *StartDiscoveryPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateCLICredentials updates c l i credentials

Updates global CLI credentials
*/
func (a *Client) UpdateCLICredentials(params *UpdateCLICredentialsParams) (*UpdateCLICredentialsOK, *UpdateCLICredentialsCreated, *UpdateCLICredentialsAccepted, *UpdateCLICredentialsNoContent, *UpdateCLICredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCLICredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCLICredentials",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/cli",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCLICredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateCLICredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateCLICredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateCLICredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateCLICredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateCLICredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateGlobalCredentials updates global credentials

Update global credential for network devices in site(s)
*/
func (a *Client) UpdateGlobalCredentials(params *UpdateGlobalCredentialsParams) (*UpdateGlobalCredentialsOK, *UpdateGlobalCredentialsCreated, *UpdateGlobalCredentialsAccepted, *UpdateGlobalCredentialsNoContent, *UpdateGlobalCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGlobalCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGlobalCredentials",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/{globalCredentialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGlobalCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGlobalCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateGlobalCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateGlobalCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateGlobalCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateGlobalCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateHTTPReadCredential updates HTTP read credential

Updates global HTTP Read credential
*/
func (a *Client) UpdateHTTPReadCredential(params *UpdateHTTPReadCredentialParams) (*UpdateHTTPReadCredentialOK, *UpdateHTTPReadCredentialCreated, *UpdateHTTPReadCredentialAccepted, *UpdateHTTPReadCredentialNoContent, *UpdateHTTPReadCredentialPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHTTPReadCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHTTPReadCredential",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/http-read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHTTPReadCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateHTTPReadCredentialOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateHTTPReadCredentialCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateHTTPReadCredentialAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateHTTPReadCredentialNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateHTTPReadCredentialPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateHTTPWriteCredentials updates HTTP write credentials

Updates global HTTP write credentials
*/
func (a *Client) UpdateHTTPWriteCredentials(params *UpdateHTTPWriteCredentialsParams) (*UpdateHTTPWriteCredentialsOK, *UpdateHTTPWriteCredentialsCreated, *UpdateHTTPWriteCredentialsAccepted, *UpdateHTTPWriteCredentialsNoContent, *UpdateHTTPWriteCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHTTPWriteCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHTTPWriteCredentials",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/http-write",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHTTPWriteCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateHTTPWriteCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateHTTPWriteCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateHTTPWriteCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateHTTPWriteCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateHTTPWriteCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateNetconfCredentials updates netconf credentials

Updates global netconf credentials
*/
func (a *Client) UpdateNetconfCredentials(params *UpdateNetconfCredentialsParams) (*UpdateNetconfCredentialsOK, *UpdateNetconfCredentialsCreated, *UpdateNetconfCredentialsAccepted, *UpdateNetconfCredentialsNoContent, *UpdateNetconfCredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetconfCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetconfCredentials",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/netconf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNetconfCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateNetconfCredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateNetconfCredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateNetconfCredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateNetconfCredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateNetconfCredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateSNMPReadCommunity updates s n m p read community

Updates global SNMP read community
*/
func (a *Client) UpdateSNMPReadCommunity(params *UpdateSNMPReadCommunityParams) (*UpdateSNMPReadCommunityOK, *UpdateSNMPReadCommunityCreated, *UpdateSNMPReadCommunityAccepted, *UpdateSNMPReadCommunityNoContent, *UpdateSNMPReadCommunityPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSNMPReadCommunityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSNMPReadCommunity",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv2-read-community",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSNMPReadCommunityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSNMPReadCommunityOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateSNMPReadCommunityCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateSNMPReadCommunityAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateSNMPReadCommunityNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateSNMPReadCommunityPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateSNMPWriteCommunity updates s n m p write community

Updates global SNMP write community
*/
func (a *Client) UpdateSNMPWriteCommunity(params *UpdateSNMPWriteCommunityParams) (*UpdateSNMPWriteCommunityOK, *UpdateSNMPWriteCommunityCreated, *UpdateSNMPWriteCommunityAccepted, *UpdateSNMPWriteCommunityNoContent, *UpdateSNMPWriteCommunityPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSNMPWriteCommunityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSNMPWriteCommunity",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv2-write-community",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSNMPWriteCommunityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSNMPWriteCommunityOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateSNMPWriteCommunityCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateSNMPWriteCommunityAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateSNMPWriteCommunityNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateSNMPWriteCommunityPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateSNMPv3Credentials updates s n m pv3 credentials

Updates global SNMPv3 credential
*/
func (a *Client) UpdateSNMPv3Credentials(params *UpdateSNMPv3CredentialsParams) (*UpdateSNMPv3CredentialsOK, *UpdateSNMPv3CredentialsCreated, *UpdateSNMPv3CredentialsAccepted, *UpdateSNMPv3CredentialsNoContent, *UpdateSNMPv3CredentialsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSNMPv3CredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSNMPv3Credentials",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/global-credential/snmpv3",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSNMPv3CredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSNMPv3CredentialsOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateSNMPv3CredentialsCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateSNMPv3CredentialsAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateSNMPv3CredentialsNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateSNMPv3CredentialsPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdatesAnExistingDiscoveryBySpecifiedID updates an existing discovery by specified Id

Stops or starts an existing discovery
*/
func (a *Client) UpdatesAnExistingDiscoveryBySpecifiedID(params *UpdatesAnExistingDiscoveryBySpecifiedIDParams) (*UpdatesAnExistingDiscoveryBySpecifiedIDOK, *UpdatesAnExistingDiscoveryBySpecifiedIDCreated, *UpdatesAnExistingDiscoveryBySpecifiedIDAccepted, *UpdatesAnExistingDiscoveryBySpecifiedIDNoContent, *UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatesAnExistingDiscoveryBySpecifiedIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatesAnExistingDiscoveryBySpecifiedId",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/discovery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatesAnExistingDiscoveryBySpecifiedIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatesAnExistingDiscoveryBySpecifiedIDOK:
		return value, nil, nil, nil, nil, nil
	case *UpdatesAnExistingDiscoveryBySpecifiedIDCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdatesAnExistingDiscoveryBySpecifiedIDAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdatesAnExistingDiscoveryBySpecifiedIDNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
