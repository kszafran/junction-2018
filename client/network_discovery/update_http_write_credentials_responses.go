// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateHTTPWriteCredentialsReader is a Reader for the UpdateHTTPWriteCredentials structure.
type UpdateHTTPWriteCredentialsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHTTPWriteCredentialsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateHTTPWriteCredentialsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateHTTPWriteCredentialsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateHTTPWriteCredentialsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateHTTPWriteCredentialsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateHTTPWriteCredentialsPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateHTTPWriteCredentialsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateHTTPWriteCredentialsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateHTTPWriteCredentialsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateHTTPWriteCredentialsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateHTTPWriteCredentialsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateHTTPWriteCredentialsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateHTTPWriteCredentialsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateHTTPWriteCredentialsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateHTTPWriteCredentialsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateHTTPWriteCredentialsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateHTTPWriteCredentialsOK creates a UpdateHTTPWriteCredentialsOK with default headers values
func NewUpdateHTTPWriteCredentialsOK() *UpdateHTTPWriteCredentialsOK {
	return &UpdateHTTPWriteCredentialsOK{}
}

/*UpdateHTTPWriteCredentialsOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateHTTPWriteCredentialsOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdateHTTPWriteCredentialsOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsOK  %+v", 200, o.Payload)
}

func (o *UpdateHTTPWriteCredentialsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHTTPWriteCredentialsCreated creates a UpdateHTTPWriteCredentialsCreated with default headers values
func NewUpdateHTTPWriteCredentialsCreated() *UpdateHTTPWriteCredentialsCreated {
	return &UpdateHTTPWriteCredentialsCreated{}
}

/*UpdateHTTPWriteCredentialsCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateHTTPWriteCredentialsCreated struct {
}

func (o *UpdateHTTPWriteCredentialsCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsCreated ", 201)
}

func (o *UpdateHTTPWriteCredentialsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsAccepted creates a UpdateHTTPWriteCredentialsAccepted with default headers values
func NewUpdateHTTPWriteCredentialsAccepted() *UpdateHTTPWriteCredentialsAccepted {
	return &UpdateHTTPWriteCredentialsAccepted{}
}

/*UpdateHTTPWriteCredentialsAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateHTTPWriteCredentialsAccepted struct {
}

func (o *UpdateHTTPWriteCredentialsAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsAccepted ", 202)
}

func (o *UpdateHTTPWriteCredentialsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsNoContent creates a UpdateHTTPWriteCredentialsNoContent with default headers values
func NewUpdateHTTPWriteCredentialsNoContent() *UpdateHTTPWriteCredentialsNoContent {
	return &UpdateHTTPWriteCredentialsNoContent{}
}

/*UpdateHTTPWriteCredentialsNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateHTTPWriteCredentialsNoContent struct {
}

func (o *UpdateHTTPWriteCredentialsNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsNoContent ", 204)
}

func (o *UpdateHTTPWriteCredentialsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsPartialContent creates a UpdateHTTPWriteCredentialsPartialContent with default headers values
func NewUpdateHTTPWriteCredentialsPartialContent() *UpdateHTTPWriteCredentialsPartialContent {
	return &UpdateHTTPWriteCredentialsPartialContent{}
}

/*UpdateHTTPWriteCredentialsPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateHTTPWriteCredentialsPartialContent struct {
}

func (o *UpdateHTTPWriteCredentialsPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsPartialContent ", 206)
}

func (o *UpdateHTTPWriteCredentialsPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsBadRequest creates a UpdateHTTPWriteCredentialsBadRequest with default headers values
func NewUpdateHTTPWriteCredentialsBadRequest() *UpdateHTTPWriteCredentialsBadRequest {
	return &UpdateHTTPWriteCredentialsBadRequest{}
}

/*UpdateHTTPWriteCredentialsBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateHTTPWriteCredentialsBadRequest struct {
}

func (o *UpdateHTTPWriteCredentialsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsBadRequest ", 400)
}

func (o *UpdateHTTPWriteCredentialsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsUnauthorized creates a UpdateHTTPWriteCredentialsUnauthorized with default headers values
func NewUpdateHTTPWriteCredentialsUnauthorized() *UpdateHTTPWriteCredentialsUnauthorized {
	return &UpdateHTTPWriteCredentialsUnauthorized{}
}

/*UpdateHTTPWriteCredentialsUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateHTTPWriteCredentialsUnauthorized struct {
}

func (o *UpdateHTTPWriteCredentialsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsUnauthorized ", 401)
}

func (o *UpdateHTTPWriteCredentialsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsForbidden creates a UpdateHTTPWriteCredentialsForbidden with default headers values
func NewUpdateHTTPWriteCredentialsForbidden() *UpdateHTTPWriteCredentialsForbidden {
	return &UpdateHTTPWriteCredentialsForbidden{}
}

/*UpdateHTTPWriteCredentialsForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateHTTPWriteCredentialsForbidden struct {
}

func (o *UpdateHTTPWriteCredentialsForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsForbidden ", 403)
}

func (o *UpdateHTTPWriteCredentialsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsNotFound creates a UpdateHTTPWriteCredentialsNotFound with default headers values
func NewUpdateHTTPWriteCredentialsNotFound() *UpdateHTTPWriteCredentialsNotFound {
	return &UpdateHTTPWriteCredentialsNotFound{}
}

/*UpdateHTTPWriteCredentialsNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateHTTPWriteCredentialsNotFound struct {
}

func (o *UpdateHTTPWriteCredentialsNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsNotFound ", 404)
}

func (o *UpdateHTTPWriteCredentialsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsConflict creates a UpdateHTTPWriteCredentialsConflict with default headers values
func NewUpdateHTTPWriteCredentialsConflict() *UpdateHTTPWriteCredentialsConflict {
	return &UpdateHTTPWriteCredentialsConflict{}
}

/*UpdateHTTPWriteCredentialsConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateHTTPWriteCredentialsConflict struct {
}

func (o *UpdateHTTPWriteCredentialsConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsConflict ", 409)
}

func (o *UpdateHTTPWriteCredentialsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsUnsupportedMediaType creates a UpdateHTTPWriteCredentialsUnsupportedMediaType with default headers values
func NewUpdateHTTPWriteCredentialsUnsupportedMediaType() *UpdateHTTPWriteCredentialsUnsupportedMediaType {
	return &UpdateHTTPWriteCredentialsUnsupportedMediaType{}
}

/*UpdateHTTPWriteCredentialsUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateHTTPWriteCredentialsUnsupportedMediaType struct {
}

func (o *UpdateHTTPWriteCredentialsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsUnsupportedMediaType ", 415)
}

func (o *UpdateHTTPWriteCredentialsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsInternalServerError creates a UpdateHTTPWriteCredentialsInternalServerError with default headers values
func NewUpdateHTTPWriteCredentialsInternalServerError() *UpdateHTTPWriteCredentialsInternalServerError {
	return &UpdateHTTPWriteCredentialsInternalServerError{}
}

/*UpdateHTTPWriteCredentialsInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateHTTPWriteCredentialsInternalServerError struct {
}

func (o *UpdateHTTPWriteCredentialsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsInternalServerError ", 500)
}

func (o *UpdateHTTPWriteCredentialsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsNotImplemented creates a UpdateHTTPWriteCredentialsNotImplemented with default headers values
func NewUpdateHTTPWriteCredentialsNotImplemented() *UpdateHTTPWriteCredentialsNotImplemented {
	return &UpdateHTTPWriteCredentialsNotImplemented{}
}

/*UpdateHTTPWriteCredentialsNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateHTTPWriteCredentialsNotImplemented struct {
}

func (o *UpdateHTTPWriteCredentialsNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsNotImplemented ", 501)
}

func (o *UpdateHTTPWriteCredentialsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsServiceUnavailable creates a UpdateHTTPWriteCredentialsServiceUnavailable with default headers values
func NewUpdateHTTPWriteCredentialsServiceUnavailable() *UpdateHTTPWriteCredentialsServiceUnavailable {
	return &UpdateHTTPWriteCredentialsServiceUnavailable{}
}

/*UpdateHTTPWriteCredentialsServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateHTTPWriteCredentialsServiceUnavailable struct {
}

func (o *UpdateHTTPWriteCredentialsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsServiceUnavailable ", 503)
}

func (o *UpdateHTTPWriteCredentialsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPWriteCredentialsGatewayTimeout creates a UpdateHTTPWriteCredentialsGatewayTimeout with default headers values
func NewUpdateHTTPWriteCredentialsGatewayTimeout() *UpdateHTTPWriteCredentialsGatewayTimeout {
	return &UpdateHTTPWriteCredentialsGatewayTimeout{}
}

/*UpdateHTTPWriteCredentialsGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateHTTPWriteCredentialsGatewayTimeout struct {
}

func (o *UpdateHTTPWriteCredentialsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-write][%d] updateHttpWriteCredentialsGatewayTimeout ", 504)
}

func (o *UpdateHTTPWriteCredentialsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
