// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdatesAnExistingDiscoveryBySpecifiedIDReader is a Reader for the UpdatesAnExistingDiscoveryBySpecifiedID structure.
type UpdatesAnExistingDiscoveryBySpecifiedIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatesAnExistingDiscoveryBySpecifiedIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDOK creates a UpdatesAnExistingDiscoveryBySpecifiedIDOK with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDOK() *UpdatesAnExistingDiscoveryBySpecifiedIDOK {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDOK{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdOK  %+v", 200, o.Payload)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDCreated creates a UpdatesAnExistingDiscoveryBySpecifiedIDCreated with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDCreated() *UpdatesAnExistingDiscoveryBySpecifiedIDCreated {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDCreated{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDCreated struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdCreated ", 201)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDAccepted creates a UpdatesAnExistingDiscoveryBySpecifiedIDAccepted with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDAccepted() *UpdatesAnExistingDiscoveryBySpecifiedIDAccepted {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDAccepted{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDAccepted struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdAccepted ", 202)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDNoContent creates a UpdatesAnExistingDiscoveryBySpecifiedIDNoContent with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDNoContent() *UpdatesAnExistingDiscoveryBySpecifiedIDNoContent {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDNoContent{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDNoContent struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdNoContent ", 204)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDPartialContent creates a UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDPartialContent() *UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdPartialContent ", 206)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDBadRequest creates a UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDBadRequest() *UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdBadRequest ", 400)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized creates a UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized() *UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdUnauthorized ", 401)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDForbidden creates a UpdatesAnExistingDiscoveryBySpecifiedIDForbidden with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDForbidden() *UpdatesAnExistingDiscoveryBySpecifiedIDForbidden {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDForbidden{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDForbidden struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdForbidden ", 403)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDNotFound creates a UpdatesAnExistingDiscoveryBySpecifiedIDNotFound with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDNotFound() *UpdatesAnExistingDiscoveryBySpecifiedIDNotFound {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDNotFound{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDNotFound struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdNotFound ", 404)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDConflict creates a UpdatesAnExistingDiscoveryBySpecifiedIDConflict with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDConflict() *UpdatesAnExistingDiscoveryBySpecifiedIDConflict {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDConflict{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDConflict struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdConflict ", 409)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType creates a UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType() *UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdUnsupportedMediaType ", 415)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError creates a UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError() *UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdInternalServerError ", 500)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented creates a UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented() *UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdNotImplemented ", 501)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable creates a UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable() *UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdServiceUnavailable ", 503)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout creates a UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout with default headers values
func NewUpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout() *UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout {
	return &UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout{}
}

/*UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout struct {
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/discovery][%d] updatesAnExistingDiscoveryBySpecifiedIdGatewayTimeout ", 504)
}

func (o *UpdatesAnExistingDiscoveryBySpecifiedIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
