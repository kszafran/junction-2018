// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateNetconfCredentialsReader is a Reader for the UpdateNetconfCredentials structure.
type UpdateNetconfCredentialsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateNetconfCredentialsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateNetconfCredentialsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateNetconfCredentialsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateNetconfCredentialsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateNetconfCredentialsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateNetconfCredentialsPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateNetconfCredentialsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateNetconfCredentialsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateNetconfCredentialsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateNetconfCredentialsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateNetconfCredentialsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateNetconfCredentialsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateNetconfCredentialsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateNetconfCredentialsNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateNetconfCredentialsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateNetconfCredentialsGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateNetconfCredentialsOK creates a UpdateNetconfCredentialsOK with default headers values
func NewUpdateNetconfCredentialsOK() *UpdateNetconfCredentialsOK {
	return &UpdateNetconfCredentialsOK{}
}

/*UpdateNetconfCredentialsOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateNetconfCredentialsOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdateNetconfCredentialsOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsOK  %+v", 200, o.Payload)
}

func (o *UpdateNetconfCredentialsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateNetconfCredentialsCreated creates a UpdateNetconfCredentialsCreated with default headers values
func NewUpdateNetconfCredentialsCreated() *UpdateNetconfCredentialsCreated {
	return &UpdateNetconfCredentialsCreated{}
}

/*UpdateNetconfCredentialsCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateNetconfCredentialsCreated struct {
}

func (o *UpdateNetconfCredentialsCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsCreated ", 201)
}

func (o *UpdateNetconfCredentialsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsAccepted creates a UpdateNetconfCredentialsAccepted with default headers values
func NewUpdateNetconfCredentialsAccepted() *UpdateNetconfCredentialsAccepted {
	return &UpdateNetconfCredentialsAccepted{}
}

/*UpdateNetconfCredentialsAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateNetconfCredentialsAccepted struct {
}

func (o *UpdateNetconfCredentialsAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsAccepted ", 202)
}

func (o *UpdateNetconfCredentialsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsNoContent creates a UpdateNetconfCredentialsNoContent with default headers values
func NewUpdateNetconfCredentialsNoContent() *UpdateNetconfCredentialsNoContent {
	return &UpdateNetconfCredentialsNoContent{}
}

/*UpdateNetconfCredentialsNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateNetconfCredentialsNoContent struct {
}

func (o *UpdateNetconfCredentialsNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsNoContent ", 204)
}

func (o *UpdateNetconfCredentialsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsPartialContent creates a UpdateNetconfCredentialsPartialContent with default headers values
func NewUpdateNetconfCredentialsPartialContent() *UpdateNetconfCredentialsPartialContent {
	return &UpdateNetconfCredentialsPartialContent{}
}

/*UpdateNetconfCredentialsPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateNetconfCredentialsPartialContent struct {
}

func (o *UpdateNetconfCredentialsPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsPartialContent ", 206)
}

func (o *UpdateNetconfCredentialsPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsBadRequest creates a UpdateNetconfCredentialsBadRequest with default headers values
func NewUpdateNetconfCredentialsBadRequest() *UpdateNetconfCredentialsBadRequest {
	return &UpdateNetconfCredentialsBadRequest{}
}

/*UpdateNetconfCredentialsBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateNetconfCredentialsBadRequest struct {
}

func (o *UpdateNetconfCredentialsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsBadRequest ", 400)
}

func (o *UpdateNetconfCredentialsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsUnauthorized creates a UpdateNetconfCredentialsUnauthorized with default headers values
func NewUpdateNetconfCredentialsUnauthorized() *UpdateNetconfCredentialsUnauthorized {
	return &UpdateNetconfCredentialsUnauthorized{}
}

/*UpdateNetconfCredentialsUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateNetconfCredentialsUnauthorized struct {
}

func (o *UpdateNetconfCredentialsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsUnauthorized ", 401)
}

func (o *UpdateNetconfCredentialsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsForbidden creates a UpdateNetconfCredentialsForbidden with default headers values
func NewUpdateNetconfCredentialsForbidden() *UpdateNetconfCredentialsForbidden {
	return &UpdateNetconfCredentialsForbidden{}
}

/*UpdateNetconfCredentialsForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateNetconfCredentialsForbidden struct {
}

func (o *UpdateNetconfCredentialsForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsForbidden ", 403)
}

func (o *UpdateNetconfCredentialsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsNotFound creates a UpdateNetconfCredentialsNotFound with default headers values
func NewUpdateNetconfCredentialsNotFound() *UpdateNetconfCredentialsNotFound {
	return &UpdateNetconfCredentialsNotFound{}
}

/*UpdateNetconfCredentialsNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateNetconfCredentialsNotFound struct {
}

func (o *UpdateNetconfCredentialsNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsNotFound ", 404)
}

func (o *UpdateNetconfCredentialsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsConflict creates a UpdateNetconfCredentialsConflict with default headers values
func NewUpdateNetconfCredentialsConflict() *UpdateNetconfCredentialsConflict {
	return &UpdateNetconfCredentialsConflict{}
}

/*UpdateNetconfCredentialsConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateNetconfCredentialsConflict struct {
}

func (o *UpdateNetconfCredentialsConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsConflict ", 409)
}

func (o *UpdateNetconfCredentialsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsUnsupportedMediaType creates a UpdateNetconfCredentialsUnsupportedMediaType with default headers values
func NewUpdateNetconfCredentialsUnsupportedMediaType() *UpdateNetconfCredentialsUnsupportedMediaType {
	return &UpdateNetconfCredentialsUnsupportedMediaType{}
}

/*UpdateNetconfCredentialsUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateNetconfCredentialsUnsupportedMediaType struct {
}

func (o *UpdateNetconfCredentialsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsUnsupportedMediaType ", 415)
}

func (o *UpdateNetconfCredentialsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsInternalServerError creates a UpdateNetconfCredentialsInternalServerError with default headers values
func NewUpdateNetconfCredentialsInternalServerError() *UpdateNetconfCredentialsInternalServerError {
	return &UpdateNetconfCredentialsInternalServerError{}
}

/*UpdateNetconfCredentialsInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateNetconfCredentialsInternalServerError struct {
}

func (o *UpdateNetconfCredentialsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsInternalServerError ", 500)
}

func (o *UpdateNetconfCredentialsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsNotImplemented creates a UpdateNetconfCredentialsNotImplemented with default headers values
func NewUpdateNetconfCredentialsNotImplemented() *UpdateNetconfCredentialsNotImplemented {
	return &UpdateNetconfCredentialsNotImplemented{}
}

/*UpdateNetconfCredentialsNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateNetconfCredentialsNotImplemented struct {
}

func (o *UpdateNetconfCredentialsNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsNotImplemented ", 501)
}

func (o *UpdateNetconfCredentialsNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsServiceUnavailable creates a UpdateNetconfCredentialsServiceUnavailable with default headers values
func NewUpdateNetconfCredentialsServiceUnavailable() *UpdateNetconfCredentialsServiceUnavailable {
	return &UpdateNetconfCredentialsServiceUnavailable{}
}

/*UpdateNetconfCredentialsServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateNetconfCredentialsServiceUnavailable struct {
}

func (o *UpdateNetconfCredentialsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsServiceUnavailable ", 503)
}

func (o *UpdateNetconfCredentialsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateNetconfCredentialsGatewayTimeout creates a UpdateNetconfCredentialsGatewayTimeout with default headers values
func NewUpdateNetconfCredentialsGatewayTimeout() *UpdateNetconfCredentialsGatewayTimeout {
	return &UpdateNetconfCredentialsGatewayTimeout{}
}

/*UpdateNetconfCredentialsGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateNetconfCredentialsGatewayTimeout struct {
}

func (o *UpdateNetconfCredentialsGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/netconf][%d] updateNetconfCredentialsGatewayTimeout ", 504)
}

func (o *UpdateNetconfCredentialsGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
