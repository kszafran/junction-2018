// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateHTTPReadCredentialReader is a Reader for the UpdateHTTPReadCredential structure.
type UpdateHTTPReadCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateHTTPReadCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateHTTPReadCredentialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateHTTPReadCredentialCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateHTTPReadCredentialAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateHTTPReadCredentialNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateHTTPReadCredentialPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateHTTPReadCredentialBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateHTTPReadCredentialUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateHTTPReadCredentialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateHTTPReadCredentialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateHTTPReadCredentialConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateHTTPReadCredentialUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateHTTPReadCredentialInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateHTTPReadCredentialNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateHTTPReadCredentialServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateHTTPReadCredentialGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateHTTPReadCredentialOK creates a UpdateHTTPReadCredentialOK with default headers values
func NewUpdateHTTPReadCredentialOK() *UpdateHTTPReadCredentialOK {
	return &UpdateHTTPReadCredentialOK{}
}

/*UpdateHTTPReadCredentialOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateHTTPReadCredentialOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdateHTTPReadCredentialOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialOK  %+v", 200, o.Payload)
}

func (o *UpdateHTTPReadCredentialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateHTTPReadCredentialCreated creates a UpdateHTTPReadCredentialCreated with default headers values
func NewUpdateHTTPReadCredentialCreated() *UpdateHTTPReadCredentialCreated {
	return &UpdateHTTPReadCredentialCreated{}
}

/*UpdateHTTPReadCredentialCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateHTTPReadCredentialCreated struct {
}

func (o *UpdateHTTPReadCredentialCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialCreated ", 201)
}

func (o *UpdateHTTPReadCredentialCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialAccepted creates a UpdateHTTPReadCredentialAccepted with default headers values
func NewUpdateHTTPReadCredentialAccepted() *UpdateHTTPReadCredentialAccepted {
	return &UpdateHTTPReadCredentialAccepted{}
}

/*UpdateHTTPReadCredentialAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateHTTPReadCredentialAccepted struct {
}

func (o *UpdateHTTPReadCredentialAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialAccepted ", 202)
}

func (o *UpdateHTTPReadCredentialAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialNoContent creates a UpdateHTTPReadCredentialNoContent with default headers values
func NewUpdateHTTPReadCredentialNoContent() *UpdateHTTPReadCredentialNoContent {
	return &UpdateHTTPReadCredentialNoContent{}
}

/*UpdateHTTPReadCredentialNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateHTTPReadCredentialNoContent struct {
}

func (o *UpdateHTTPReadCredentialNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialNoContent ", 204)
}

func (o *UpdateHTTPReadCredentialNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialPartialContent creates a UpdateHTTPReadCredentialPartialContent with default headers values
func NewUpdateHTTPReadCredentialPartialContent() *UpdateHTTPReadCredentialPartialContent {
	return &UpdateHTTPReadCredentialPartialContent{}
}

/*UpdateHTTPReadCredentialPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateHTTPReadCredentialPartialContent struct {
}

func (o *UpdateHTTPReadCredentialPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialPartialContent ", 206)
}

func (o *UpdateHTTPReadCredentialPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialBadRequest creates a UpdateHTTPReadCredentialBadRequest with default headers values
func NewUpdateHTTPReadCredentialBadRequest() *UpdateHTTPReadCredentialBadRequest {
	return &UpdateHTTPReadCredentialBadRequest{}
}

/*UpdateHTTPReadCredentialBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateHTTPReadCredentialBadRequest struct {
}

func (o *UpdateHTTPReadCredentialBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialBadRequest ", 400)
}

func (o *UpdateHTTPReadCredentialBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialUnauthorized creates a UpdateHTTPReadCredentialUnauthorized with default headers values
func NewUpdateHTTPReadCredentialUnauthorized() *UpdateHTTPReadCredentialUnauthorized {
	return &UpdateHTTPReadCredentialUnauthorized{}
}

/*UpdateHTTPReadCredentialUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateHTTPReadCredentialUnauthorized struct {
}

func (o *UpdateHTTPReadCredentialUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialUnauthorized ", 401)
}

func (o *UpdateHTTPReadCredentialUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialForbidden creates a UpdateHTTPReadCredentialForbidden with default headers values
func NewUpdateHTTPReadCredentialForbidden() *UpdateHTTPReadCredentialForbidden {
	return &UpdateHTTPReadCredentialForbidden{}
}

/*UpdateHTTPReadCredentialForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateHTTPReadCredentialForbidden struct {
}

func (o *UpdateHTTPReadCredentialForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialForbidden ", 403)
}

func (o *UpdateHTTPReadCredentialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialNotFound creates a UpdateHTTPReadCredentialNotFound with default headers values
func NewUpdateHTTPReadCredentialNotFound() *UpdateHTTPReadCredentialNotFound {
	return &UpdateHTTPReadCredentialNotFound{}
}

/*UpdateHTTPReadCredentialNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateHTTPReadCredentialNotFound struct {
}

func (o *UpdateHTTPReadCredentialNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialNotFound ", 404)
}

func (o *UpdateHTTPReadCredentialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialConflict creates a UpdateHTTPReadCredentialConflict with default headers values
func NewUpdateHTTPReadCredentialConflict() *UpdateHTTPReadCredentialConflict {
	return &UpdateHTTPReadCredentialConflict{}
}

/*UpdateHTTPReadCredentialConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateHTTPReadCredentialConflict struct {
}

func (o *UpdateHTTPReadCredentialConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialConflict ", 409)
}

func (o *UpdateHTTPReadCredentialConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialUnsupportedMediaType creates a UpdateHTTPReadCredentialUnsupportedMediaType with default headers values
func NewUpdateHTTPReadCredentialUnsupportedMediaType() *UpdateHTTPReadCredentialUnsupportedMediaType {
	return &UpdateHTTPReadCredentialUnsupportedMediaType{}
}

/*UpdateHTTPReadCredentialUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateHTTPReadCredentialUnsupportedMediaType struct {
}

func (o *UpdateHTTPReadCredentialUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialUnsupportedMediaType ", 415)
}

func (o *UpdateHTTPReadCredentialUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialInternalServerError creates a UpdateHTTPReadCredentialInternalServerError with default headers values
func NewUpdateHTTPReadCredentialInternalServerError() *UpdateHTTPReadCredentialInternalServerError {
	return &UpdateHTTPReadCredentialInternalServerError{}
}

/*UpdateHTTPReadCredentialInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateHTTPReadCredentialInternalServerError struct {
}

func (o *UpdateHTTPReadCredentialInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialInternalServerError ", 500)
}

func (o *UpdateHTTPReadCredentialInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialNotImplemented creates a UpdateHTTPReadCredentialNotImplemented with default headers values
func NewUpdateHTTPReadCredentialNotImplemented() *UpdateHTTPReadCredentialNotImplemented {
	return &UpdateHTTPReadCredentialNotImplemented{}
}

/*UpdateHTTPReadCredentialNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateHTTPReadCredentialNotImplemented struct {
}

func (o *UpdateHTTPReadCredentialNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialNotImplemented ", 501)
}

func (o *UpdateHTTPReadCredentialNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialServiceUnavailable creates a UpdateHTTPReadCredentialServiceUnavailable with default headers values
func NewUpdateHTTPReadCredentialServiceUnavailable() *UpdateHTTPReadCredentialServiceUnavailable {
	return &UpdateHTTPReadCredentialServiceUnavailable{}
}

/*UpdateHTTPReadCredentialServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateHTTPReadCredentialServiceUnavailable struct {
}

func (o *UpdateHTTPReadCredentialServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialServiceUnavailable ", 503)
}

func (o *UpdateHTTPReadCredentialServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateHTTPReadCredentialGatewayTimeout creates a UpdateHTTPReadCredentialGatewayTimeout with default headers values
func NewUpdateHTTPReadCredentialGatewayTimeout() *UpdateHTTPReadCredentialGatewayTimeout {
	return &UpdateHTTPReadCredentialGatewayTimeout{}
}

/*UpdateHTTPReadCredentialGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateHTTPReadCredentialGatewayTimeout struct {
}

func (o *UpdateHTTPReadCredentialGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/global-credential/http-read][%d] updateHttpReadCredentialGatewayTimeout ", 504)
}

func (o *UpdateHTTPReadCredentialGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
