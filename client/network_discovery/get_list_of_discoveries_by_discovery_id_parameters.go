// Code generated by go-swagger; DO NOT EDIT.

package network_discovery

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetListOfDiscoveriesByDiscoveryIDParams creates a new GetListOfDiscoveriesByDiscoveryIDParams object
// with the default values initialized.
func NewGetListOfDiscoveriesByDiscoveryIDParams() *GetListOfDiscoveriesByDiscoveryIDParams {
	var ()
	return &GetListOfDiscoveriesByDiscoveryIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetListOfDiscoveriesByDiscoveryIDParamsWithTimeout creates a new GetListOfDiscoveriesByDiscoveryIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetListOfDiscoveriesByDiscoveryIDParamsWithTimeout(timeout time.Duration) *GetListOfDiscoveriesByDiscoveryIDParams {
	var ()
	return &GetListOfDiscoveriesByDiscoveryIDParams{

		timeout: timeout,
	}
}

// NewGetListOfDiscoveriesByDiscoveryIDParamsWithContext creates a new GetListOfDiscoveriesByDiscoveryIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetListOfDiscoveriesByDiscoveryIDParamsWithContext(ctx context.Context) *GetListOfDiscoveriesByDiscoveryIDParams {
	var ()
	return &GetListOfDiscoveriesByDiscoveryIDParams{

		Context: ctx,
	}
}

// NewGetListOfDiscoveriesByDiscoveryIDParamsWithHTTPClient creates a new GetListOfDiscoveriesByDiscoveryIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetListOfDiscoveriesByDiscoveryIDParamsWithHTTPClient(client *http.Client) *GetListOfDiscoveriesByDiscoveryIDParams {
	var ()
	return &GetListOfDiscoveriesByDiscoveryIDParams{
		HTTPClient: client,
	}
}

/*GetListOfDiscoveriesByDiscoveryIDParams contains all the parameters to send to the API endpoint
for the get list of discoveries by discovery Id operation typically these are written to a http.Request
*/
type GetListOfDiscoveriesByDiscoveryIDParams struct {

	/*ID
	  Discovery ID

	*/
	ID string
	/*IPAddress
	  ipAddress

	*/
	IPAddress *string
	/*Limit
	  limit

	*/
	Limit *int64
	/*Offset
	  offset

	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithTimeout(timeout time.Duration) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithContext(ctx context.Context) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithHTTPClient(client *http.Client) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithID(id string) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetID(id string) {
	o.ID = id
}

// WithIPAddress adds the iPAddress to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithIPAddress(iPAddress *string) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetIPAddress(iPAddress *string) {
	o.IPAddress = iPAddress
}

// WithLimit adds the limit to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithLimit(limit *int64) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WithOffset(offset *int64) *GetListOfDiscoveriesByDiscoveryIDParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get list of discoveries by discovery Id params
func (o *GetListOfDiscoveriesByDiscoveryIDParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *GetListOfDiscoveriesByDiscoveryIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IPAddress != nil {

		// query param ipAddress
		var qrIPAddress string
		if o.IPAddress != nil {
			qrIPAddress = *o.IPAddress
		}
		qIPAddress := qrIPAddress
		if qIPAddress != "" {
			if err := r.SetQueryParam("ipAddress", qIPAddress); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
