// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeviceListParams creates a new GetDeviceListParams object
// with the default values initialized.
func NewGetDeviceListParams() *GetDeviceListParams {
	var ()
	return &GetDeviceListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceListParamsWithTimeout creates a new GetDeviceListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceListParamsWithTimeout(timeout time.Duration) *GetDeviceListParams {
	var ()
	return &GetDeviceListParams{

		timeout: timeout,
	}
}

// NewGetDeviceListParamsWithContext creates a new GetDeviceListParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceListParamsWithContext(ctx context.Context) *GetDeviceListParams {
	var ()
	return &GetDeviceListParams{

		Context: ctx,
	}
}

// NewGetDeviceListParamsWithHTTPClient creates a new GetDeviceListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceListParamsWithHTTPClient(client *http.Client) *GetDeviceListParams {
	var ()
	return &GetDeviceListParams{
		HTTPClient: client,
	}
}

/*GetDeviceListParams contains all the parameters to send to the API endpoint
for the get device list operation typically these are written to a http.Request
*/
type GetDeviceListParams struct {

	/*AssociatedWlcIP
	  associatedWlcIp

	*/
	AssociatedWlcIP []string
	/*CollectionInterval
	  collectionInterval

	*/
	CollectionInterval []string
	/*CollectionStatus
	  collectionStatus

	*/
	CollectionStatus []string
	/*ErrorCode
	  errorCode

	*/
	ErrorCode []string
	/*ErrorDescription
	  errorDescription

	*/
	ErrorDescription []string
	/*Family
	  family

	*/
	Family []string
	/*Hostname
	  hostname

	*/
	Hostname []string
	/*ID
	  Accepts comma separated id's and return list of network-devices for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.

	*/
	ID *string
	/*LicenseName
	  licenseName

	*/
	LicenseName []string
	/*LicenseStatus
	  licenseStatus

	*/
	LicenseStatus []string
	/*LicenseType
	  licenseType

	*/
	LicenseType []string
	/*Location
	  location

	*/
	Location []string
	/*LocationName
	  locationName

	*/
	LocationName []string
	/*MacAddress
	  macAddress

	*/
	MacAddress []string
	/*ManagementIPAddress
	  managementIpAddress

	*/
	ManagementIPAddress []string
	/*ModuleEqupimenttype
	  moduleEqupimentType

	*/
	ModuleEqupimenttype []string
	/*ModuleName
	  moduleName

	*/
	ModuleName []string
	/*ModuleOperationstatecode
	  moduleOperationStateCode

	*/
	ModuleOperationstatecode []string
	/*ModulePartnumber
	  modulePartNumber

	*/
	ModulePartnumber []string
	/*ModuleServicestate
	  moduleServiceState

	*/
	ModuleServicestate []string
	/*ModuleVendorequipmenttype
	  moduleVendorEquipmentType

	*/
	ModuleVendorequipmenttype []string
	/*NotSyncedForMinutes
	  notSyncedForMinutes

	*/
	NotSyncedForMinutes []string
	/*PlatformID
	  platformId

	*/
	PlatformID []string
	/*ReachabilityStatus
	  reachabilityStatus

	*/
	ReachabilityStatus []string
	/*Role
	  role

	*/
	Role []string
	/*SerialNumber
	  serialNumber

	*/
	SerialNumber []string
	/*Series
	  series

	*/
	Series []string
	/*SoftwareType
	  softwareType

	*/
	SoftwareType []string
	/*SoftwareVersion
	  softwareVersion

	*/
	SoftwareVersion []string
	/*Type
	  type

	*/
	Type []string
	/*UpTime
	  upTime

	*/
	UpTime []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device list params
func (o *GetDeviceListParams) WithTimeout(timeout time.Duration) *GetDeviceListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device list params
func (o *GetDeviceListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device list params
func (o *GetDeviceListParams) WithContext(ctx context.Context) *GetDeviceListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device list params
func (o *GetDeviceListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device list params
func (o *GetDeviceListParams) WithHTTPClient(client *http.Client) *GetDeviceListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device list params
func (o *GetDeviceListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssociatedWlcIP adds the associatedWlcIP to the get device list params
func (o *GetDeviceListParams) WithAssociatedWlcIP(associatedWlcIP []string) *GetDeviceListParams {
	o.SetAssociatedWlcIP(associatedWlcIP)
	return o
}

// SetAssociatedWlcIP adds the associatedWlcIp to the get device list params
func (o *GetDeviceListParams) SetAssociatedWlcIP(associatedWlcIP []string) {
	o.AssociatedWlcIP = associatedWlcIP
}

// WithCollectionInterval adds the collectionInterval to the get device list params
func (o *GetDeviceListParams) WithCollectionInterval(collectionInterval []string) *GetDeviceListParams {
	o.SetCollectionInterval(collectionInterval)
	return o
}

// SetCollectionInterval adds the collectionInterval to the get device list params
func (o *GetDeviceListParams) SetCollectionInterval(collectionInterval []string) {
	o.CollectionInterval = collectionInterval
}

// WithCollectionStatus adds the collectionStatus to the get device list params
func (o *GetDeviceListParams) WithCollectionStatus(collectionStatus []string) *GetDeviceListParams {
	o.SetCollectionStatus(collectionStatus)
	return o
}

// SetCollectionStatus adds the collectionStatus to the get device list params
func (o *GetDeviceListParams) SetCollectionStatus(collectionStatus []string) {
	o.CollectionStatus = collectionStatus
}

// WithErrorCode adds the errorCode to the get device list params
func (o *GetDeviceListParams) WithErrorCode(errorCode []string) *GetDeviceListParams {
	o.SetErrorCode(errorCode)
	return o
}

// SetErrorCode adds the errorCode to the get device list params
func (o *GetDeviceListParams) SetErrorCode(errorCode []string) {
	o.ErrorCode = errorCode
}

// WithErrorDescription adds the errorDescription to the get device list params
func (o *GetDeviceListParams) WithErrorDescription(errorDescription []string) *GetDeviceListParams {
	o.SetErrorDescription(errorDescription)
	return o
}

// SetErrorDescription adds the errorDescription to the get device list params
func (o *GetDeviceListParams) SetErrorDescription(errorDescription []string) {
	o.ErrorDescription = errorDescription
}

// WithFamily adds the family to the get device list params
func (o *GetDeviceListParams) WithFamily(family []string) *GetDeviceListParams {
	o.SetFamily(family)
	return o
}

// SetFamily adds the family to the get device list params
func (o *GetDeviceListParams) SetFamily(family []string) {
	o.Family = family
}

// WithHostname adds the hostname to the get device list params
func (o *GetDeviceListParams) WithHostname(hostname []string) *GetDeviceListParams {
	o.SetHostname(hostname)
	return o
}

// SetHostname adds the hostname to the get device list params
func (o *GetDeviceListParams) SetHostname(hostname []string) {
	o.Hostname = hostname
}

// WithID adds the id to the get device list params
func (o *GetDeviceListParams) WithID(id *string) *GetDeviceListParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get device list params
func (o *GetDeviceListParams) SetID(id *string) {
	o.ID = id
}

// WithLicenseName adds the licenseName to the get device list params
func (o *GetDeviceListParams) WithLicenseName(licenseName []string) *GetDeviceListParams {
	o.SetLicenseName(licenseName)
	return o
}

// SetLicenseName adds the licenseName to the get device list params
func (o *GetDeviceListParams) SetLicenseName(licenseName []string) {
	o.LicenseName = licenseName
}

// WithLicenseStatus adds the licenseStatus to the get device list params
func (o *GetDeviceListParams) WithLicenseStatus(licenseStatus []string) *GetDeviceListParams {
	o.SetLicenseStatus(licenseStatus)
	return o
}

// SetLicenseStatus adds the licenseStatus to the get device list params
func (o *GetDeviceListParams) SetLicenseStatus(licenseStatus []string) {
	o.LicenseStatus = licenseStatus
}

// WithLicenseType adds the licenseType to the get device list params
func (o *GetDeviceListParams) WithLicenseType(licenseType []string) *GetDeviceListParams {
	o.SetLicenseType(licenseType)
	return o
}

// SetLicenseType adds the licenseType to the get device list params
func (o *GetDeviceListParams) SetLicenseType(licenseType []string) {
	o.LicenseType = licenseType
}

// WithLocation adds the location to the get device list params
func (o *GetDeviceListParams) WithLocation(location []string) *GetDeviceListParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the get device list params
func (o *GetDeviceListParams) SetLocation(location []string) {
	o.Location = location
}

// WithLocationName adds the locationName to the get device list params
func (o *GetDeviceListParams) WithLocationName(locationName []string) *GetDeviceListParams {
	o.SetLocationName(locationName)
	return o
}

// SetLocationName adds the locationName to the get device list params
func (o *GetDeviceListParams) SetLocationName(locationName []string) {
	o.LocationName = locationName
}

// WithMacAddress adds the macAddress to the get device list params
func (o *GetDeviceListParams) WithMacAddress(macAddress []string) *GetDeviceListParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the get device list params
func (o *GetDeviceListParams) SetMacAddress(macAddress []string) {
	o.MacAddress = macAddress
}

// WithManagementIPAddress adds the managementIPAddress to the get device list params
func (o *GetDeviceListParams) WithManagementIPAddress(managementIPAddress []string) *GetDeviceListParams {
	o.SetManagementIPAddress(managementIPAddress)
	return o
}

// SetManagementIPAddress adds the managementIpAddress to the get device list params
func (o *GetDeviceListParams) SetManagementIPAddress(managementIPAddress []string) {
	o.ManagementIPAddress = managementIPAddress
}

// WithModuleEqupimenttype adds the moduleEqupimenttype to the get device list params
func (o *GetDeviceListParams) WithModuleEqupimenttype(moduleEqupimenttype []string) *GetDeviceListParams {
	o.SetModuleEqupimenttype(moduleEqupimenttype)
	return o
}

// SetModuleEqupimenttype adds the moduleEqupimenttype to the get device list params
func (o *GetDeviceListParams) SetModuleEqupimenttype(moduleEqupimenttype []string) {
	o.ModuleEqupimenttype = moduleEqupimenttype
}

// WithModuleName adds the moduleName to the get device list params
func (o *GetDeviceListParams) WithModuleName(moduleName []string) *GetDeviceListParams {
	o.SetModuleName(moduleName)
	return o
}

// SetModuleName adds the moduleName to the get device list params
func (o *GetDeviceListParams) SetModuleName(moduleName []string) {
	o.ModuleName = moduleName
}

// WithModuleOperationstatecode adds the moduleOperationstatecode to the get device list params
func (o *GetDeviceListParams) WithModuleOperationstatecode(moduleOperationstatecode []string) *GetDeviceListParams {
	o.SetModuleOperationstatecode(moduleOperationstatecode)
	return o
}

// SetModuleOperationstatecode adds the moduleOperationstatecode to the get device list params
func (o *GetDeviceListParams) SetModuleOperationstatecode(moduleOperationstatecode []string) {
	o.ModuleOperationstatecode = moduleOperationstatecode
}

// WithModulePartnumber adds the modulePartnumber to the get device list params
func (o *GetDeviceListParams) WithModulePartnumber(modulePartnumber []string) *GetDeviceListParams {
	o.SetModulePartnumber(modulePartnumber)
	return o
}

// SetModulePartnumber adds the modulePartnumber to the get device list params
func (o *GetDeviceListParams) SetModulePartnumber(modulePartnumber []string) {
	o.ModulePartnumber = modulePartnumber
}

// WithModuleServicestate adds the moduleServicestate to the get device list params
func (o *GetDeviceListParams) WithModuleServicestate(moduleServicestate []string) *GetDeviceListParams {
	o.SetModuleServicestate(moduleServicestate)
	return o
}

// SetModuleServicestate adds the moduleServicestate to the get device list params
func (o *GetDeviceListParams) SetModuleServicestate(moduleServicestate []string) {
	o.ModuleServicestate = moduleServicestate
}

// WithModuleVendorequipmenttype adds the moduleVendorequipmenttype to the get device list params
func (o *GetDeviceListParams) WithModuleVendorequipmenttype(moduleVendorequipmenttype []string) *GetDeviceListParams {
	o.SetModuleVendorequipmenttype(moduleVendorequipmenttype)
	return o
}

// SetModuleVendorequipmenttype adds the moduleVendorequipmenttype to the get device list params
func (o *GetDeviceListParams) SetModuleVendorequipmenttype(moduleVendorequipmenttype []string) {
	o.ModuleVendorequipmenttype = moduleVendorequipmenttype
}

// WithNotSyncedForMinutes adds the notSyncedForMinutes to the get device list params
func (o *GetDeviceListParams) WithNotSyncedForMinutes(notSyncedForMinutes []string) *GetDeviceListParams {
	o.SetNotSyncedForMinutes(notSyncedForMinutes)
	return o
}

// SetNotSyncedForMinutes adds the notSyncedForMinutes to the get device list params
func (o *GetDeviceListParams) SetNotSyncedForMinutes(notSyncedForMinutes []string) {
	o.NotSyncedForMinutes = notSyncedForMinutes
}

// WithPlatformID adds the platformID to the get device list params
func (o *GetDeviceListParams) WithPlatformID(platformID []string) *GetDeviceListParams {
	o.SetPlatformID(platformID)
	return o
}

// SetPlatformID adds the platformId to the get device list params
func (o *GetDeviceListParams) SetPlatformID(platformID []string) {
	o.PlatformID = platformID
}

// WithReachabilityStatus adds the reachabilityStatus to the get device list params
func (o *GetDeviceListParams) WithReachabilityStatus(reachabilityStatus []string) *GetDeviceListParams {
	o.SetReachabilityStatus(reachabilityStatus)
	return o
}

// SetReachabilityStatus adds the reachabilityStatus to the get device list params
func (o *GetDeviceListParams) SetReachabilityStatus(reachabilityStatus []string) {
	o.ReachabilityStatus = reachabilityStatus
}

// WithRole adds the role to the get device list params
func (o *GetDeviceListParams) WithRole(role []string) *GetDeviceListParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the get device list params
func (o *GetDeviceListParams) SetRole(role []string) {
	o.Role = role
}

// WithSerialNumber adds the serialNumber to the get device list params
func (o *GetDeviceListParams) WithSerialNumber(serialNumber []string) *GetDeviceListParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the get device list params
func (o *GetDeviceListParams) SetSerialNumber(serialNumber []string) {
	o.SerialNumber = serialNumber
}

// WithSeries adds the series to the get device list params
func (o *GetDeviceListParams) WithSeries(series []string) *GetDeviceListParams {
	o.SetSeries(series)
	return o
}

// SetSeries adds the series to the get device list params
func (o *GetDeviceListParams) SetSeries(series []string) {
	o.Series = series
}

// WithSoftwareType adds the softwareType to the get device list params
func (o *GetDeviceListParams) WithSoftwareType(softwareType []string) *GetDeviceListParams {
	o.SetSoftwareType(softwareType)
	return o
}

// SetSoftwareType adds the softwareType to the get device list params
func (o *GetDeviceListParams) SetSoftwareType(softwareType []string) {
	o.SoftwareType = softwareType
}

// WithSoftwareVersion adds the softwareVersion to the get device list params
func (o *GetDeviceListParams) WithSoftwareVersion(softwareVersion []string) *GetDeviceListParams {
	o.SetSoftwareVersion(softwareVersion)
	return o
}

// SetSoftwareVersion adds the softwareVersion to the get device list params
func (o *GetDeviceListParams) SetSoftwareVersion(softwareVersion []string) {
	o.SoftwareVersion = softwareVersion
}

// WithType adds the typeVar to the get device list params
func (o *GetDeviceListParams) WithType(typeVar []string) *GetDeviceListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get device list params
func (o *GetDeviceListParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WithUpTime adds the upTime to the get device list params
func (o *GetDeviceListParams) WithUpTime(upTime []string) *GetDeviceListParams {
	o.SetUpTime(upTime)
	return o
}

// SetUpTime adds the upTime to the get device list params
func (o *GetDeviceListParams) SetUpTime(upTime []string) {
	o.UpTime = upTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAssociatedWlcIP := o.AssociatedWlcIP

	joinedAssociatedWlcIP := swag.JoinByFormat(valuesAssociatedWlcIP, "")
	// query array param associatedWlcIp
	if err := r.SetQueryParam("associatedWlcIp", joinedAssociatedWlcIP...); err != nil {
		return err
	}

	valuesCollectionInterval := o.CollectionInterval

	joinedCollectionInterval := swag.JoinByFormat(valuesCollectionInterval, "")
	// query array param collectionInterval
	if err := r.SetQueryParam("collectionInterval", joinedCollectionInterval...); err != nil {
		return err
	}

	valuesCollectionStatus := o.CollectionStatus

	joinedCollectionStatus := swag.JoinByFormat(valuesCollectionStatus, "")
	// query array param collectionStatus
	if err := r.SetQueryParam("collectionStatus", joinedCollectionStatus...); err != nil {
		return err
	}

	valuesErrorCode := o.ErrorCode

	joinedErrorCode := swag.JoinByFormat(valuesErrorCode, "")
	// query array param errorCode
	if err := r.SetQueryParam("errorCode", joinedErrorCode...); err != nil {
		return err
	}

	valuesErrorDescription := o.ErrorDescription

	joinedErrorDescription := swag.JoinByFormat(valuesErrorDescription, "")
	// query array param errorDescription
	if err := r.SetQueryParam("errorDescription", joinedErrorDescription...); err != nil {
		return err
	}

	valuesFamily := o.Family

	joinedFamily := swag.JoinByFormat(valuesFamily, "")
	// query array param family
	if err := r.SetQueryParam("family", joinedFamily...); err != nil {
		return err
	}

	valuesHostname := o.Hostname

	joinedHostname := swag.JoinByFormat(valuesHostname, "")
	// query array param hostname
	if err := r.SetQueryParam("hostname", joinedHostname...); err != nil {
		return err
	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	valuesLicenseName := o.LicenseName

	joinedLicenseName := swag.JoinByFormat(valuesLicenseName, "")
	// query array param license.name
	if err := r.SetQueryParam("license.name", joinedLicenseName...); err != nil {
		return err
	}

	valuesLicenseStatus := o.LicenseStatus

	joinedLicenseStatus := swag.JoinByFormat(valuesLicenseStatus, "")
	// query array param license.status
	if err := r.SetQueryParam("license.status", joinedLicenseStatus...); err != nil {
		return err
	}

	valuesLicenseType := o.LicenseType

	joinedLicenseType := swag.JoinByFormat(valuesLicenseType, "")
	// query array param license.type
	if err := r.SetQueryParam("license.type", joinedLicenseType...); err != nil {
		return err
	}

	valuesLocation := o.Location

	joinedLocation := swag.JoinByFormat(valuesLocation, "")
	// query array param location
	if err := r.SetQueryParam("location", joinedLocation...); err != nil {
		return err
	}

	valuesLocationName := o.LocationName

	joinedLocationName := swag.JoinByFormat(valuesLocationName, "")
	// query array param locationName
	if err := r.SetQueryParam("locationName", joinedLocationName...); err != nil {
		return err
	}

	valuesMacAddress := o.MacAddress

	joinedMacAddress := swag.JoinByFormat(valuesMacAddress, "")
	// query array param macAddress
	if err := r.SetQueryParam("macAddress", joinedMacAddress...); err != nil {
		return err
	}

	valuesManagementIPAddress := o.ManagementIPAddress

	joinedManagementIPAddress := swag.JoinByFormat(valuesManagementIPAddress, "")
	// query array param managementIpAddress
	if err := r.SetQueryParam("managementIpAddress", joinedManagementIPAddress...); err != nil {
		return err
	}

	valuesModuleEqupimenttype := o.ModuleEqupimenttype

	joinedModuleEqupimenttype := swag.JoinByFormat(valuesModuleEqupimenttype, "")
	// query array param module+equpimenttype
	if err := r.SetQueryParam("module+equpimenttype", joinedModuleEqupimenttype...); err != nil {
		return err
	}

	valuesModuleName := o.ModuleName

	joinedModuleName := swag.JoinByFormat(valuesModuleName, "")
	// query array param module+name
	if err := r.SetQueryParam("module+name", joinedModuleName...); err != nil {
		return err
	}

	valuesModuleOperationstatecode := o.ModuleOperationstatecode

	joinedModuleOperationstatecode := swag.JoinByFormat(valuesModuleOperationstatecode, "")
	// query array param module+operationstatecode
	if err := r.SetQueryParam("module+operationstatecode", joinedModuleOperationstatecode...); err != nil {
		return err
	}

	valuesModulePartnumber := o.ModulePartnumber

	joinedModulePartnumber := swag.JoinByFormat(valuesModulePartnumber, "")
	// query array param module+partnumber
	if err := r.SetQueryParam("module+partnumber", joinedModulePartnumber...); err != nil {
		return err
	}

	valuesModuleServicestate := o.ModuleServicestate

	joinedModuleServicestate := swag.JoinByFormat(valuesModuleServicestate, "")
	// query array param module+servicestate
	if err := r.SetQueryParam("module+servicestate", joinedModuleServicestate...); err != nil {
		return err
	}

	valuesModuleVendorequipmenttype := o.ModuleVendorequipmenttype

	joinedModuleVendorequipmenttype := swag.JoinByFormat(valuesModuleVendorequipmenttype, "")
	// query array param module+vendorequipmenttype
	if err := r.SetQueryParam("module+vendorequipmenttype", joinedModuleVendorequipmenttype...); err != nil {
		return err
	}

	valuesNotSyncedForMinutes := o.NotSyncedForMinutes

	joinedNotSyncedForMinutes := swag.JoinByFormat(valuesNotSyncedForMinutes, "")
	// query array param notSyncedForMinutes
	if err := r.SetQueryParam("notSyncedForMinutes", joinedNotSyncedForMinutes...); err != nil {
		return err
	}

	valuesPlatformID := o.PlatformID

	joinedPlatformID := swag.JoinByFormat(valuesPlatformID, "")
	// query array param platformId
	if err := r.SetQueryParam("platformId", joinedPlatformID...); err != nil {
		return err
	}

	valuesReachabilityStatus := o.ReachabilityStatus

	joinedReachabilityStatus := swag.JoinByFormat(valuesReachabilityStatus, "")
	// query array param reachabilityStatus
	if err := r.SetQueryParam("reachabilityStatus", joinedReachabilityStatus...); err != nil {
		return err
	}

	valuesRole := o.Role

	joinedRole := swag.JoinByFormat(valuesRole, "")
	// query array param role
	if err := r.SetQueryParam("role", joinedRole...); err != nil {
		return err
	}

	valuesSerialNumber := o.SerialNumber

	joinedSerialNumber := swag.JoinByFormat(valuesSerialNumber, "")
	// query array param serialNumber
	if err := r.SetQueryParam("serialNumber", joinedSerialNumber...); err != nil {
		return err
	}

	valuesSeries := o.Series

	joinedSeries := swag.JoinByFormat(valuesSeries, "")
	// query array param series
	if err := r.SetQueryParam("series", joinedSeries...); err != nil {
		return err
	}

	valuesSoftwareType := o.SoftwareType

	joinedSoftwareType := swag.JoinByFormat(valuesSoftwareType, "")
	// query array param softwareType
	if err := r.SetQueryParam("softwareType", joinedSoftwareType...); err != nil {
		return err
	}

	valuesSoftwareVersion := o.SoftwareVersion

	joinedSoftwareVersion := swag.JoinByFormat(valuesSoftwareVersion, "")
	// query array param softwareVersion
	if err := r.SetQueryParam("softwareVersion", joinedSoftwareVersion...); err != nil {
		return err
	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	valuesUpTime := o.UpTime

	joinedUpTime := swag.JoinByFormat(valuesUpTime, "")
	// query array param upTime
	if err := r.SetQueryParam("upTime", joinedUpTime...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
