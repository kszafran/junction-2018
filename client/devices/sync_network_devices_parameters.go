// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// NewSyncNetworkDevicesParams creates a new SyncNetworkDevicesParams object
// with the default values initialized.
func NewSyncNetworkDevicesParams() *SyncNetworkDevicesParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &SyncNetworkDevicesParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewSyncNetworkDevicesParamsWithTimeout creates a new SyncNetworkDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSyncNetworkDevicesParamsWithTimeout(timeout time.Duration) *SyncNetworkDevicesParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &SyncNetworkDevicesParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewSyncNetworkDevicesParamsWithContext creates a new SyncNetworkDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewSyncNetworkDevicesParamsWithContext(ctx context.Context) *SyncNetworkDevicesParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &SyncNetworkDevicesParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewSyncNetworkDevicesParamsWithHTTPClient creates a new SyncNetworkDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSyncNetworkDevicesParamsWithHTTPClient(client *http.Client) *SyncNetworkDevicesParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &SyncNetworkDevicesParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*SyncNetworkDevicesParams contains all the parameters to send to the API endpoint
for the sync network devices operation typically these are written to a http.Request
*/
type SyncNetworkDevicesParams struct {

	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*ForceSync
	  forceSync

	*/
	ForceSync *bool
	/*Request
	  request

	*/
	Request models.SyncDevicesRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sync network devices params
func (o *SyncNetworkDevicesParams) WithTimeout(timeout time.Duration) *SyncNetworkDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync network devices params
func (o *SyncNetworkDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sync network devices params
func (o *SyncNetworkDevicesParams) WithContext(ctx context.Context) *SyncNetworkDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync network devices params
func (o *SyncNetworkDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync network devices params
func (o *SyncNetworkDevicesParams) WithHTTPClient(client *http.Client) *SyncNetworkDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync network devices params
func (o *SyncNetworkDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the sync network devices params
func (o *SyncNetworkDevicesParams) WithContentType(contentType string) *SyncNetworkDevicesParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the sync network devices params
func (o *SyncNetworkDevicesParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithForceSync adds the forceSync to the sync network devices params
func (o *SyncNetworkDevicesParams) WithForceSync(forceSync *bool) *SyncNetworkDevicesParams {
	o.SetForceSync(forceSync)
	return o
}

// SetForceSync adds the forceSync to the sync network devices params
func (o *SyncNetworkDevicesParams) SetForceSync(forceSync *bool) {
	o.ForceSync = forceSync
}

// WithRequest adds the request to the sync network devices params
func (o *SyncNetworkDevicesParams) WithRequest(request models.SyncDevicesRequest) *SyncNetworkDevicesParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the sync network devices params
func (o *SyncNetworkDevicesParams) SetRequest(request models.SyncDevicesRequest) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *SyncNetworkDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.ForceSync != nil {

		// query param forceSync
		var qrForceSync bool
		if o.ForceSync != nil {
			qrForceSync = *o.ForceSync
		}
		qForceSync := swag.FormatBool(qrForceSync)
		if qForceSync != "" {
			if err := r.SetQueryParam("forceSync", qForceSync); err != nil {
				return err
			}
		}

	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
