// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRegisterDeviceForWSAParams creates a new RegisterDeviceForWSAParams object
// with the default values initialized.
func NewRegisterDeviceForWSAParams() *RegisterDeviceForWSAParams {
	var ()
	return &RegisterDeviceForWSAParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterDeviceForWSAParamsWithTimeout creates a new RegisterDeviceForWSAParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterDeviceForWSAParamsWithTimeout(timeout time.Duration) *RegisterDeviceForWSAParams {
	var ()
	return &RegisterDeviceForWSAParams{

		timeout: timeout,
	}
}

// NewRegisterDeviceForWSAParamsWithContext creates a new RegisterDeviceForWSAParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterDeviceForWSAParamsWithContext(ctx context.Context) *RegisterDeviceForWSAParams {
	var ()
	return &RegisterDeviceForWSAParams{

		Context: ctx,
	}
}

// NewRegisterDeviceForWSAParamsWithHTTPClient creates a new RegisterDeviceForWSAParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterDeviceForWSAParamsWithHTTPClient(client *http.Client) *RegisterDeviceForWSAParams {
	var ()
	return &RegisterDeviceForWSAParams{
		HTTPClient: client,
	}
}

/*RegisterDeviceForWSAParams contains all the parameters to send to the API endpoint
for the register device for w s a operation typically these are written to a http.Request
*/
type RegisterDeviceForWSAParams struct {

	/*Macaddress
	  Mac addres of the device

	*/
	Macaddress *string
	/*SerialNumber
	  Serial number of the device

	*/
	SerialNumber *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register device for w s a params
func (o *RegisterDeviceForWSAParams) WithTimeout(timeout time.Duration) *RegisterDeviceForWSAParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register device for w s a params
func (o *RegisterDeviceForWSAParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register device for w s a params
func (o *RegisterDeviceForWSAParams) WithContext(ctx context.Context) *RegisterDeviceForWSAParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register device for w s a params
func (o *RegisterDeviceForWSAParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register device for w s a params
func (o *RegisterDeviceForWSAParams) WithHTTPClient(client *http.Client) *RegisterDeviceForWSAParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register device for w s a params
func (o *RegisterDeviceForWSAParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMacaddress adds the macaddress to the register device for w s a params
func (o *RegisterDeviceForWSAParams) WithMacaddress(macaddress *string) *RegisterDeviceForWSAParams {
	o.SetMacaddress(macaddress)
	return o
}

// SetMacaddress adds the macaddress to the register device for w s a params
func (o *RegisterDeviceForWSAParams) SetMacaddress(macaddress *string) {
	o.Macaddress = macaddress
}

// WithSerialNumber adds the serialNumber to the register device for w s a params
func (o *RegisterDeviceForWSAParams) WithSerialNumber(serialNumber *string) *RegisterDeviceForWSAParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the register device for w s a params
func (o *RegisterDeviceForWSAParams) SetSerialNumber(serialNumber *string) {
	o.SerialNumber = serialNumber
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterDeviceForWSAParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Macaddress != nil {

		// query param macaddress
		var qrMacaddress string
		if o.Macaddress != nil {
			qrMacaddress = *o.Macaddress
		}
		qMacaddress := qrMacaddress
		if qMacaddress != "" {
			if err := r.SetQueryParam("macaddress", qMacaddress); err != nil {
				return err
			}
		}

	}

	if o.SerialNumber != nil {

		// query param serialNumber
		var qrSerialNumber string
		if o.SerialNumber != nil {
			qrSerialNumber = *o.SerialNumber
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {
			if err := r.SetQueryParam("serialNumber", qSerialNumber); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
