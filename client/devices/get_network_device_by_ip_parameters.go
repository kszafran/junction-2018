// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNetworkDeviceByIPParams creates a new GetNetworkDeviceByIPParams object
// with the default values initialized.
func NewGetNetworkDeviceByIPParams() *GetNetworkDeviceByIPParams {
	var ()
	return &GetNetworkDeviceByIPParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkDeviceByIPParamsWithTimeout creates a new GetNetworkDeviceByIPParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkDeviceByIPParamsWithTimeout(timeout time.Duration) *GetNetworkDeviceByIPParams {
	var ()
	return &GetNetworkDeviceByIPParams{

		timeout: timeout,
	}
}

// NewGetNetworkDeviceByIPParamsWithContext creates a new GetNetworkDeviceByIPParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkDeviceByIPParamsWithContext(ctx context.Context) *GetNetworkDeviceByIPParams {
	var ()
	return &GetNetworkDeviceByIPParams{

		Context: ctx,
	}
}

// NewGetNetworkDeviceByIPParamsWithHTTPClient creates a new GetNetworkDeviceByIPParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkDeviceByIPParamsWithHTTPClient(client *http.Client) *GetNetworkDeviceByIPParams {
	var ()
	return &GetNetworkDeviceByIPParams{
		HTTPClient: client,
	}
}

/*GetNetworkDeviceByIPParams contains all the parameters to send to the API endpoint
for the get network device by IP operation typically these are written to a http.Request
*/
type GetNetworkDeviceByIPParams struct {

	/*IPAddress
	  Device IP address

	*/
	IPAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) WithTimeout(timeout time.Duration) *GetNetworkDeviceByIPParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) WithContext(ctx context.Context) *GetNetworkDeviceByIPParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) WithHTTPClient(client *http.Client) *GetNetworkDeviceByIPParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIPAddress adds the iPAddress to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) WithIPAddress(iPAddress string) *GetNetworkDeviceByIPParams {
	o.SetIPAddress(iPAddress)
	return o
}

// SetIPAddress adds the ipAddress to the get network device by IP params
func (o *GetNetworkDeviceByIPParams) SetIPAddress(iPAddress string) {
	o.IPAddress = iPAddress
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkDeviceByIPParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ipAddress
	if err := r.SetPathParam("ipAddress", o.IPAddress); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
