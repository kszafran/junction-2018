// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetNetworkDeviceByIPReader is a Reader for the GetNetworkDeviceByIP structure.
type GetNetworkDeviceByIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNetworkDeviceByIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNetworkDeviceByIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetNetworkDeviceByIPNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetNetworkDeviceByIPPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNetworkDeviceByIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetNetworkDeviceByIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetNetworkDeviceByIPForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNetworkDeviceByIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetNetworkDeviceByIPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetNetworkDeviceByIPUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetNetworkDeviceByIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetNetworkDeviceByIPNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetNetworkDeviceByIPServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetNetworkDeviceByIPGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNetworkDeviceByIPOK creates a GetNetworkDeviceByIPOK with default headers values
func NewGetNetworkDeviceByIPOK() *GetNetworkDeviceByIPOK {
	return &GetNetworkDeviceByIPOK{}
}

/*GetNetworkDeviceByIPOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetNetworkDeviceByIPOK struct {
	Payload *models.NetworkDeviceResult
}

func (o *GetNetworkDeviceByIPOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpOK  %+v", 200, o.Payload)
}

func (o *GetNetworkDeviceByIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NetworkDeviceResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNetworkDeviceByIPNoContent creates a GetNetworkDeviceByIPNoContent with default headers values
func NewGetNetworkDeviceByIPNoContent() *GetNetworkDeviceByIPNoContent {
	return &GetNetworkDeviceByIPNoContent{}
}

/*GetNetworkDeviceByIPNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetNetworkDeviceByIPNoContent struct {
}

func (o *GetNetworkDeviceByIPNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpNoContent ", 204)
}

func (o *GetNetworkDeviceByIPNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPPartialContent creates a GetNetworkDeviceByIPPartialContent with default headers values
func NewGetNetworkDeviceByIPPartialContent() *GetNetworkDeviceByIPPartialContent {
	return &GetNetworkDeviceByIPPartialContent{}
}

/*GetNetworkDeviceByIPPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetNetworkDeviceByIPPartialContent struct {
}

func (o *GetNetworkDeviceByIPPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpPartialContent ", 206)
}

func (o *GetNetworkDeviceByIPPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPBadRequest creates a GetNetworkDeviceByIPBadRequest with default headers values
func NewGetNetworkDeviceByIPBadRequest() *GetNetworkDeviceByIPBadRequest {
	return &GetNetworkDeviceByIPBadRequest{}
}

/*GetNetworkDeviceByIPBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetNetworkDeviceByIPBadRequest struct {
}

func (o *GetNetworkDeviceByIPBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpBadRequest ", 400)
}

func (o *GetNetworkDeviceByIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPUnauthorized creates a GetNetworkDeviceByIPUnauthorized with default headers values
func NewGetNetworkDeviceByIPUnauthorized() *GetNetworkDeviceByIPUnauthorized {
	return &GetNetworkDeviceByIPUnauthorized{}
}

/*GetNetworkDeviceByIPUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetNetworkDeviceByIPUnauthorized struct {
}

func (o *GetNetworkDeviceByIPUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpUnauthorized ", 401)
}

func (o *GetNetworkDeviceByIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPForbidden creates a GetNetworkDeviceByIPForbidden with default headers values
func NewGetNetworkDeviceByIPForbidden() *GetNetworkDeviceByIPForbidden {
	return &GetNetworkDeviceByIPForbidden{}
}

/*GetNetworkDeviceByIPForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetNetworkDeviceByIPForbidden struct {
}

func (o *GetNetworkDeviceByIPForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpForbidden ", 403)
}

func (o *GetNetworkDeviceByIPForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPNotFound creates a GetNetworkDeviceByIPNotFound with default headers values
func NewGetNetworkDeviceByIPNotFound() *GetNetworkDeviceByIPNotFound {
	return &GetNetworkDeviceByIPNotFound{}
}

/*GetNetworkDeviceByIPNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type GetNetworkDeviceByIPNotFound struct {
}

func (o *GetNetworkDeviceByIPNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpNotFound ", 404)
}

func (o *GetNetworkDeviceByIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPConflict creates a GetNetworkDeviceByIPConflict with default headers values
func NewGetNetworkDeviceByIPConflict() *GetNetworkDeviceByIPConflict {
	return &GetNetworkDeviceByIPConflict{}
}

/*GetNetworkDeviceByIPConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetNetworkDeviceByIPConflict struct {
}

func (o *GetNetworkDeviceByIPConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpConflict ", 409)
}

func (o *GetNetworkDeviceByIPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPUnsupportedMediaType creates a GetNetworkDeviceByIPUnsupportedMediaType with default headers values
func NewGetNetworkDeviceByIPUnsupportedMediaType() *GetNetworkDeviceByIPUnsupportedMediaType {
	return &GetNetworkDeviceByIPUnsupportedMediaType{}
}

/*GetNetworkDeviceByIPUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetNetworkDeviceByIPUnsupportedMediaType struct {
}

func (o *GetNetworkDeviceByIPUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpUnsupportedMediaType ", 415)
}

func (o *GetNetworkDeviceByIPUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPInternalServerError creates a GetNetworkDeviceByIPInternalServerError with default headers values
func NewGetNetworkDeviceByIPInternalServerError() *GetNetworkDeviceByIPInternalServerError {
	return &GetNetworkDeviceByIPInternalServerError{}
}

/*GetNetworkDeviceByIPInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetNetworkDeviceByIPInternalServerError struct {
}

func (o *GetNetworkDeviceByIPInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpInternalServerError ", 500)
}

func (o *GetNetworkDeviceByIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPNotImplemented creates a GetNetworkDeviceByIPNotImplemented with default headers values
func NewGetNetworkDeviceByIPNotImplemented() *GetNetworkDeviceByIPNotImplemented {
	return &GetNetworkDeviceByIPNotImplemented{}
}

/*GetNetworkDeviceByIPNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetNetworkDeviceByIPNotImplemented struct {
}

func (o *GetNetworkDeviceByIPNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpNotImplemented ", 501)
}

func (o *GetNetworkDeviceByIPNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPServiceUnavailable creates a GetNetworkDeviceByIPServiceUnavailable with default headers values
func NewGetNetworkDeviceByIPServiceUnavailable() *GetNetworkDeviceByIPServiceUnavailable {
	return &GetNetworkDeviceByIPServiceUnavailable{}
}

/*GetNetworkDeviceByIPServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetNetworkDeviceByIPServiceUnavailable struct {
}

func (o *GetNetworkDeviceByIPServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpServiceUnavailable ", 503)
}

func (o *GetNetworkDeviceByIPServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNetworkDeviceByIPGatewayTimeout creates a GetNetworkDeviceByIPGatewayTimeout with default headers values
func NewGetNetworkDeviceByIPGatewayTimeout() *GetNetworkDeviceByIPGatewayTimeout {
	return &GetNetworkDeviceByIPGatewayTimeout{}
}

/*GetNetworkDeviceByIPGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetNetworkDeviceByIPGatewayTimeout struct {
}

func (o *GetNetworkDeviceByIPGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/ip-address/{ipAddress}][%d] getNetworkDeviceByIpGatewayTimeout ", 504)
}

func (o *GetNetworkDeviceByIPGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
