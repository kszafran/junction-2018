// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRetrievesAllNetworkDevicesParams creates a new RetrievesAllNetworkDevicesParams object
// with the default values initialized.
func NewRetrievesAllNetworkDevicesParams() *RetrievesAllNetworkDevicesParams {
	var ()
	return &RetrievesAllNetworkDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRetrievesAllNetworkDevicesParamsWithTimeout creates a new RetrievesAllNetworkDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRetrievesAllNetworkDevicesParamsWithTimeout(timeout time.Duration) *RetrievesAllNetworkDevicesParams {
	var ()
	return &RetrievesAllNetworkDevicesParams{

		timeout: timeout,
	}
}

// NewRetrievesAllNetworkDevicesParamsWithContext creates a new RetrievesAllNetworkDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewRetrievesAllNetworkDevicesParamsWithContext(ctx context.Context) *RetrievesAllNetworkDevicesParams {
	var ()
	return &RetrievesAllNetworkDevicesParams{

		Context: ctx,
	}
}

// NewRetrievesAllNetworkDevicesParamsWithHTTPClient creates a new RetrievesAllNetworkDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRetrievesAllNetworkDevicesParamsWithHTTPClient(client *http.Client) *RetrievesAllNetworkDevicesParams {
	var ()
	return &RetrievesAllNetworkDevicesParams{
		HTTPClient: client,
	}
}

/*RetrievesAllNetworkDevicesParams contains all the parameters to send to the API endpoint
for the retrieves all network devices operation typically these are written to a http.Request
*/
type RetrievesAllNetworkDevicesParams struct {

	/*AssociatedWlcIP
	  associatedWlcIp

	*/
	AssociatedWlcIP *string
	/*CollectionInterval
	  collectionInterval

	*/
	CollectionInterval *string
	/*CollectionStatus
	  collectionStatus

	*/
	CollectionStatus *string
	/*ErrorCode
	  errorCode

	*/
	ErrorCode *string
	/*Family
	  family

	*/
	Family *string
	/*Hostname
	  hostname

	*/
	Hostname *string
	/*Limit
	  limit

	*/
	Limit *string
	/*MacAddress
	  macAddress

	*/
	MacAddress *string
	/*ManagementIPAddress
	  managementIpAddress

	*/
	ManagementIPAddress *string
	/*Offset
	  offset

	*/
	Offset *string
	/*PlatformID
	  platformId

	*/
	PlatformID *string
	/*ReachabilityFailureReason
	  reachabilityFailureReason

	*/
	ReachabilityFailureReason *string
	/*ReachabilityStatus
	  reachabilityStatus

	*/
	ReachabilityStatus *string
	/*Role
	  role

	*/
	Role *string
	/*RoleSource
	  roleSource

	*/
	RoleSource *string
	/*SerialNumber
	  serialNumber

	*/
	SerialNumber *string
	/*Series
	  series

	*/
	Series *string
	/*SoftwareType
	  softwareType

	*/
	SoftwareType *string
	/*SoftwareVersion
	  softwareVersion

	*/
	SoftwareVersion *string
	/*Type
	  type

	*/
	Type *string
	/*UpTime
	  upTime

	*/
	UpTime *string
	/*VrfName
	  vrfName

	*/
	VrfName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithTimeout(timeout time.Duration) *RetrievesAllNetworkDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithContext(ctx context.Context) *RetrievesAllNetworkDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithHTTPClient(client *http.Client) *RetrievesAllNetworkDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssociatedWlcIP adds the associatedWlcIP to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithAssociatedWlcIP(associatedWlcIP *string) *RetrievesAllNetworkDevicesParams {
	o.SetAssociatedWlcIP(associatedWlcIP)
	return o
}

// SetAssociatedWlcIP adds the associatedWlcIp to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetAssociatedWlcIP(associatedWlcIP *string) {
	o.AssociatedWlcIP = associatedWlcIP
}

// WithCollectionInterval adds the collectionInterval to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithCollectionInterval(collectionInterval *string) *RetrievesAllNetworkDevicesParams {
	o.SetCollectionInterval(collectionInterval)
	return o
}

// SetCollectionInterval adds the collectionInterval to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetCollectionInterval(collectionInterval *string) {
	o.CollectionInterval = collectionInterval
}

// WithCollectionStatus adds the collectionStatus to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithCollectionStatus(collectionStatus *string) *RetrievesAllNetworkDevicesParams {
	o.SetCollectionStatus(collectionStatus)
	return o
}

// SetCollectionStatus adds the collectionStatus to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetCollectionStatus(collectionStatus *string) {
	o.CollectionStatus = collectionStatus
}

// WithErrorCode adds the errorCode to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithErrorCode(errorCode *string) *RetrievesAllNetworkDevicesParams {
	o.SetErrorCode(errorCode)
	return o
}

// SetErrorCode adds the errorCode to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetErrorCode(errorCode *string) {
	o.ErrorCode = errorCode
}

// WithFamily adds the family to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithFamily(family *string) *RetrievesAllNetworkDevicesParams {
	o.SetFamily(family)
	return o
}

// SetFamily adds the family to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetFamily(family *string) {
	o.Family = family
}

// WithHostname adds the hostname to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithHostname(hostname *string) *RetrievesAllNetworkDevicesParams {
	o.SetHostname(hostname)
	return o
}

// SetHostname adds the hostname to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetHostname(hostname *string) {
	o.Hostname = hostname
}

// WithLimit adds the limit to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithLimit(limit *string) *RetrievesAllNetworkDevicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithMacAddress adds the macAddress to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithMacAddress(macAddress *string) *RetrievesAllNetworkDevicesParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetMacAddress(macAddress *string) {
	o.MacAddress = macAddress
}

// WithManagementIPAddress adds the managementIPAddress to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithManagementIPAddress(managementIPAddress *string) *RetrievesAllNetworkDevicesParams {
	o.SetManagementIPAddress(managementIPAddress)
	return o
}

// SetManagementIPAddress adds the managementIpAddress to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetManagementIPAddress(managementIPAddress *string) {
	o.ManagementIPAddress = managementIPAddress
}

// WithOffset adds the offset to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithOffset(offset *string) *RetrievesAllNetworkDevicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithPlatformID adds the platformID to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithPlatformID(platformID *string) *RetrievesAllNetworkDevicesParams {
	o.SetPlatformID(platformID)
	return o
}

// SetPlatformID adds the platformId to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetPlatformID(platformID *string) {
	o.PlatformID = platformID
}

// WithReachabilityFailureReason adds the reachabilityFailureReason to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithReachabilityFailureReason(reachabilityFailureReason *string) *RetrievesAllNetworkDevicesParams {
	o.SetReachabilityFailureReason(reachabilityFailureReason)
	return o
}

// SetReachabilityFailureReason adds the reachabilityFailureReason to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetReachabilityFailureReason(reachabilityFailureReason *string) {
	o.ReachabilityFailureReason = reachabilityFailureReason
}

// WithReachabilityStatus adds the reachabilityStatus to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithReachabilityStatus(reachabilityStatus *string) *RetrievesAllNetworkDevicesParams {
	o.SetReachabilityStatus(reachabilityStatus)
	return o
}

// SetReachabilityStatus adds the reachabilityStatus to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetReachabilityStatus(reachabilityStatus *string) {
	o.ReachabilityStatus = reachabilityStatus
}

// WithRole adds the role to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithRole(role *string) *RetrievesAllNetworkDevicesParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleSource adds the roleSource to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithRoleSource(roleSource *string) *RetrievesAllNetworkDevicesParams {
	o.SetRoleSource(roleSource)
	return o
}

// SetRoleSource adds the roleSource to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetRoleSource(roleSource *string) {
	o.RoleSource = roleSource
}

// WithSerialNumber adds the serialNumber to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithSerialNumber(serialNumber *string) *RetrievesAllNetworkDevicesParams {
	o.SetSerialNumber(serialNumber)
	return o
}

// SetSerialNumber adds the serialNumber to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetSerialNumber(serialNumber *string) {
	o.SerialNumber = serialNumber
}

// WithSeries adds the series to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithSeries(series *string) *RetrievesAllNetworkDevicesParams {
	o.SetSeries(series)
	return o
}

// SetSeries adds the series to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetSeries(series *string) {
	o.Series = series
}

// WithSoftwareType adds the softwareType to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithSoftwareType(softwareType *string) *RetrievesAllNetworkDevicesParams {
	o.SetSoftwareType(softwareType)
	return o
}

// SetSoftwareType adds the softwareType to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetSoftwareType(softwareType *string) {
	o.SoftwareType = softwareType
}

// WithSoftwareVersion adds the softwareVersion to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithSoftwareVersion(softwareVersion *string) *RetrievesAllNetworkDevicesParams {
	o.SetSoftwareVersion(softwareVersion)
	return o
}

// SetSoftwareVersion adds the softwareVersion to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetSoftwareVersion(softwareVersion *string) {
	o.SoftwareVersion = softwareVersion
}

// WithType adds the typeVar to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithType(typeVar *string) *RetrievesAllNetworkDevicesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUpTime adds the upTime to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithUpTime(upTime *string) *RetrievesAllNetworkDevicesParams {
	o.SetUpTime(upTime)
	return o
}

// SetUpTime adds the upTime to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetUpTime(upTime *string) {
	o.UpTime = upTime
}

// WithVrfName adds the vrfName to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) WithVrfName(vrfName *string) *RetrievesAllNetworkDevicesParams {
	o.SetVrfName(vrfName)
	return o
}

// SetVrfName adds the vrfName to the retrieves all network devices params
func (o *RetrievesAllNetworkDevicesParams) SetVrfName(vrfName *string) {
	o.VrfName = vrfName
}

// WriteToRequest writes these params to a swagger request
func (o *RetrievesAllNetworkDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssociatedWlcIP != nil {

		// query param associatedWlcIp
		var qrAssociatedWlcIP string
		if o.AssociatedWlcIP != nil {
			qrAssociatedWlcIP = *o.AssociatedWlcIP
		}
		qAssociatedWlcIP := qrAssociatedWlcIP
		if qAssociatedWlcIP != "" {
			if err := r.SetQueryParam("associatedWlcIp", qAssociatedWlcIP); err != nil {
				return err
			}
		}

	}

	if o.CollectionInterval != nil {

		// query param collectionInterval
		var qrCollectionInterval string
		if o.CollectionInterval != nil {
			qrCollectionInterval = *o.CollectionInterval
		}
		qCollectionInterval := qrCollectionInterval
		if qCollectionInterval != "" {
			if err := r.SetQueryParam("collectionInterval", qCollectionInterval); err != nil {
				return err
			}
		}

	}

	if o.CollectionStatus != nil {

		// query param collectionStatus
		var qrCollectionStatus string
		if o.CollectionStatus != nil {
			qrCollectionStatus = *o.CollectionStatus
		}
		qCollectionStatus := qrCollectionStatus
		if qCollectionStatus != "" {
			if err := r.SetQueryParam("collectionStatus", qCollectionStatus); err != nil {
				return err
			}
		}

	}

	if o.ErrorCode != nil {

		// query param errorCode
		var qrErrorCode string
		if o.ErrorCode != nil {
			qrErrorCode = *o.ErrorCode
		}
		qErrorCode := qrErrorCode
		if qErrorCode != "" {
			if err := r.SetQueryParam("errorCode", qErrorCode); err != nil {
				return err
			}
		}

	}

	if o.Family != nil {

		// query param family
		var qrFamily string
		if o.Family != nil {
			qrFamily = *o.Family
		}
		qFamily := qrFamily
		if qFamily != "" {
			if err := r.SetQueryParam("family", qFamily); err != nil {
				return err
			}
		}

	}

	if o.Hostname != nil {

		// query param hostname
		var qrHostname string
		if o.Hostname != nil {
			qrHostname = *o.Hostname
		}
		qHostname := qrHostname
		if qHostname != "" {
			if err := r.SetQueryParam("hostname", qHostname); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MacAddress != nil {

		// query param macAddress
		var qrMacAddress string
		if o.MacAddress != nil {
			qrMacAddress = *o.MacAddress
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {
			if err := r.SetQueryParam("macAddress", qMacAddress); err != nil {
				return err
			}
		}

	}

	if o.ManagementIPAddress != nil {

		// query param managementIpAddress
		var qrManagementIPAddress string
		if o.ManagementIPAddress != nil {
			qrManagementIPAddress = *o.ManagementIPAddress
		}
		qManagementIPAddress := qrManagementIPAddress
		if qManagementIPAddress != "" {
			if err := r.SetQueryParam("managementIpAddress", qManagementIPAddress); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.PlatformID != nil {

		// query param platformId
		var qrPlatformID string
		if o.PlatformID != nil {
			qrPlatformID = *o.PlatformID
		}
		qPlatformID := qrPlatformID
		if qPlatformID != "" {
			if err := r.SetQueryParam("platformId", qPlatformID); err != nil {
				return err
			}
		}

	}

	if o.ReachabilityFailureReason != nil {

		// query param reachabilityFailureReason
		var qrReachabilityFailureReason string
		if o.ReachabilityFailureReason != nil {
			qrReachabilityFailureReason = *o.ReachabilityFailureReason
		}
		qReachabilityFailureReason := qrReachabilityFailureReason
		if qReachabilityFailureReason != "" {
			if err := r.SetQueryParam("reachabilityFailureReason", qReachabilityFailureReason); err != nil {
				return err
			}
		}

	}

	if o.ReachabilityStatus != nil {

		// query param reachabilityStatus
		var qrReachabilityStatus string
		if o.ReachabilityStatus != nil {
			qrReachabilityStatus = *o.ReachabilityStatus
		}
		qReachabilityStatus := qrReachabilityStatus
		if qReachabilityStatus != "" {
			if err := r.SetQueryParam("reachabilityStatus", qReachabilityStatus); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleSource != nil {

		// query param roleSource
		var qrRoleSource string
		if o.RoleSource != nil {
			qrRoleSource = *o.RoleSource
		}
		qRoleSource := qrRoleSource
		if qRoleSource != "" {
			if err := r.SetQueryParam("roleSource", qRoleSource); err != nil {
				return err
			}
		}

	}

	if o.SerialNumber != nil {

		// query param serialNumber
		var qrSerialNumber string
		if o.SerialNumber != nil {
			qrSerialNumber = *o.SerialNumber
		}
		qSerialNumber := qrSerialNumber
		if qSerialNumber != "" {
			if err := r.SetQueryParam("serialNumber", qSerialNumber); err != nil {
				return err
			}
		}

	}

	if o.Series != nil {

		// query param series
		var qrSeries string
		if o.Series != nil {
			qrSeries = *o.Series
		}
		qSeries := qrSeries
		if qSeries != "" {
			if err := r.SetQueryParam("series", qSeries); err != nil {
				return err
			}
		}

	}

	if o.SoftwareType != nil {

		// query param softwareType
		var qrSoftwareType string
		if o.SoftwareType != nil {
			qrSoftwareType = *o.SoftwareType
		}
		qSoftwareType := qrSoftwareType
		if qSoftwareType != "" {
			if err := r.SetQueryParam("softwareType", qSoftwareType); err != nil {
				return err
			}
		}

	}

	if o.SoftwareVersion != nil {

		// query param softwareVersion
		var qrSoftwareVersion string
		if o.SoftwareVersion != nil {
			qrSoftwareVersion = *o.SoftwareVersion
		}
		qSoftwareVersion := qrSoftwareVersion
		if qSoftwareVersion != "" {
			if err := r.SetQueryParam("softwareVersion", qSoftwareVersion); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.UpTime != nil {

		// query param upTime
		var qrUpTime string
		if o.UpTime != nil {
			qrUpTime = *o.UpTime
		}
		qUpTime := qrUpTime
		if qUpTime != "" {
			if err := r.SetQueryParam("upTime", qUpTime); err != nil {
				return err
			}
		}

	}

	if o.VrfName != nil {

		// query param vrfName
		var qrVrfName string
		if o.VrfName != nil {
			qrVrfName = *o.VrfName
		}
		qVrfName := qrVrfName
		if qVrfName != "" {
			if err := r.SetQueryParam("vrfName", qVrfName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
