// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFunctionalCapabilityForDevicesParams creates a new GetFunctionalCapabilityForDevicesParams object
// with the default values initialized.
func NewGetFunctionalCapabilityForDevicesParams() *GetFunctionalCapabilityForDevicesParams {
	var ()
	return &GetFunctionalCapabilityForDevicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFunctionalCapabilityForDevicesParamsWithTimeout creates a new GetFunctionalCapabilityForDevicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFunctionalCapabilityForDevicesParamsWithTimeout(timeout time.Duration) *GetFunctionalCapabilityForDevicesParams {
	var ()
	return &GetFunctionalCapabilityForDevicesParams{

		timeout: timeout,
	}
}

// NewGetFunctionalCapabilityForDevicesParamsWithContext creates a new GetFunctionalCapabilityForDevicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFunctionalCapabilityForDevicesParamsWithContext(ctx context.Context) *GetFunctionalCapabilityForDevicesParams {
	var ()
	return &GetFunctionalCapabilityForDevicesParams{

		Context: ctx,
	}
}

// NewGetFunctionalCapabilityForDevicesParamsWithHTTPClient creates a new GetFunctionalCapabilityForDevicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFunctionalCapabilityForDevicesParamsWithHTTPClient(client *http.Client) *GetFunctionalCapabilityForDevicesParams {
	var ()
	return &GetFunctionalCapabilityForDevicesParams{
		HTTPClient: client,
	}
}

/*GetFunctionalCapabilityForDevicesParams contains all the parameters to send to the API endpoint
for the get functional capability for devices operation typically these are written to a http.Request
*/
type GetFunctionalCapabilityForDevicesParams struct {

	/*DeviceID
	  Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.

	*/
	DeviceID *string
	/*FunctionName
	  functionName

	*/
	FunctionName []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) WithTimeout(timeout time.Duration) *GetFunctionalCapabilityForDevicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) WithContext(ctx context.Context) *GetFunctionalCapabilityForDevicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) WithHTTPClient(client *http.Client) *GetFunctionalCapabilityForDevicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) WithDeviceID(deviceID *string) *GetFunctionalCapabilityForDevicesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithFunctionName adds the functionName to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) WithFunctionName(functionName []string) *GetFunctionalCapabilityForDevicesParams {
	o.SetFunctionName(functionName)
	return o
}

// SetFunctionName adds the functionName to the get functional capability for devices params
func (o *GetFunctionalCapabilityForDevicesParams) SetFunctionName(functionName []string) {
	o.FunctionName = functionName
}

// WriteToRequest writes these params to a swagger request
func (o *GetFunctionalCapabilityForDevicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeviceID != nil {

		// query param deviceId
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("deviceId", qDeviceID); err != nil {
				return err
			}
		}

	}

	valuesFunctionName := o.FunctionName

	joinedFunctionName := swag.JoinByFormat(valuesFunctionName, "")
	// query array param functionName
	if err := r.SetQueryParam("functionName", joinedFunctionName...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
