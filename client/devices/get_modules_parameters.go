// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetModulesParams creates a new GetModulesParams object
// with the default values initialized.
func NewGetModulesParams() *GetModulesParams {
	var ()
	return &GetModulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetModulesParamsWithTimeout creates a new GetModulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetModulesParamsWithTimeout(timeout time.Duration) *GetModulesParams {
	var ()
	return &GetModulesParams{

		timeout: timeout,
	}
}

// NewGetModulesParamsWithContext creates a new GetModulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetModulesParamsWithContext(ctx context.Context) *GetModulesParams {
	var ()
	return &GetModulesParams{

		Context: ctx,
	}
}

// NewGetModulesParamsWithHTTPClient creates a new GetModulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetModulesParamsWithHTTPClient(client *http.Client) *GetModulesParams {
	var ()
	return &GetModulesParams{
		HTTPClient: client,
	}
}

/*GetModulesParams contains all the parameters to send to the API endpoint
for the get modules operation typically these are written to a http.Request
*/
type GetModulesParams struct {

	/*DeviceID
	  deviceId

	*/
	DeviceID string
	/*Limit
	  limit

	*/
	Limit *string
	/*NameList
	  nameList

	*/
	NameList []string
	/*Offset
	  offset

	*/
	Offset *string
	/*OperationalStateCodeList
	  operationalStateCodeList

	*/
	OperationalStateCodeList []string
	/*PartNumberList
	  partNumberList

	*/
	PartNumberList []string
	/*VendorEquipmentTypeList
	  vendorEquipmentTypeList

	*/
	VendorEquipmentTypeList []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get modules params
func (o *GetModulesParams) WithTimeout(timeout time.Duration) *GetModulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get modules params
func (o *GetModulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get modules params
func (o *GetModulesParams) WithContext(ctx context.Context) *GetModulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get modules params
func (o *GetModulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get modules params
func (o *GetModulesParams) WithHTTPClient(client *http.Client) *GetModulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get modules params
func (o *GetModulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get modules params
func (o *GetModulesParams) WithDeviceID(deviceID string) *GetModulesParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get modules params
func (o *GetModulesParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithLimit adds the limit to the get modules params
func (o *GetModulesParams) WithLimit(limit *string) *GetModulesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get modules params
func (o *GetModulesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNameList adds the nameList to the get modules params
func (o *GetModulesParams) WithNameList(nameList []string) *GetModulesParams {
	o.SetNameList(nameList)
	return o
}

// SetNameList adds the nameList to the get modules params
func (o *GetModulesParams) SetNameList(nameList []string) {
	o.NameList = nameList
}

// WithOffset adds the offset to the get modules params
func (o *GetModulesParams) WithOffset(offset *string) *GetModulesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get modules params
func (o *GetModulesParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOperationalStateCodeList adds the operationalStateCodeList to the get modules params
func (o *GetModulesParams) WithOperationalStateCodeList(operationalStateCodeList []string) *GetModulesParams {
	o.SetOperationalStateCodeList(operationalStateCodeList)
	return o
}

// SetOperationalStateCodeList adds the operationalStateCodeList to the get modules params
func (o *GetModulesParams) SetOperationalStateCodeList(operationalStateCodeList []string) {
	o.OperationalStateCodeList = operationalStateCodeList
}

// WithPartNumberList adds the partNumberList to the get modules params
func (o *GetModulesParams) WithPartNumberList(partNumberList []string) *GetModulesParams {
	o.SetPartNumberList(partNumberList)
	return o
}

// SetPartNumberList adds the partNumberList to the get modules params
func (o *GetModulesParams) SetPartNumberList(partNumberList []string) {
	o.PartNumberList = partNumberList
}

// WithVendorEquipmentTypeList adds the vendorEquipmentTypeList to the get modules params
func (o *GetModulesParams) WithVendorEquipmentTypeList(vendorEquipmentTypeList []string) *GetModulesParams {
	o.SetVendorEquipmentTypeList(vendorEquipmentTypeList)
	return o
}

// SetVendorEquipmentTypeList adds the vendorEquipmentTypeList to the get modules params
func (o *GetModulesParams) SetVendorEquipmentTypeList(vendorEquipmentTypeList []string) {
	o.VendorEquipmentTypeList = vendorEquipmentTypeList
}

// WriteToRequest writes these params to a swagger request
func (o *GetModulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param deviceId
	qrDeviceID := o.DeviceID
	qDeviceID := qrDeviceID
	if qDeviceID != "" {
		if err := r.SetQueryParam("deviceId", qDeviceID); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	valuesNameList := o.NameList

	joinedNameList := swag.JoinByFormat(valuesNameList, "")
	// query array param nameList
	if err := r.SetQueryParam("nameList", joinedNameList...); err != nil {
		return err
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesOperationalStateCodeList := o.OperationalStateCodeList

	joinedOperationalStateCodeList := swag.JoinByFormat(valuesOperationalStateCodeList, "")
	// query array param operationalStateCodeList
	if err := r.SetQueryParam("operationalStateCodeList", joinedOperationalStateCodeList...); err != nil {
		return err
	}

	valuesPartNumberList := o.PartNumberList

	joinedPartNumberList := swag.JoinByFormat(valuesPartNumberList, "")
	// query array param partNumberList
	if err := r.SetQueryParam("partNumberList", joinedPartNumberList...); err != nil {
		return err
	}

	valuesVendorEquipmentTypeList := o.VendorEquipmentTypeList

	joinedVendorEquipmentTypeList := swag.JoinByFormat(valuesVendorEquipmentTypeList, "")
	// query array param vendorEquipmentTypeList
	if err := r.SetQueryParam("vendorEquipmentTypeList", joinedVendorEquipmentTypeList...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
