// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetPollingIntervalByIDReader is a Reader for the GetPollingIntervalByID structure.
type GetPollingIntervalByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPollingIntervalByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPollingIntervalByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetPollingIntervalByIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetPollingIntervalByIDPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPollingIntervalByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPollingIntervalByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetPollingIntervalByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPollingIntervalByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetPollingIntervalByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetPollingIntervalByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPollingIntervalByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetPollingIntervalByIDNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetPollingIntervalByIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetPollingIntervalByIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPollingIntervalByIDOK creates a GetPollingIntervalByIDOK with default headers values
func NewGetPollingIntervalByIDOK() *GetPollingIntervalByIDOK {
	return &GetPollingIntervalByIDOK{}
}

/*GetPollingIntervalByIDOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetPollingIntervalByIDOK struct {
	Payload *models.CountResult
}

func (o *GetPollingIntervalByIDOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdOK  %+v", 200, o.Payload)
}

func (o *GetPollingIntervalByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CountResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPollingIntervalByIDNoContent creates a GetPollingIntervalByIDNoContent with default headers values
func NewGetPollingIntervalByIDNoContent() *GetPollingIntervalByIDNoContent {
	return &GetPollingIntervalByIDNoContent{}
}

/*GetPollingIntervalByIDNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetPollingIntervalByIDNoContent struct {
}

func (o *GetPollingIntervalByIDNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdNoContent ", 204)
}

func (o *GetPollingIntervalByIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDPartialContent creates a GetPollingIntervalByIDPartialContent with default headers values
func NewGetPollingIntervalByIDPartialContent() *GetPollingIntervalByIDPartialContent {
	return &GetPollingIntervalByIDPartialContent{}
}

/*GetPollingIntervalByIDPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetPollingIntervalByIDPartialContent struct {
}

func (o *GetPollingIntervalByIDPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdPartialContent ", 206)
}

func (o *GetPollingIntervalByIDPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDBadRequest creates a GetPollingIntervalByIDBadRequest with default headers values
func NewGetPollingIntervalByIDBadRequest() *GetPollingIntervalByIDBadRequest {
	return &GetPollingIntervalByIDBadRequest{}
}

/*GetPollingIntervalByIDBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetPollingIntervalByIDBadRequest struct {
}

func (o *GetPollingIntervalByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdBadRequest ", 400)
}

func (o *GetPollingIntervalByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDUnauthorized creates a GetPollingIntervalByIDUnauthorized with default headers values
func NewGetPollingIntervalByIDUnauthorized() *GetPollingIntervalByIDUnauthorized {
	return &GetPollingIntervalByIDUnauthorized{}
}

/*GetPollingIntervalByIDUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetPollingIntervalByIDUnauthorized struct {
}

func (o *GetPollingIntervalByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdUnauthorized ", 401)
}

func (o *GetPollingIntervalByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDForbidden creates a GetPollingIntervalByIDForbidden with default headers values
func NewGetPollingIntervalByIDForbidden() *GetPollingIntervalByIDForbidden {
	return &GetPollingIntervalByIDForbidden{}
}

/*GetPollingIntervalByIDForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetPollingIntervalByIDForbidden struct {
}

func (o *GetPollingIntervalByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdForbidden ", 403)
}

func (o *GetPollingIntervalByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDNotFound creates a GetPollingIntervalByIDNotFound with default headers values
func NewGetPollingIntervalByIDNotFound() *GetPollingIntervalByIDNotFound {
	return &GetPollingIntervalByIDNotFound{}
}

/*GetPollingIntervalByIDNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type GetPollingIntervalByIDNotFound struct {
}

func (o *GetPollingIntervalByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdNotFound ", 404)
}

func (o *GetPollingIntervalByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDConflict creates a GetPollingIntervalByIDConflict with default headers values
func NewGetPollingIntervalByIDConflict() *GetPollingIntervalByIDConflict {
	return &GetPollingIntervalByIDConflict{}
}

/*GetPollingIntervalByIDConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetPollingIntervalByIDConflict struct {
}

func (o *GetPollingIntervalByIDConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdConflict ", 409)
}

func (o *GetPollingIntervalByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDUnsupportedMediaType creates a GetPollingIntervalByIDUnsupportedMediaType with default headers values
func NewGetPollingIntervalByIDUnsupportedMediaType() *GetPollingIntervalByIDUnsupportedMediaType {
	return &GetPollingIntervalByIDUnsupportedMediaType{}
}

/*GetPollingIntervalByIDUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetPollingIntervalByIDUnsupportedMediaType struct {
}

func (o *GetPollingIntervalByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdUnsupportedMediaType ", 415)
}

func (o *GetPollingIntervalByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDInternalServerError creates a GetPollingIntervalByIDInternalServerError with default headers values
func NewGetPollingIntervalByIDInternalServerError() *GetPollingIntervalByIDInternalServerError {
	return &GetPollingIntervalByIDInternalServerError{}
}

/*GetPollingIntervalByIDInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetPollingIntervalByIDInternalServerError struct {
}

func (o *GetPollingIntervalByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdInternalServerError ", 500)
}

func (o *GetPollingIntervalByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDNotImplemented creates a GetPollingIntervalByIDNotImplemented with default headers values
func NewGetPollingIntervalByIDNotImplemented() *GetPollingIntervalByIDNotImplemented {
	return &GetPollingIntervalByIDNotImplemented{}
}

/*GetPollingIntervalByIDNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetPollingIntervalByIDNotImplemented struct {
}

func (o *GetPollingIntervalByIDNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdNotImplemented ", 501)
}

func (o *GetPollingIntervalByIDNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDServiceUnavailable creates a GetPollingIntervalByIDServiceUnavailable with default headers values
func NewGetPollingIntervalByIDServiceUnavailable() *GetPollingIntervalByIDServiceUnavailable {
	return &GetPollingIntervalByIDServiceUnavailable{}
}

/*GetPollingIntervalByIDServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetPollingIntervalByIDServiceUnavailable struct {
}

func (o *GetPollingIntervalByIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdServiceUnavailable ", 503)
}

func (o *GetPollingIntervalByIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalByIDGatewayTimeout creates a GetPollingIntervalByIDGatewayTimeout with default headers values
func NewGetPollingIntervalByIDGatewayTimeout() *GetPollingIntervalByIDGatewayTimeout {
	return &GetPollingIntervalByIDGatewayTimeout{}
}

/*GetPollingIntervalByIDGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetPollingIntervalByIDGatewayTimeout struct {
}

func (o *GetPollingIntervalByIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/{id}/collection-schedule][%d] getPollingIntervalByIdGatewayTimeout ", 504)
}

func (o *GetPollingIntervalByIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
