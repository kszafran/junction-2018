// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDevice adds device

Adds the device with given credential
*/
func (a *Client) AddDevice(params *AddDeviceParams) (*AddDeviceOK, *AddDeviceCreated, *AddDeviceAccepted, *AddDeviceNoContent, *AddDevicePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDevice",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/network-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDeviceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *AddDeviceOK:
		return value, nil, nil, nil, nil, nil
	case *AddDeviceCreated:
		return nil, value, nil, nil, nil, nil
	case *AddDeviceAccepted:
		return nil, nil, value, nil, nil, nil
	case *AddDeviceNoContent:
		return nil, nil, nil, value, nil, nil
	case *AddDevicePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
DeleteDeviceByID deletes device by Id

Deletes the network device for the given Id
*/
func (a *Client) DeleteDeviceByID(params *DeleteDeviceByIDParams) (*DeleteDeviceByIDOK, *DeleteDeviceByIDNoContent, *DeleteDeviceByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDeviceById",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDeviceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteDeviceByIDOK:
		return value, nil, nil, nil
	case *DeleteDeviceByIDNoContent:
		return nil, value, nil, nil
	case *DeleteDeviceByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
ExportDeviceList exports device list

Exports the selected network device to a file
*/
func (a *Client) ExportDeviceList(params *ExportDeviceListParams) (*ExportDeviceListOK, *ExportDeviceListCreated, *ExportDeviceListAccepted, *ExportDeviceListNoContent, *ExportDeviceListPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportDeviceList",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/network-device/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportDeviceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *ExportDeviceListOK:
		return value, nil, nil, nil, nil, nil
	case *ExportDeviceListCreated:
		return nil, value, nil, nil, nil, nil
	case *ExportDeviceListAccepted:
		return nil, nil, value, nil, nil, nil
	case *ExportDeviceListNoContent:
		return nil, nil, nil, value, nil, nil
	case *ExportDeviceListPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
GetAllInterfaces gets all interfaces

Returns all available interfaces. This endpoint can return a maximum of 500 interfaces
*/
func (a *Client) GetAllInterfaces(params *GetAllInterfacesParams) (*GetAllInterfacesOK, *GetAllInterfacesNoContent, *GetAllInterfacesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllInterfaces",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllInterfacesOK:
		return value, nil, nil, nil
	case *GetAllInterfacesNoContent:
		return nil, value, nil, nil
	case *GetAllInterfacesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceByID gets device by ID

Returns the network device details for the given device ID
*/
func (a *Client) GetDeviceByID(params *GetDeviceByIDParams) (*GetDeviceByIDOK, *GetDeviceByIDNoContent, *GetDeviceByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceByID",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceByIDOK:
		return value, nil, nil, nil
	case *GetDeviceByIDNoContent:
		return nil, value, nil, nil
	case *GetDeviceByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceBySerialNumber gets device by serial number

Returns the network device with given serial number
*/
func (a *Client) GetDeviceBySerialNumber(params *GetDeviceBySerialNumberParams) (*GetDeviceBySerialNumberOK, *GetDeviceBySerialNumberNoContent, *GetDeviceBySerialNumberPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceBySerialNumberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceBySerialNumber",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/serial-number/{serialNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceBySerialNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceBySerialNumberOK:
		return value, nil, nil, nil
	case *GetDeviceBySerialNumberNoContent:
		return nil, value, nil, nil
	case *GetDeviceBySerialNumberPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceConfigByID gets device config by Id

Returns the device config by specified device ID
*/
func (a *Client) GetDeviceConfigByID(params *GetDeviceConfigByIDParams) (*GetDeviceConfigByIDOK, *GetDeviceConfigByIDNoContent, *GetDeviceConfigByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceConfigByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceConfigById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{networkDeviceId}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceConfigByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceConfigByIDOK:
		return value, nil, nil, nil
	case *GetDeviceConfigByIDNoContent:
		return nil, value, nil, nil
	case *GetDeviceConfigByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceConfigCount gets device config count

Returns the count of device configs
*/
func (a *Client) GetDeviceConfigCount(params *GetDeviceConfigCountParams) (*GetDeviceConfigCountOK, *GetDeviceConfigCountNoContent, *GetDeviceConfigCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceConfigCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceConfigCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/config/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceConfigCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceConfigCountOK:
		return value, nil, nil, nil
	case *GetDeviceConfigCountNoContent:
		return nil, value, nil, nil
	case *GetDeviceConfigCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceConfigForAllDevices gets device config for all devices

Returns the config for all devices
*/
func (a *Client) GetDeviceConfigForAllDevices(params *GetDeviceConfigForAllDevicesParams) (*GetDeviceConfigForAllDevicesOK, *GetDeviceConfigForAllDevicesNoContent, *GetDeviceConfigForAllDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceConfigForAllDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceConfigForAllDevices",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceConfigForAllDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceConfigForAllDevicesOK:
		return value, nil, nil, nil
	case *GetDeviceConfigForAllDevicesNoContent:
		return nil, value, nil, nil
	case *GetDeviceConfigForAllDevicesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceCount gets device count

Returns the count of network devices based on the filter criteria by management IP address, mac address, hostname and location name
*/
func (a *Client) GetDeviceCount(params *GetDeviceCountParams) (*GetDeviceCountOK, *GetDeviceCountNoContent, *GetDeviceCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceCountOK:
		return value, nil, nil, nil
	case *GetDeviceCountNoContent:
		return nil, value, nil, nil
	case *GetDeviceCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceDetail gets device detail

Returns detailed Network Device information retrieved by Mac Address, Device Name or UUID for any given point of time.
*/
func (a *Client) GetDeviceDetail(params *GetDeviceDetailParams) (*GetDeviceDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceDetailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceDetail",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/device-detail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeviceDetailOK), nil

}

/*
GetDeviceInterfaceCount gets device interface count

Returns the count of interfaces for all devices
*/
func (a *Client) GetDeviceInterfaceCount(params *GetDeviceInterfaceCountParams) (*GetDeviceInterfaceCountOK, *GetDeviceInterfaceCountNoContent, *GetDeviceInterfaceCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInterfaceCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInterfaceCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceInterfaceCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceInterfaceCountOK:
		return value, nil, nil, nil
	case *GetDeviceInterfaceCountNoContent:
		return nil, value, nil, nil
	case *GetDeviceInterfaceCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceInterfaceCountByDeviceID gets device interface count

Returns the interface count for the given device
*/
func (a *Client) GetDeviceInterfaceCountByDeviceID(params *GetDeviceInterfaceCountByDeviceIDParams) (*GetDeviceInterfaceCountByDeviceIDOK, *GetDeviceInterfaceCountByDeviceIDNoContent, *GetDeviceInterfaceCountByDeviceIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInterfaceCountByDeviceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInterfaceCountByDeviceId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/network-device/{deviceId}/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceInterfaceCountByDeviceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceInterfaceCountByDeviceIDOK:
		return value, nil, nil, nil
	case *GetDeviceInterfaceCountByDeviceIDNoContent:
		return nil, value, nil, nil
	case *GetDeviceInterfaceCountByDeviceIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceInterfaceVLANs gets device interface v l a ns

Returns Device Interface VLANs
*/
func (a *Client) GetDeviceInterfaceVLANs(params *GetDeviceInterfaceVLANsParams) (*GetDeviceInterfaceVLANsOK, *GetDeviceInterfaceVLANsNoContent, *GetDeviceInterfaceVLANsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInterfaceVLANsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInterfaceVLANs",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}/vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceInterfaceVLANsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceInterfaceVLANsOK:
		return value, nil, nil, nil
	case *GetDeviceInterfaceVLANsNoContent:
		return nil, value, nil, nil
	case *GetDeviceInterfaceVLANsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceInterfacesBySpecifiedRange gets device interfaces by specified range

Returns the list of interfaces for the device for the specified range
*/
func (a *Client) GetDeviceInterfacesBySpecifiedRange(params *GetDeviceInterfacesBySpecifiedRangeParams) (*GetDeviceInterfacesBySpecifiedRangeOK, *GetDeviceInterfacesBySpecifiedRangeNoContent, *GetDeviceInterfacesBySpecifiedRangePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceInterfacesBySpecifiedRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceInterfacesBySpecifiedRange",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceInterfacesBySpecifiedRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceInterfacesBySpecifiedRangeOK:
		return value, nil, nil, nil
	case *GetDeviceInterfacesBySpecifiedRangeNoContent:
		return nil, value, nil, nil
	case *GetDeviceInterfacesBySpecifiedRangePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceList gets device list

Returns the count of network devices based on the fitler critieria by management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
*/
func (a *Client) GetDeviceList(params *GetDeviceListParams) (*GetDeviceListOK, *GetDeviceListNoContent, *GetDeviceListPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceList",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceListOK:
		return value, nil, nil, nil
	case *GetDeviceListNoContent:
		return nil, value, nil, nil
	case *GetDeviceListPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetDeviceSummary gets device summary

Returns brief summary of device info such as hostname, management IP address for the given device Id
*/
func (a *Client) GetDeviceSummary(params *GetDeviceSummaryParams) (*GetDeviceSummaryOK, *GetDeviceSummaryNoContent, *GetDeviceSummaryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceSummary",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}/brief",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDeviceSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetDeviceSummaryOK:
		return value, nil, nil, nil
	case *GetDeviceSummaryNoContent:
		return nil, value, nil, nil
	case *GetDeviceSummaryPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetFunctionalCapabilityByID gets functional capability by Id

Returns functional capability with given Id
*/
func (a *Client) GetFunctionalCapabilityByID(params *GetFunctionalCapabilityByIDParams) (*GetFunctionalCapabilityByIDOK, *GetFunctionalCapabilityByIDNoContent, *GetFunctionalCapabilityByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunctionalCapabilityByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFunctionalCapabilityById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/functional-capability/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFunctionalCapabilityByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetFunctionalCapabilityByIDOK:
		return value, nil, nil, nil
	case *GetFunctionalCapabilityByIDNoContent:
		return nil, value, nil, nil
	case *GetFunctionalCapabilityByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetFunctionalCapabilityForDevices gets functional capability for devices

Returns the functional-capability for given devices
*/
func (a *Client) GetFunctionalCapabilityForDevices(params *GetFunctionalCapabilityForDevicesParams) (*GetFunctionalCapabilityForDevicesOK, *GetFunctionalCapabilityForDevicesNoContent, *GetFunctionalCapabilityForDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFunctionalCapabilityForDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFunctionalCapabilityForDevices",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/functional-capability",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFunctionalCapabilityForDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetFunctionalCapabilityForDevicesOK:
		return value, nil, nil, nil
	case *GetFunctionalCapabilityForDevicesNoContent:
		return nil, value, nil, nil
	case *GetFunctionalCapabilityForDevicesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetISISInterfaces gets i s i s interfaces

Returns the interfaces that has ISIS enabled
*/
func (a *Client) GetISISInterfaces(params *GetISISInterfacesParams) (*GetISISInterfacesOK, *GetISISInterfacesNoContent, *GetISISInterfacesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetISISInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getISISInterfaces",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/isis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetISISInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetISISInterfacesOK:
		return value, nil, nil, nil
	case *GetISISInterfacesNoContent:
		return nil, value, nil, nil
	case *GetISISInterfacesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetInterfaceByIP gets interface by IP

Returns list of interfaces by specified IP address
*/
func (a *Client) GetInterfaceByIP(params *GetInterfaceByIPParams) (*GetInterfaceByIPOK, *GetInterfaceByIPNoContent, *GetInterfaceByIPPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterfaceByIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterfaceByIP",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/ip-address/{ipAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterfaceByIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetInterfaceByIPOK:
		return value, nil, nil, nil
	case *GetInterfaceByIPNoContent:
		return nil, value, nil, nil
	case *GetInterfaceByIPPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetInterfaceByID gets interface by Id

Returns the interface for the given interface ID
*/
func (a *Client) GetInterfaceByID(params *GetInterfaceByIDParams) (*GetInterfaceByIDOK, *GetInterfaceByIDNoContent, *GetInterfaceByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterfaceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterfaceById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterfaceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetInterfaceByIDOK:
		return value, nil, nil, nil
	case *GetInterfaceByIDNoContent:
		return nil, value, nil, nil
	case *GetInterfaceByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetInterfaceDetailsByDeviceIDAndInterfaceName gets interface details by device Id and interface name

Returns interface by specified device Id and interface name
*/
func (a *Client) GetInterfaceDetailsByDeviceIDAndInterfaceName(params *GetInterfaceDetailsByDeviceIDAndInterfaceNameParams) (*GetInterfaceDetailsByDeviceIDAndInterfaceNameOK, *GetInterfaceDetailsByDeviceIDAndInterfaceNameNoContent, *GetInterfaceDetailsByDeviceIDAndInterfaceNamePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterfaceDetailsByDeviceIDAndInterfaceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterfaceDetailsByDeviceIdAndInterfaceName",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/network-device/{deviceId}/interface-name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterfaceDetailsByDeviceIDAndInterfaceNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetInterfaceDetailsByDeviceIDAndInterfaceNameOK:
		return value, nil, nil, nil
	case *GetInterfaceDetailsByDeviceIDAndInterfaceNameNoContent:
		return nil, value, nil, nil
	case *GetInterfaceDetailsByDeviceIDAndInterfaceNamePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetInterfaceInfoByID gets interface info by Id

Returns list of interfaces by specified device
*/
func (a *Client) GetInterfaceInfoByID(params *GetInterfaceInfoByIDParams) (*GetInterfaceInfoByIDOK, *GetInterfaceInfoByIDNoContent, *GetInterfaceInfoByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInterfaceInfoByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInterfaceInfoById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/network-device/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInterfaceInfoByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetInterfaceInfoByIDOK:
		return value, nil, nil, nil
	case *GetInterfaceInfoByIDNoContent:
		return nil, value, nil, nil
	case *GetInterfaceInfoByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetModuleCount gets module count

Returns Module Count
*/
func (a *Client) GetModuleCount(params *GetModuleCountParams) (*GetModuleCountOK, *GetModuleCountNoContent, *GetModuleCountPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getModuleCount",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/module/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetModuleCountOK:
		return value, nil, nil, nil
	case *GetModuleCountNoContent:
		return nil, value, nil, nil
	case *GetModuleCountPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetModuleInfoByID gets module info by Id

Returns Module info by id
*/
func (a *Client) GetModuleInfoByID(params *GetModuleInfoByIDParams) (*GetModuleInfoByIDOK, *GetModuleInfoByIDNoContent, *GetModuleInfoByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModuleInfoByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getModuleInfoById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/module/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModuleInfoByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetModuleInfoByIDOK:
		return value, nil, nil, nil
	case *GetModuleInfoByIDNoContent:
		return nil, value, nil, nil
	case *GetModuleInfoByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetModules gets modules

Returns modules by specified device id
*/
func (a *Client) GetModules(params *GetModulesParams) (*GetModulesOK, *GetModulesNoContent, *GetModulesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetModulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getModules",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/module",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetModulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetModulesOK:
		return value, nil, nil, nil
	case *GetModulesNoContent:
		return nil, value, nil, nil
	case *GetModulesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetNetworkDeviceByIP gets network device by IP

Returns the network device by specified IP address
*/
func (a *Client) GetNetworkDeviceByIP(params *GetNetworkDeviceByIPParams) (*GetNetworkDeviceByIPOK, *GetNetworkDeviceByIPNoContent, *GetNetworkDeviceByIPPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceByIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceByIP",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/ip-address/{ipAddress}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkDeviceByIPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetNetworkDeviceByIPOK:
		return value, nil, nil, nil
	case *GetNetworkDeviceByIPNoContent:
		return nil, value, nil, nil
	case *GetNetworkDeviceByIPPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetNetworkDeviceByPaginationRange gets network device by pagination range

Returns the list of network devices for the given pagination range
*/
func (a *Client) GetNetworkDeviceByPaginationRange(params *GetNetworkDeviceByPaginationRangeParams) (*GetNetworkDeviceByPaginationRangeOK, *GetNetworkDeviceByPaginationRangeNoContent, *GetNetworkDeviceByPaginationRangePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDeviceByPaginationRangeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDeviceByPaginationRange",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{startIndex}/{recordsToReturn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNetworkDeviceByPaginationRangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetNetworkDeviceByPaginationRangeOK:
		return value, nil, nil, nil
	case *GetNetworkDeviceByPaginationRangeNoContent:
		return nil, value, nil, nil
	case *GetNetworkDeviceByPaginationRangePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetOSPFInterfaces gets o s p f interfaces

Returns the interfaces that has OSPF enabled
*/
func (a *Client) GetOSPFInterfaces(params *GetOSPFInterfacesParams) (*GetOSPFInterfacesOK, *GetOSPFInterfacesNoContent, *GetOSPFInterfacesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOSPFInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOSPFInterfaces",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/interface/ospf",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOSPFInterfacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetOSPFInterfacesOK:
		return value, nil, nil, nil
	case *GetOSPFInterfacesNoContent:
		return nil, value, nil, nil
	case *GetOSPFInterfacesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetOrganizationListForMeraki gets organization list for meraki

Returns list of organizations for meraki dashboard
*/
func (a *Client) GetOrganizationListForMeraki(params *GetOrganizationListForMerakiParams) (*GetOrganizationListForMerakiOK, *GetOrganizationListForMerakiNoContent, *GetOrganizationListForMerakiPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationListForMerakiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationListForMeraki",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}/meraki-organization",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrganizationListForMerakiReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetOrganizationListForMerakiOK:
		return value, nil, nil, nil
	case *GetOrganizationListForMerakiNoContent:
		return nil, value, nil, nil
	case *GetOrganizationListForMerakiPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetPollingIntervalByID gets polling interval by Id

Returns polling interval by device id
*/
func (a *Client) GetPollingIntervalByID(params *GetPollingIntervalByIDParams) (*GetPollingIntervalByIDOK, *GetPollingIntervalByIDNoContent, *GetPollingIntervalByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollingIntervalByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPollingIntervalById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}/collection-schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPollingIntervalByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPollingIntervalByIDOK:
		return value, nil, nil, nil
	case *GetPollingIntervalByIDNoContent:
		return nil, value, nil, nil
	case *GetPollingIntervalByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetPollingIntervalForAllDevices gets polling interval for all devices

Returns polling interval of all devices
*/
func (a *Client) GetPollingIntervalForAllDevices(params *GetPollingIntervalForAllDevicesParams) (*GetPollingIntervalForAllDevicesOK, *GetPollingIntervalForAllDevicesNoContent, *GetPollingIntervalForAllDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPollingIntervalForAllDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPollingIntervalForAllDevices",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/collection-schedule/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPollingIntervalForAllDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetPollingIntervalForAllDevicesOK:
		return value, nil, nil, nil
	case *GetPollingIntervalForAllDevicesNoContent:
		return nil, value, nil, nil
	case *GetPollingIntervalForAllDevicesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetWirelessLanControllerDetailsByID gets wireless lan controller details by Id

Returns the wireless lan controller info with given device ID
*/
func (a *Client) GetWirelessLanControllerDetailsByID(params *GetWirelessLanControllerDetailsByIDParams) (*GetWirelessLanControllerDetailsByIDOK, *GetWirelessLanControllerDetailsByIDNoContent, *GetWirelessLanControllerDetailsByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWirelessLanControllerDetailsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWirelessLanControllerDetailsById",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/{id}/wireless-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWirelessLanControllerDetailsByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetWirelessLanControllerDetailsByIDOK:
		return value, nil, nil, nil
	case *GetWirelessLanControllerDetailsByIDNoContent:
		return nil, value, nil, nil
	case *GetWirelessLanControllerDetailsByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RegisterDeviceForWSA registers device for w s a

Registers a device for WSA notification
*/
func (a *Client) RegisterDeviceForWSA(params *RegisterDeviceForWSAParams) (*RegisterDeviceForWSAOK, *RegisterDeviceForWSANoContent, *RegisterDeviceForWSAPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDeviceForWSAParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerDeviceForWSA",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/tenantinfo/macaddress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterDeviceForWSAReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RegisterDeviceForWSAOK:
		return value, nil, nil, nil
	case *RegisterDeviceForWSANoContent:
		return nil, value, nil, nil
	case *RegisterDeviceForWSAPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RetrievesAllNetworkDevices retrieves all network devices

Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
*/
func (a *Client) RetrievesAllNetworkDevices(params *RetrievesAllNetworkDevicesParams) (*RetrievesAllNetworkDevicesOK, *RetrievesAllNetworkDevicesNoContent, *RetrievesAllNetworkDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrievesAllNetworkDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrievesAllNetworkDevices",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/network-device/autocomplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrievesAllNetworkDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RetrievesAllNetworkDevicesOK:
		return value, nil, nil, nil
	case *RetrievesAllNetworkDevicesNoContent:
		return nil, value, nil, nil
	case *RetrievesAllNetworkDevicesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
SyncDevices syncs devices

Sync the devices provided as input
*/
func (a *Client) SyncDevices(params *SyncDevicesParams) (*SyncDevicesOK, *SyncDevicesCreated, *SyncDevicesAccepted, *SyncDevicesNoContent, *SyncDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncDevices",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/network-device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SyncDevicesOK:
		return value, nil, nil, nil, nil, nil
	case *SyncDevicesCreated:
		return nil, value, nil, nil, nil, nil
	case *SyncDevicesAccepted:
		return nil, nil, value, nil, nil, nil
	case *SyncDevicesNoContent:
		return nil, nil, nil, value, nil, nil
	case *SyncDevicesPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
SyncNetworkDevices syncs devices

Synchronizes the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if available, else the sync will fail. Result can be seen in the child task of each device
*/
func (a *Client) SyncNetworkDevices(params *SyncNetworkDevicesParams) (*SyncNetworkDevicesOK, *SyncNetworkDevicesCreated, *SyncNetworkDevicesAccepted, *SyncNetworkDevicesNoContent, *SyncNetworkDevicesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncNetworkDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncNetworkDevices",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/network-device/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SyncNetworkDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *SyncNetworkDevicesOK:
		return value, nil, nil, nil, nil, nil
	case *SyncNetworkDevicesCreated:
		return nil, value, nil, nil, nil, nil
	case *SyncNetworkDevicesAccepted:
		return nil, nil, value, nil, nil, nil
	case *SyncNetworkDevicesNoContent:
		return nil, nil, nil, value, nil, nil
	case *SyncNetworkDevicesPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateDeviceRole updates device role

Updates the role of the device as access, core, distribution, border router
*/
func (a *Client) UpdateDeviceRole(params *UpdateDeviceRoleParams) (*UpdateDeviceRoleOK, *UpdateDeviceRoleCreated, *UpdateDeviceRoleAccepted, *UpdateDeviceRoleNoContent, *UpdateDeviceRolePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeviceRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDeviceRole",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/network-device/brief",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeviceRoleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDeviceRoleOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateDeviceRoleCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateDeviceRoleAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateDeviceRoleNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateDeviceRolePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
