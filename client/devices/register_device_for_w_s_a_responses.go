// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// RegisterDeviceForWSAReader is a Reader for the RegisterDeviceForWSA structure.
type RegisterDeviceForWSAReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterDeviceForWSAReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRegisterDeviceForWSAOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewRegisterDeviceForWSANoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewRegisterDeviceForWSAPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewRegisterDeviceForWSABadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewRegisterDeviceForWSAUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewRegisterDeviceForWSAForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewRegisterDeviceForWSANotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewRegisterDeviceForWSAConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewRegisterDeviceForWSAUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewRegisterDeviceForWSAInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewRegisterDeviceForWSANotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewRegisterDeviceForWSAServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewRegisterDeviceForWSAGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRegisterDeviceForWSAOK creates a RegisterDeviceForWSAOK with default headers values
func NewRegisterDeviceForWSAOK() *RegisterDeviceForWSAOK {
	return &RegisterDeviceForWSAOK{}
}

/*RegisterDeviceForWSAOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type RegisterDeviceForWSAOK struct {
	Payload *models.RegisterNetworkDeviceResult
}

func (o *RegisterDeviceForWSAOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAOK  %+v", 200, o.Payload)
}

func (o *RegisterDeviceForWSAOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RegisterNetworkDeviceResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterDeviceForWSANoContent creates a RegisterDeviceForWSANoContent with default headers values
func NewRegisterDeviceForWSANoContent() *RegisterDeviceForWSANoContent {
	return &RegisterDeviceForWSANoContent{}
}

/*RegisterDeviceForWSANoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type RegisterDeviceForWSANoContent struct {
}

func (o *RegisterDeviceForWSANoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSANoContent ", 204)
}

func (o *RegisterDeviceForWSANoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAPartialContent creates a RegisterDeviceForWSAPartialContent with default headers values
func NewRegisterDeviceForWSAPartialContent() *RegisterDeviceForWSAPartialContent {
	return &RegisterDeviceForWSAPartialContent{}
}

/*RegisterDeviceForWSAPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type RegisterDeviceForWSAPartialContent struct {
}

func (o *RegisterDeviceForWSAPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAPartialContent ", 206)
}

func (o *RegisterDeviceForWSAPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSABadRequest creates a RegisterDeviceForWSABadRequest with default headers values
func NewRegisterDeviceForWSABadRequest() *RegisterDeviceForWSABadRequest {
	return &RegisterDeviceForWSABadRequest{}
}

/*RegisterDeviceForWSABadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type RegisterDeviceForWSABadRequest struct {
}

func (o *RegisterDeviceForWSABadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSABadRequest ", 400)
}

func (o *RegisterDeviceForWSABadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAUnauthorized creates a RegisterDeviceForWSAUnauthorized with default headers values
func NewRegisterDeviceForWSAUnauthorized() *RegisterDeviceForWSAUnauthorized {
	return &RegisterDeviceForWSAUnauthorized{}
}

/*RegisterDeviceForWSAUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type RegisterDeviceForWSAUnauthorized struct {
}

func (o *RegisterDeviceForWSAUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAUnauthorized ", 401)
}

func (o *RegisterDeviceForWSAUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAForbidden creates a RegisterDeviceForWSAForbidden with default headers values
func NewRegisterDeviceForWSAForbidden() *RegisterDeviceForWSAForbidden {
	return &RegisterDeviceForWSAForbidden{}
}

/*RegisterDeviceForWSAForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type RegisterDeviceForWSAForbidden struct {
}

func (o *RegisterDeviceForWSAForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAForbidden ", 403)
}

func (o *RegisterDeviceForWSAForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSANotFound creates a RegisterDeviceForWSANotFound with default headers values
func NewRegisterDeviceForWSANotFound() *RegisterDeviceForWSANotFound {
	return &RegisterDeviceForWSANotFound{}
}

/*RegisterDeviceForWSANotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type RegisterDeviceForWSANotFound struct {
}

func (o *RegisterDeviceForWSANotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSANotFound ", 404)
}

func (o *RegisterDeviceForWSANotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAConflict creates a RegisterDeviceForWSAConflict with default headers values
func NewRegisterDeviceForWSAConflict() *RegisterDeviceForWSAConflict {
	return &RegisterDeviceForWSAConflict{}
}

/*RegisterDeviceForWSAConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type RegisterDeviceForWSAConflict struct {
}

func (o *RegisterDeviceForWSAConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAConflict ", 409)
}

func (o *RegisterDeviceForWSAConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAUnsupportedMediaType creates a RegisterDeviceForWSAUnsupportedMediaType with default headers values
func NewRegisterDeviceForWSAUnsupportedMediaType() *RegisterDeviceForWSAUnsupportedMediaType {
	return &RegisterDeviceForWSAUnsupportedMediaType{}
}

/*RegisterDeviceForWSAUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type RegisterDeviceForWSAUnsupportedMediaType struct {
}

func (o *RegisterDeviceForWSAUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAUnsupportedMediaType ", 415)
}

func (o *RegisterDeviceForWSAUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAInternalServerError creates a RegisterDeviceForWSAInternalServerError with default headers values
func NewRegisterDeviceForWSAInternalServerError() *RegisterDeviceForWSAInternalServerError {
	return &RegisterDeviceForWSAInternalServerError{}
}

/*RegisterDeviceForWSAInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type RegisterDeviceForWSAInternalServerError struct {
}

func (o *RegisterDeviceForWSAInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAInternalServerError ", 500)
}

func (o *RegisterDeviceForWSAInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSANotImplemented creates a RegisterDeviceForWSANotImplemented with default headers values
func NewRegisterDeviceForWSANotImplemented() *RegisterDeviceForWSANotImplemented {
	return &RegisterDeviceForWSANotImplemented{}
}

/*RegisterDeviceForWSANotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type RegisterDeviceForWSANotImplemented struct {
}

func (o *RegisterDeviceForWSANotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSANotImplemented ", 501)
}

func (o *RegisterDeviceForWSANotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAServiceUnavailable creates a RegisterDeviceForWSAServiceUnavailable with default headers values
func NewRegisterDeviceForWSAServiceUnavailable() *RegisterDeviceForWSAServiceUnavailable {
	return &RegisterDeviceForWSAServiceUnavailable{}
}

/*RegisterDeviceForWSAServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type RegisterDeviceForWSAServiceUnavailable struct {
}

func (o *RegisterDeviceForWSAServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAServiceUnavailable ", 503)
}

func (o *RegisterDeviceForWSAServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterDeviceForWSAGatewayTimeout creates a RegisterDeviceForWSAGatewayTimeout with default headers values
func NewRegisterDeviceForWSAGatewayTimeout() *RegisterDeviceForWSAGatewayTimeout {
	return &RegisterDeviceForWSAGatewayTimeout{}
}

/*RegisterDeviceForWSAGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type RegisterDeviceForWSAGatewayTimeout struct {
}

func (o *RegisterDeviceForWSAGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/tenantinfo/macaddress][%d] registerDeviceForWSAGatewayTimeout ", 504)
}

func (o *RegisterDeviceForWSAGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
