// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// SyncDevicesReader is a Reader for the SyncDevices structure.
type SyncDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SyncDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSyncDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewSyncDevicesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewSyncDevicesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewSyncDevicesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewSyncDevicesPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSyncDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSyncDevicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSyncDevicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSyncDevicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewSyncDevicesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewSyncDevicesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewSyncDevicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewSyncDevicesNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewSyncDevicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewSyncDevicesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSyncDevicesOK creates a SyncDevicesOK with default headers values
func NewSyncDevicesOK() *SyncDevicesOK {
	return &SyncDevicesOK{}
}

/*SyncDevicesOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type SyncDevicesOK struct {
	Payload *models.TaskIDResult
}

func (o *SyncDevicesOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesOK  %+v", 200, o.Payload)
}

func (o *SyncDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSyncDevicesCreated creates a SyncDevicesCreated with default headers values
func NewSyncDevicesCreated() *SyncDevicesCreated {
	return &SyncDevicesCreated{}
}

/*SyncDevicesCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type SyncDevicesCreated struct {
}

func (o *SyncDevicesCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesCreated ", 201)
}

func (o *SyncDevicesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesAccepted creates a SyncDevicesAccepted with default headers values
func NewSyncDevicesAccepted() *SyncDevicesAccepted {
	return &SyncDevicesAccepted{}
}

/*SyncDevicesAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type SyncDevicesAccepted struct {
}

func (o *SyncDevicesAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesAccepted ", 202)
}

func (o *SyncDevicesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesNoContent creates a SyncDevicesNoContent with default headers values
func NewSyncDevicesNoContent() *SyncDevicesNoContent {
	return &SyncDevicesNoContent{}
}

/*SyncDevicesNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type SyncDevicesNoContent struct {
}

func (o *SyncDevicesNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesNoContent ", 204)
}

func (o *SyncDevicesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesPartialContent creates a SyncDevicesPartialContent with default headers values
func NewSyncDevicesPartialContent() *SyncDevicesPartialContent {
	return &SyncDevicesPartialContent{}
}

/*SyncDevicesPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type SyncDevicesPartialContent struct {
}

func (o *SyncDevicesPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesPartialContent ", 206)
}

func (o *SyncDevicesPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesBadRequest creates a SyncDevicesBadRequest with default headers values
func NewSyncDevicesBadRequest() *SyncDevicesBadRequest {
	return &SyncDevicesBadRequest{}
}

/*SyncDevicesBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type SyncDevicesBadRequest struct {
}

func (o *SyncDevicesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesBadRequest ", 400)
}

func (o *SyncDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesUnauthorized creates a SyncDevicesUnauthorized with default headers values
func NewSyncDevicesUnauthorized() *SyncDevicesUnauthorized {
	return &SyncDevicesUnauthorized{}
}

/*SyncDevicesUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type SyncDevicesUnauthorized struct {
}

func (o *SyncDevicesUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesUnauthorized ", 401)
}

func (o *SyncDevicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesForbidden creates a SyncDevicesForbidden with default headers values
func NewSyncDevicesForbidden() *SyncDevicesForbidden {
	return &SyncDevicesForbidden{}
}

/*SyncDevicesForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type SyncDevicesForbidden struct {
}

func (o *SyncDevicesForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesForbidden ", 403)
}

func (o *SyncDevicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesNotFound creates a SyncDevicesNotFound with default headers values
func NewSyncDevicesNotFound() *SyncDevicesNotFound {
	return &SyncDevicesNotFound{}
}

/*SyncDevicesNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type SyncDevicesNotFound struct {
}

func (o *SyncDevicesNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesNotFound ", 404)
}

func (o *SyncDevicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesConflict creates a SyncDevicesConflict with default headers values
func NewSyncDevicesConflict() *SyncDevicesConflict {
	return &SyncDevicesConflict{}
}

/*SyncDevicesConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type SyncDevicesConflict struct {
}

func (o *SyncDevicesConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesConflict ", 409)
}

func (o *SyncDevicesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesUnsupportedMediaType creates a SyncDevicesUnsupportedMediaType with default headers values
func NewSyncDevicesUnsupportedMediaType() *SyncDevicesUnsupportedMediaType {
	return &SyncDevicesUnsupportedMediaType{}
}

/*SyncDevicesUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type SyncDevicesUnsupportedMediaType struct {
}

func (o *SyncDevicesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesUnsupportedMediaType ", 415)
}

func (o *SyncDevicesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesInternalServerError creates a SyncDevicesInternalServerError with default headers values
func NewSyncDevicesInternalServerError() *SyncDevicesInternalServerError {
	return &SyncDevicesInternalServerError{}
}

/*SyncDevicesInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type SyncDevicesInternalServerError struct {
}

func (o *SyncDevicesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesInternalServerError ", 500)
}

func (o *SyncDevicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesNotImplemented creates a SyncDevicesNotImplemented with default headers values
func NewSyncDevicesNotImplemented() *SyncDevicesNotImplemented {
	return &SyncDevicesNotImplemented{}
}

/*SyncDevicesNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type SyncDevicesNotImplemented struct {
}

func (o *SyncDevicesNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesNotImplemented ", 501)
}

func (o *SyncDevicesNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesServiceUnavailable creates a SyncDevicesServiceUnavailable with default headers values
func NewSyncDevicesServiceUnavailable() *SyncDevicesServiceUnavailable {
	return &SyncDevicesServiceUnavailable{}
}

/*SyncDevicesServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type SyncDevicesServiceUnavailable struct {
}

func (o *SyncDevicesServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesServiceUnavailable ", 503)
}

func (o *SyncDevicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSyncDevicesGatewayTimeout creates a SyncDevicesGatewayTimeout with default headers values
func NewSyncDevicesGatewayTimeout() *SyncDevicesGatewayTimeout {
	return &SyncDevicesGatewayTimeout{}
}

/*SyncDevicesGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type SyncDevicesGatewayTimeout struct {
}

func (o *SyncDevicesGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/network-device][%d] syncDevicesGatewayTimeout ", 504)
}

func (o *SyncDevicesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
