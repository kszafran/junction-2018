// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// GetPollingIntervalForAllDevicesReader is a Reader for the GetPollingIntervalForAllDevices structure.
type GetPollingIntervalForAllDevicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPollingIntervalForAllDevicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPollingIntervalForAllDevicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewGetPollingIntervalForAllDevicesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewGetPollingIntervalForAllDevicesPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPollingIntervalForAllDevicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPollingIntervalForAllDevicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetPollingIntervalForAllDevicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPollingIntervalForAllDevicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetPollingIntervalForAllDevicesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetPollingIntervalForAllDevicesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPollingIntervalForAllDevicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewGetPollingIntervalForAllDevicesNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewGetPollingIntervalForAllDevicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetPollingIntervalForAllDevicesGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPollingIntervalForAllDevicesOK creates a GetPollingIntervalForAllDevicesOK with default headers values
func NewGetPollingIntervalForAllDevicesOK() *GetPollingIntervalForAllDevicesOK {
	return &GetPollingIntervalForAllDevicesOK{}
}

/*GetPollingIntervalForAllDevicesOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type GetPollingIntervalForAllDevicesOK struct {
	Payload *models.CountResult
}

func (o *GetPollingIntervalForAllDevicesOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesOK  %+v", 200, o.Payload)
}

func (o *GetPollingIntervalForAllDevicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CountResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPollingIntervalForAllDevicesNoContent creates a GetPollingIntervalForAllDevicesNoContent with default headers values
func NewGetPollingIntervalForAllDevicesNoContent() *GetPollingIntervalForAllDevicesNoContent {
	return &GetPollingIntervalForAllDevicesNoContent{}
}

/*GetPollingIntervalForAllDevicesNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type GetPollingIntervalForAllDevicesNoContent struct {
}

func (o *GetPollingIntervalForAllDevicesNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesNoContent ", 204)
}

func (o *GetPollingIntervalForAllDevicesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesPartialContent creates a GetPollingIntervalForAllDevicesPartialContent with default headers values
func NewGetPollingIntervalForAllDevicesPartialContent() *GetPollingIntervalForAllDevicesPartialContent {
	return &GetPollingIntervalForAllDevicesPartialContent{}
}

/*GetPollingIntervalForAllDevicesPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type GetPollingIntervalForAllDevicesPartialContent struct {
}

func (o *GetPollingIntervalForAllDevicesPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesPartialContent ", 206)
}

func (o *GetPollingIntervalForAllDevicesPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesBadRequest creates a GetPollingIntervalForAllDevicesBadRequest with default headers values
func NewGetPollingIntervalForAllDevicesBadRequest() *GetPollingIntervalForAllDevicesBadRequest {
	return &GetPollingIntervalForAllDevicesBadRequest{}
}

/*GetPollingIntervalForAllDevicesBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type GetPollingIntervalForAllDevicesBadRequest struct {
}

func (o *GetPollingIntervalForAllDevicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesBadRequest ", 400)
}

func (o *GetPollingIntervalForAllDevicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesUnauthorized creates a GetPollingIntervalForAllDevicesUnauthorized with default headers values
func NewGetPollingIntervalForAllDevicesUnauthorized() *GetPollingIntervalForAllDevicesUnauthorized {
	return &GetPollingIntervalForAllDevicesUnauthorized{}
}

/*GetPollingIntervalForAllDevicesUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type GetPollingIntervalForAllDevicesUnauthorized struct {
}

func (o *GetPollingIntervalForAllDevicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesUnauthorized ", 401)
}

func (o *GetPollingIntervalForAllDevicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesForbidden creates a GetPollingIntervalForAllDevicesForbidden with default headers values
func NewGetPollingIntervalForAllDevicesForbidden() *GetPollingIntervalForAllDevicesForbidden {
	return &GetPollingIntervalForAllDevicesForbidden{}
}

/*GetPollingIntervalForAllDevicesForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type GetPollingIntervalForAllDevicesForbidden struct {
}

func (o *GetPollingIntervalForAllDevicesForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesForbidden ", 403)
}

func (o *GetPollingIntervalForAllDevicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesNotFound creates a GetPollingIntervalForAllDevicesNotFound with default headers values
func NewGetPollingIntervalForAllDevicesNotFound() *GetPollingIntervalForAllDevicesNotFound {
	return &GetPollingIntervalForAllDevicesNotFound{}
}

/*GetPollingIntervalForAllDevicesNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type GetPollingIntervalForAllDevicesNotFound struct {
}

func (o *GetPollingIntervalForAllDevicesNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesNotFound ", 404)
}

func (o *GetPollingIntervalForAllDevicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesConflict creates a GetPollingIntervalForAllDevicesConflict with default headers values
func NewGetPollingIntervalForAllDevicesConflict() *GetPollingIntervalForAllDevicesConflict {
	return &GetPollingIntervalForAllDevicesConflict{}
}

/*GetPollingIntervalForAllDevicesConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type GetPollingIntervalForAllDevicesConflict struct {
}

func (o *GetPollingIntervalForAllDevicesConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesConflict ", 409)
}

func (o *GetPollingIntervalForAllDevicesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesUnsupportedMediaType creates a GetPollingIntervalForAllDevicesUnsupportedMediaType with default headers values
func NewGetPollingIntervalForAllDevicesUnsupportedMediaType() *GetPollingIntervalForAllDevicesUnsupportedMediaType {
	return &GetPollingIntervalForAllDevicesUnsupportedMediaType{}
}

/*GetPollingIntervalForAllDevicesUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type GetPollingIntervalForAllDevicesUnsupportedMediaType struct {
}

func (o *GetPollingIntervalForAllDevicesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesUnsupportedMediaType ", 415)
}

func (o *GetPollingIntervalForAllDevicesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesInternalServerError creates a GetPollingIntervalForAllDevicesInternalServerError with default headers values
func NewGetPollingIntervalForAllDevicesInternalServerError() *GetPollingIntervalForAllDevicesInternalServerError {
	return &GetPollingIntervalForAllDevicesInternalServerError{}
}

/*GetPollingIntervalForAllDevicesInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type GetPollingIntervalForAllDevicesInternalServerError struct {
}

func (o *GetPollingIntervalForAllDevicesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesInternalServerError ", 500)
}

func (o *GetPollingIntervalForAllDevicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesNotImplemented creates a GetPollingIntervalForAllDevicesNotImplemented with default headers values
func NewGetPollingIntervalForAllDevicesNotImplemented() *GetPollingIntervalForAllDevicesNotImplemented {
	return &GetPollingIntervalForAllDevicesNotImplemented{}
}

/*GetPollingIntervalForAllDevicesNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type GetPollingIntervalForAllDevicesNotImplemented struct {
}

func (o *GetPollingIntervalForAllDevicesNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesNotImplemented ", 501)
}

func (o *GetPollingIntervalForAllDevicesNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesServiceUnavailable creates a GetPollingIntervalForAllDevicesServiceUnavailable with default headers values
func NewGetPollingIntervalForAllDevicesServiceUnavailable() *GetPollingIntervalForAllDevicesServiceUnavailable {
	return &GetPollingIntervalForAllDevicesServiceUnavailable{}
}

/*GetPollingIntervalForAllDevicesServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type GetPollingIntervalForAllDevicesServiceUnavailable struct {
}

func (o *GetPollingIntervalForAllDevicesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesServiceUnavailable ", 503)
}

func (o *GetPollingIntervalForAllDevicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPollingIntervalForAllDevicesGatewayTimeout creates a GetPollingIntervalForAllDevicesGatewayTimeout with default headers values
func NewGetPollingIntervalForAllDevicesGatewayTimeout() *GetPollingIntervalForAllDevicesGatewayTimeout {
	return &GetPollingIntervalForAllDevicesGatewayTimeout{}
}

/*GetPollingIntervalForAllDevicesGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type GetPollingIntervalForAllDevicesGatewayTimeout struct {
}

func (o *GetPollingIntervalForAllDevicesGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/network-device/collection-schedule/global][%d] getPollingIntervalForAllDevicesGatewayTimeout ", 504)
}

func (o *GetPollingIntervalForAllDevicesGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
