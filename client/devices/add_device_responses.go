// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// AddDeviceReader is a Reader for the AddDevice structure.
type AddDeviceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddDeviceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAddDeviceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewAddDeviceCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewAddDeviceAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewAddDeviceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewAddDevicePartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddDeviceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddDeviceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddDeviceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddDeviceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAddDeviceConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewAddDeviceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAddDeviceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewAddDeviceNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewAddDeviceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewAddDeviceGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddDeviceOK creates a AddDeviceOK with default headers values
func NewAddDeviceOK() *AddDeviceOK {
	return &AddDeviceOK{}
}

/*AddDeviceOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type AddDeviceOK struct {
	Payload *models.TaskIDResult
}

func (o *AddDeviceOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceOK  %+v", 200, o.Payload)
}

func (o *AddDeviceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddDeviceCreated creates a AddDeviceCreated with default headers values
func NewAddDeviceCreated() *AddDeviceCreated {
	return &AddDeviceCreated{}
}

/*AddDeviceCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type AddDeviceCreated struct {
}

func (o *AddDeviceCreated) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceCreated ", 201)
}

func (o *AddDeviceCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceAccepted creates a AddDeviceAccepted with default headers values
func NewAddDeviceAccepted() *AddDeviceAccepted {
	return &AddDeviceAccepted{}
}

/*AddDeviceAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type AddDeviceAccepted struct {
}

func (o *AddDeviceAccepted) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceAccepted ", 202)
}

func (o *AddDeviceAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceNoContent creates a AddDeviceNoContent with default headers values
func NewAddDeviceNoContent() *AddDeviceNoContent {
	return &AddDeviceNoContent{}
}

/*AddDeviceNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type AddDeviceNoContent struct {
}

func (o *AddDeviceNoContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceNoContent ", 204)
}

func (o *AddDeviceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDevicePartialContent creates a AddDevicePartialContent with default headers values
func NewAddDevicePartialContent() *AddDevicePartialContent {
	return &AddDevicePartialContent{}
}

/*AddDevicePartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type AddDevicePartialContent struct {
}

func (o *AddDevicePartialContent) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDevicePartialContent ", 206)
}

func (o *AddDevicePartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceBadRequest creates a AddDeviceBadRequest with default headers values
func NewAddDeviceBadRequest() *AddDeviceBadRequest {
	return &AddDeviceBadRequest{}
}

/*AddDeviceBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type AddDeviceBadRequest struct {
}

func (o *AddDeviceBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceBadRequest ", 400)
}

func (o *AddDeviceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceUnauthorized creates a AddDeviceUnauthorized with default headers values
func NewAddDeviceUnauthorized() *AddDeviceUnauthorized {
	return &AddDeviceUnauthorized{}
}

/*AddDeviceUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type AddDeviceUnauthorized struct {
}

func (o *AddDeviceUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceUnauthorized ", 401)
}

func (o *AddDeviceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceForbidden creates a AddDeviceForbidden with default headers values
func NewAddDeviceForbidden() *AddDeviceForbidden {
	return &AddDeviceForbidden{}
}

/*AddDeviceForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type AddDeviceForbidden struct {
}

func (o *AddDeviceForbidden) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceForbidden ", 403)
}

func (o *AddDeviceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceNotFound creates a AddDeviceNotFound with default headers values
func NewAddDeviceNotFound() *AddDeviceNotFound {
	return &AddDeviceNotFound{}
}

/*AddDeviceNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type AddDeviceNotFound struct {
}

func (o *AddDeviceNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceNotFound ", 404)
}

func (o *AddDeviceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceConflict creates a AddDeviceConflict with default headers values
func NewAddDeviceConflict() *AddDeviceConflict {
	return &AddDeviceConflict{}
}

/*AddDeviceConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type AddDeviceConflict struct {
}

func (o *AddDeviceConflict) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceConflict ", 409)
}

func (o *AddDeviceConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceUnsupportedMediaType creates a AddDeviceUnsupportedMediaType with default headers values
func NewAddDeviceUnsupportedMediaType() *AddDeviceUnsupportedMediaType {
	return &AddDeviceUnsupportedMediaType{}
}

/*AddDeviceUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type AddDeviceUnsupportedMediaType struct {
}

func (o *AddDeviceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceUnsupportedMediaType ", 415)
}

func (o *AddDeviceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceInternalServerError creates a AddDeviceInternalServerError with default headers values
func NewAddDeviceInternalServerError() *AddDeviceInternalServerError {
	return &AddDeviceInternalServerError{}
}

/*AddDeviceInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type AddDeviceInternalServerError struct {
}

func (o *AddDeviceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceInternalServerError ", 500)
}

func (o *AddDeviceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceNotImplemented creates a AddDeviceNotImplemented with default headers values
func NewAddDeviceNotImplemented() *AddDeviceNotImplemented {
	return &AddDeviceNotImplemented{}
}

/*AddDeviceNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type AddDeviceNotImplemented struct {
}

func (o *AddDeviceNotImplemented) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceNotImplemented ", 501)
}

func (o *AddDeviceNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceServiceUnavailable creates a AddDeviceServiceUnavailable with default headers values
func NewAddDeviceServiceUnavailable() *AddDeviceServiceUnavailable {
	return &AddDeviceServiceUnavailable{}
}

/*AddDeviceServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type AddDeviceServiceUnavailable struct {
}

func (o *AddDeviceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceServiceUnavailable ", 503)
}

func (o *AddDeviceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddDeviceGatewayTimeout creates a AddDeviceGatewayTimeout with default headers values
func NewAddDeviceGatewayTimeout() *AddDeviceGatewayTimeout {
	return &AddDeviceGatewayTimeout{}
}

/*AddDeviceGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type AddDeviceGatewayTimeout struct {
}

func (o *AddDeviceGatewayTimeout) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/network-device][%d] addDeviceGatewayTimeout ", 504)
}

func (o *AddDeviceGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
