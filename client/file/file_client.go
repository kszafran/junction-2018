// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new file API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for file API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DownloadAFileByFileID downloads a file by file Id

Downloads a file specified by fileId
*/
func (a *Client) DownloadAFileByFileID(params *DownloadAFileByFileIDParams) (*DownloadAFileByFileIDOK, *DownloadAFileByFileIDNoContent, *DownloadAFileByFileIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadAFileByFileIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "downloadAFileByFileId",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/file/{fileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadAFileByFileIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DownloadAFileByFileIDOK:
		return value, nil, nil, nil
	case *DownloadAFileByFileIDNoContent:
		return nil, value, nil, nil
	case *DownloadAFileByFileIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetListOfAvailableNamespaces gets list of available namespaces

Returns list of available namespaces
*/
func (a *Client) GetListOfAvailableNamespaces(params *GetListOfAvailableNamespacesParams) (*GetListOfAvailableNamespacesOK, *GetListOfAvailableNamespacesNoContent, *GetListOfAvailableNamespacesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfAvailableNamespacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListOfAvailableNamespaces",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/file/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListOfAvailableNamespacesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetListOfAvailableNamespacesOK:
		return value, nil, nil, nil
	case *GetListOfAvailableNamespacesNoContent:
		return nil, value, nil, nil
	case *GetListOfAvailableNamespacesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetListOfFiles gets list of files

Returns list of files under a specific namespace
*/
func (a *Client) GetListOfFiles(params *GetListOfFilesParams) (*GetListOfFilesOK, *GetListOfFilesNoContent, *GetListOfFilesPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetListOfFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getListOfFiles",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/file/namespace/{nameSpace}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetListOfFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetListOfFilesOK:
		return value, nil, nil, nil
	case *GetListOfFilesNoContent:
		return nil, value, nil, nil
	case *GetListOfFilesPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
