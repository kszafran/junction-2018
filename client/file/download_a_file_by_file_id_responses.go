// Code generated by go-swagger; DO NOT EDIT.

package file

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// DownloadAFileByFileIDReader is a Reader for the DownloadAFileByFileID structure.
type DownloadAFileByFileIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DownloadAFileByFileIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDownloadAFileByFileIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewDownloadAFileByFileIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewDownloadAFileByFileIDPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDownloadAFileByFileIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDownloadAFileByFileIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDownloadAFileByFileIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDownloadAFileByFileIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewDownloadAFileByFileIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewDownloadAFileByFileIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDownloadAFileByFileIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewDownloadAFileByFileIDNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewDownloadAFileByFileIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewDownloadAFileByFileIDGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDownloadAFileByFileIDOK creates a DownloadAFileByFileIDOK with default headers values
func NewDownloadAFileByFileIDOK() *DownloadAFileByFileIDOK {
	return &DownloadAFileByFileIDOK{}
}

/*DownloadAFileByFileIDOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type DownloadAFileByFileIDOK struct {
	Payload models.DownloadAFileByFileIDResponse
}

func (o *DownloadAFileByFileIDOK) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdOK  %+v", 200, o.Payload)
}

func (o *DownloadAFileByFileIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDownloadAFileByFileIDNoContent creates a DownloadAFileByFileIDNoContent with default headers values
func NewDownloadAFileByFileIDNoContent() *DownloadAFileByFileIDNoContent {
	return &DownloadAFileByFileIDNoContent{}
}

/*DownloadAFileByFileIDNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type DownloadAFileByFileIDNoContent struct {
}

func (o *DownloadAFileByFileIDNoContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdNoContent ", 204)
}

func (o *DownloadAFileByFileIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDPartialContent creates a DownloadAFileByFileIDPartialContent with default headers values
func NewDownloadAFileByFileIDPartialContent() *DownloadAFileByFileIDPartialContent {
	return &DownloadAFileByFileIDPartialContent{}
}

/*DownloadAFileByFileIDPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type DownloadAFileByFileIDPartialContent struct {
}

func (o *DownloadAFileByFileIDPartialContent) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdPartialContent ", 206)
}

func (o *DownloadAFileByFileIDPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDBadRequest creates a DownloadAFileByFileIDBadRequest with default headers values
func NewDownloadAFileByFileIDBadRequest() *DownloadAFileByFileIDBadRequest {
	return &DownloadAFileByFileIDBadRequest{}
}

/*DownloadAFileByFileIDBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type DownloadAFileByFileIDBadRequest struct {
}

func (o *DownloadAFileByFileIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdBadRequest ", 400)
}

func (o *DownloadAFileByFileIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDUnauthorized creates a DownloadAFileByFileIDUnauthorized with default headers values
func NewDownloadAFileByFileIDUnauthorized() *DownloadAFileByFileIDUnauthorized {
	return &DownloadAFileByFileIDUnauthorized{}
}

/*DownloadAFileByFileIDUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type DownloadAFileByFileIDUnauthorized struct {
}

func (o *DownloadAFileByFileIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdUnauthorized ", 401)
}

func (o *DownloadAFileByFileIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDForbidden creates a DownloadAFileByFileIDForbidden with default headers values
func NewDownloadAFileByFileIDForbidden() *DownloadAFileByFileIDForbidden {
	return &DownloadAFileByFileIDForbidden{}
}

/*DownloadAFileByFileIDForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type DownloadAFileByFileIDForbidden struct {
}

func (o *DownloadAFileByFileIDForbidden) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdForbidden ", 403)
}

func (o *DownloadAFileByFileIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDNotFound creates a DownloadAFileByFileIDNotFound with default headers values
func NewDownloadAFileByFileIDNotFound() *DownloadAFileByFileIDNotFound {
	return &DownloadAFileByFileIDNotFound{}
}

/*DownloadAFileByFileIDNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type DownloadAFileByFileIDNotFound struct {
}

func (o *DownloadAFileByFileIDNotFound) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdNotFound ", 404)
}

func (o *DownloadAFileByFileIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDConflict creates a DownloadAFileByFileIDConflict with default headers values
func NewDownloadAFileByFileIDConflict() *DownloadAFileByFileIDConflict {
	return &DownloadAFileByFileIDConflict{}
}

/*DownloadAFileByFileIDConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type DownloadAFileByFileIDConflict struct {
}

func (o *DownloadAFileByFileIDConflict) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdConflict ", 409)
}

func (o *DownloadAFileByFileIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDUnsupportedMediaType creates a DownloadAFileByFileIDUnsupportedMediaType with default headers values
func NewDownloadAFileByFileIDUnsupportedMediaType() *DownloadAFileByFileIDUnsupportedMediaType {
	return &DownloadAFileByFileIDUnsupportedMediaType{}
}

/*DownloadAFileByFileIDUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type DownloadAFileByFileIDUnsupportedMediaType struct {
}

func (o *DownloadAFileByFileIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdUnsupportedMediaType ", 415)
}

func (o *DownloadAFileByFileIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDInternalServerError creates a DownloadAFileByFileIDInternalServerError with default headers values
func NewDownloadAFileByFileIDInternalServerError() *DownloadAFileByFileIDInternalServerError {
	return &DownloadAFileByFileIDInternalServerError{}
}

/*DownloadAFileByFileIDInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type DownloadAFileByFileIDInternalServerError struct {
}

func (o *DownloadAFileByFileIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdInternalServerError ", 500)
}

func (o *DownloadAFileByFileIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDNotImplemented creates a DownloadAFileByFileIDNotImplemented with default headers values
func NewDownloadAFileByFileIDNotImplemented() *DownloadAFileByFileIDNotImplemented {
	return &DownloadAFileByFileIDNotImplemented{}
}

/*DownloadAFileByFileIDNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type DownloadAFileByFileIDNotImplemented struct {
}

func (o *DownloadAFileByFileIDNotImplemented) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdNotImplemented ", 501)
}

func (o *DownloadAFileByFileIDNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDServiceUnavailable creates a DownloadAFileByFileIDServiceUnavailable with default headers values
func NewDownloadAFileByFileIDServiceUnavailable() *DownloadAFileByFileIDServiceUnavailable {
	return &DownloadAFileByFileIDServiceUnavailable{}
}

/*DownloadAFileByFileIDServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type DownloadAFileByFileIDServiceUnavailable struct {
}

func (o *DownloadAFileByFileIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdServiceUnavailable ", 503)
}

func (o *DownloadAFileByFileIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDownloadAFileByFileIDGatewayTimeout creates a DownloadAFileByFileIDGatewayTimeout with default headers values
func NewDownloadAFileByFileIDGatewayTimeout() *DownloadAFileByFileIDGatewayTimeout {
	return &DownloadAFileByFileIDGatewayTimeout{}
}

/*DownloadAFileByFileIDGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type DownloadAFileByFileIDGatewayTimeout struct {
}

func (o *DownloadAFileByFileIDGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /dna/intent/api/v1/file/{fileId}][%d] downloadAFileByFileIdGatewayTimeout ", 504)
}

func (o *DownloadAFileByFileIDGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
