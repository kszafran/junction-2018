// Code generated by go-swagger; DO NOT EDIT.

package template_programmer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new template programmer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for template programmer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProject creates project

Creates a new project
*/
func (a *Client) CreateProject(params *CreateProjectParams) (*CreateProjectOK, *CreateProjectCreated, *CreateProjectAccepted, *CreateProjectNoContent, *CreateProjectPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/template-programmer/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProjectOK:
		return value, nil, nil, nil, nil, nil
	case *CreateProjectCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateProjectAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateProjectNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateProjectPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
CreateTemplate creates template

Creates a new template
*/
func (a *Client) CreateTemplate(params *CreateTemplateParams) (*CreateTemplateOK, *CreateTemplateCreated, *CreateTemplateAccepted, *CreateTemplateNoContent, *CreateTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTemplate",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/template-programmer/project/{projectId}/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *CreateTemplateOK:
		return value, nil, nil, nil, nil, nil
	case *CreateTemplateCreated:
		return nil, value, nil, nil, nil, nil
	case *CreateTemplateAccepted:
		return nil, nil, value, nil, nil, nil
	case *CreateTemplateNoContent:
		return nil, nil, nil, value, nil, nil
	case *CreateTemplatePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
DeleteProject deletes project

Deletes an existing Project
*/
func (a *Client) DeleteProject(params *DeleteProjectParams) (*DeleteProjectOK, *DeleteProjectNoContent, *DeleteProjectPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/template-programmer/project/{projectId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProjectOK:
		return value, nil, nil, nil
	case *DeleteProjectNoContent:
		return nil, value, nil, nil
	case *DeleteProjectPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeleteTemplate deletes template

Deletes an existing template
*/
func (a *Client) DeleteTemplate(params *DeleteTemplateParams) (*DeleteTemplateOK, *DeleteTemplateNoContent, *DeleteTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTemplate",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteTemplateOK:
		return value, nil, nil, nil
	case *DeleteTemplateNoContent:
		return nil, value, nil, nil
	case *DeleteTemplatePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
DeployTemplate deploys template

Deploys a template
*/
func (a *Client) DeployTemplate(params *DeployTemplateParams) (*DeployTemplateOK, *DeployTemplateCreated, *DeployTemplateAccepted, *DeployTemplateNoContent, *DeployTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeployTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deployTemplate",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/deploy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeployTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeployTemplateOK:
		return value, nil, nil, nil, nil, nil
	case *DeployTemplateCreated:
		return nil, value, nil, nil, nil, nil
	case *DeployTemplateAccepted:
		return nil, nil, value, nil, nil, nil
	case *DeployTemplateNoContent:
		return nil, nil, nil, value, nil, nil
	case *DeployTemplatePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
GetProjects gets projects

Returns the projects in the system
*/
func (a *Client) GetProjects(params *GetProjectsParams) (*GetProjectsOK, *GetProjectsNoContent, *GetProjectsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProjects",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/template-programmer/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetProjectsOK:
		return value, nil, nil, nil
	case *GetProjectsNoContent:
		return nil, value, nil, nil
	case *GetProjectsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTemplateDeploymentStatus gets template deployment status

Returns the status of a deployed template.
*/
func (a *Client) GetTemplateDeploymentStatus(params *GetTemplateDeploymentStatusParams) (*GetTemplateDeploymentStatusOK, *GetTemplateDeploymentStatusNoContent, *GetTemplateDeploymentStatusPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateDeploymentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplateDeploymentStatus",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/deploy/status/{deploymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateDeploymentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTemplateDeploymentStatusOK:
		return value, nil, nil, nil
	case *GetTemplateDeploymentStatusNoContent:
		return nil, value, nil, nil
	case *GetTemplateDeploymentStatusPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTemplateDetails gets template details

Returns details of the specified template
*/
func (a *Client) GetTemplateDetails(params *GetTemplateDetailsParams) (*GetTemplateDetailsOK, *GetTemplateDetailsNoContent, *GetTemplateDetailsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplateDetails",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTemplateDetailsOK:
		return value, nil, nil, nil
	case *GetTemplateDetailsNoContent:
		return nil, value, nil, nil
	case *GetTemplateDetailsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetTemplateVersions gets template versions

Returns the versions of a specified template
*/
func (a *Client) GetTemplateVersions(params *GetTemplateVersionsParams) (*GetTemplateVersionsOK, *GetTemplateVersionsNoContent, *GetTemplateVersionsPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplateVersionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTemplateVersions",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/version/{templateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTemplateVersionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetTemplateVersionsOK:
		return value, nil, nil, nil
	case *GetTemplateVersionsNoContent:
		return nil, value, nil, nil
	case *GetTemplateVersionsPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
GetsTheTemplatesAvailable gets the templates available

List the templates available
*/
func (a *Client) GetsTheTemplatesAvailable(params *GetsTheTemplatesAvailableParams) (*GetsTheTemplatesAvailableOK, *GetsTheTemplatesAvailableNoContent, *GetsTheTemplatesAvailablePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetsTheTemplatesAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getsTheTemplatesAvailable",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetsTheTemplatesAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *GetsTheTemplatesAvailableOK:
		return value, nil, nil, nil
	case *GetsTheTemplatesAvailableNoContent:
		return nil, value, nil, nil
	case *GetsTheTemplatesAvailablePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
PreviewTemplate previews template

Previews an existing template
*/
func (a *Client) PreviewTemplate(params *PreviewTemplateParams) (*PreviewTemplateOK, *PreviewTemplateCreated, *PreviewTemplateAccepted, *PreviewTemplateNoContent, *PreviewTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreviewTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "previewTemplate",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PreviewTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *PreviewTemplateOK:
		return value, nil, nil, nil, nil, nil
	case *PreviewTemplateCreated:
		return nil, value, nil, nil, nil, nil
	case *PreviewTemplateAccepted:
		return nil, nil, value, nil, nil, nil
	case *PreviewTemplateNoContent:
		return nil, nil, nil, value, nil, nil
	case *PreviewTemplatePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateProject updates project

Updates an existing project
*/
func (a *Client) UpdateProject(params *UpdateProjectParams) (*UpdateProjectOK, *UpdateProjectCreated, *UpdateProjectAccepted, *UpdateProjectNoContent, *UpdateProjectPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProject",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/template-programmer/project",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProjectOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateProjectCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateProjectAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateProjectNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateProjectPartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
UpdateTemplate updates template

Updates an existing template
*/
func (a *Client) UpdateTemplate(params *UpdateTemplateParams) (*UpdateTemplateOK, *UpdateTemplateCreated, *UpdateTemplateAccepted, *UpdateTemplateNoContent, *UpdateTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTemplate",
		Method:             "PUT",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateTemplateOK:
		return value, nil, nil, nil, nil, nil
	case *UpdateTemplateCreated:
		return nil, value, nil, nil, nil, nil
	case *UpdateTemplateAccepted:
		return nil, nil, value, nil, nil, nil
	case *UpdateTemplateNoContent:
		return nil, nil, nil, value, nil, nil
	case *UpdateTemplatePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
VersionTemplate versions template

Creates Versioning for the current contents of the template
*/
func (a *Client) VersionTemplate(params *VersionTemplateParams) (*VersionTemplateOK, *VersionTemplateCreated, *VersionTemplateAccepted, *VersionTemplateNoContent, *VersionTemplatePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionTemplateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "versionTemplate",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/template-programmer/template/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VersionTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *VersionTemplateOK:
		return value, nil, nil, nil, nil, nil
	case *VersionTemplateCreated:
		return nil, value, nil, nil, nil, nil
	case *VersionTemplateAccepted:
		return nil, nil, value, nil, nil, nil
	case *VersionTemplateNoContent:
		return nil, nil, nil, value, nil, nil
	case *VersionTemplatePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
