// Code generated by go-swagger; DO NOT EDIT.

package template_programmer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// NewCreateTemplateParams creates a new CreateTemplateParams object
// with the default values initialized.
func NewCreateTemplateParams() *CreateTemplateParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &CreateTemplateParams{
		ContentType: contentTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTemplateParamsWithTimeout creates a new CreateTemplateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateTemplateParamsWithTimeout(timeout time.Duration) *CreateTemplateParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &CreateTemplateParams{
		ContentType: contentTypeDefault,

		timeout: timeout,
	}
}

// NewCreateTemplateParamsWithContext creates a new CreateTemplateParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateTemplateParamsWithContext(ctx context.Context) *CreateTemplateParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &CreateTemplateParams{
		ContentType: contentTypeDefault,

		Context: ctx,
	}
}

// NewCreateTemplateParamsWithHTTPClient creates a new CreateTemplateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateTemplateParamsWithHTTPClient(client *http.Client) *CreateTemplateParams {
	var (
		contentTypeDefault = string("application/json")
	)
	return &CreateTemplateParams{
		ContentType: contentTypeDefault,
		HTTPClient:  client,
	}
}

/*CreateTemplateParams contains all the parameters to send to the API endpoint
for the create template operation typically these are written to a http.Request
*/
type CreateTemplateParams struct {

	/*ContentType
	  Request body content type

	*/
	ContentType string
	/*ProjectID
	  projectId

	*/
	ProjectID string
	/*Request
	  request

	*/
	Request *models.TemplateDTO

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create template params
func (o *CreateTemplateParams) WithTimeout(timeout time.Duration) *CreateTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create template params
func (o *CreateTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create template params
func (o *CreateTemplateParams) WithContext(ctx context.Context) *CreateTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create template params
func (o *CreateTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create template params
func (o *CreateTemplateParams) WithHTTPClient(client *http.Client) *CreateTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create template params
func (o *CreateTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentType adds the contentType to the create template params
func (o *CreateTemplateParams) WithContentType(contentType string) *CreateTemplateParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the create template params
func (o *CreateTemplateParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithProjectID adds the projectID to the create template params
func (o *CreateTemplateParams) WithProjectID(projectID string) *CreateTemplateParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the create template params
func (o *CreateTemplateParams) SetProjectID(projectID string) {
	o.ProjectID = projectID
}

// WithRequest adds the request to the create template params
func (o *CreateTemplateParams) WithRequest(request *models.TemplateDTO) *CreateTemplateParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the create template params
func (o *CreateTemplateParams) SetRequest(request *models.TemplateDTO) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	// path param projectId
	if err := r.SetPathParam("projectId", o.ProjectID); err != nil {
		return err
	}

	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
