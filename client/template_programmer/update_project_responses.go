// Code generated by go-swagger; DO NOT EDIT.

package template_programmer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// UpdateProjectReader is a Reader for the UpdateProject structure.
type UpdateProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewUpdateProjectCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 202:
		result := NewUpdateProjectAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 204:
		result := NewUpdateProjectNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 206:
		result := NewUpdateProjectPartialContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateProjectConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateProjectUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 501:
		result := NewUpdateProjectNotImplemented()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 503:
		result := NewUpdateProjectServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewUpdateProjectGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateProjectOK creates a UpdateProjectOK with default headers values
func NewUpdateProjectOK() *UpdateProjectOK {
	return &UpdateProjectOK{}
}

/*UpdateProjectOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type UpdateProjectOK struct {
	Payload *models.TaskIDResult
}

func (o *UpdateProjectOK) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectOK  %+v", 200, o.Payload)
}

func (o *UpdateProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TaskIDResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProjectCreated creates a UpdateProjectCreated with default headers values
func NewUpdateProjectCreated() *UpdateProjectCreated {
	return &UpdateProjectCreated{}
}

/*UpdateProjectCreated handles this case with default header values.

The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body.
*/
type UpdateProjectCreated struct {
}

func (o *UpdateProjectCreated) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectCreated ", 201)
}

func (o *UpdateProjectCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectAccepted creates a UpdateProjectAccepted with default headers values
func NewUpdateProjectAccepted() *UpdateProjectAccepted {
	return &UpdateProjectAccepted{}
}

/*UpdateProjectAccepted handles this case with default header values.

The request was accepted for processing, but the processing has not been completed.
*/
type UpdateProjectAccepted struct {
}

func (o *UpdateProjectAccepted) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectAccepted ", 202)
}

func (o *UpdateProjectAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectNoContent creates a UpdateProjectNoContent with default headers values
func NewUpdateProjectNoContent() *UpdateProjectNoContent {
	return &UpdateProjectNoContent{}
}

/*UpdateProjectNoContent handles this case with default header values.

The request was successful, however no content was returned.
*/
type UpdateProjectNoContent struct {
}

func (o *UpdateProjectNoContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectNoContent ", 204)
}

func (o *UpdateProjectNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectPartialContent creates a UpdateProjectPartialContent with default headers values
func NewUpdateProjectPartialContent() *UpdateProjectPartialContent {
	return &UpdateProjectPartialContent{}
}

/*UpdateProjectPartialContent handles this case with default header values.

The GET request included a Range Header, and the server responded with the partial content matching the range.
*/
type UpdateProjectPartialContent struct {
}

func (o *UpdateProjectPartialContent) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectPartialContent ", 206)
}

func (o *UpdateProjectPartialContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectBadRequest creates a UpdateProjectBadRequest with default headers values
func NewUpdateProjectBadRequest() *UpdateProjectBadRequest {
	return &UpdateProjectBadRequest{}
}

/*UpdateProjectBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type UpdateProjectBadRequest struct {
}

func (o *UpdateProjectBadRequest) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectBadRequest ", 400)
}

func (o *UpdateProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectUnauthorized creates a UpdateProjectUnauthorized with default headers values
func NewUpdateProjectUnauthorized() *UpdateProjectUnauthorized {
	return &UpdateProjectUnauthorized{}
}

/*UpdateProjectUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type UpdateProjectUnauthorized struct {
}

func (o *UpdateProjectUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectUnauthorized ", 401)
}

func (o *UpdateProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectForbidden creates a UpdateProjectForbidden with default headers values
func NewUpdateProjectForbidden() *UpdateProjectForbidden {
	return &UpdateProjectForbidden{}
}

/*UpdateProjectForbidden handles this case with default header values.

The server recognizes the authentication credentials, but the client is not authorized to perform this request.
*/
type UpdateProjectForbidden struct {
}

func (o *UpdateProjectForbidden) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectForbidden ", 403)
}

func (o *UpdateProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectNotFound creates a UpdateProjectNotFound with default headers values
func NewUpdateProjectNotFound() *UpdateProjectNotFound {
	return &UpdateProjectNotFound{}
}

/*UpdateProjectNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type UpdateProjectNotFound struct {
}

func (o *UpdateProjectNotFound) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectNotFound ", 404)
}

func (o *UpdateProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectConflict creates a UpdateProjectConflict with default headers values
func NewUpdateProjectConflict() *UpdateProjectConflict {
	return &UpdateProjectConflict{}
}

/*UpdateProjectConflict handles this case with default header values.

The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed.
*/
type UpdateProjectConflict struct {
}

func (o *UpdateProjectConflict) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectConflict ", 409)
}

func (o *UpdateProjectConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectUnsupportedMediaType creates a UpdateProjectUnsupportedMediaType with default headers values
func NewUpdateProjectUnsupportedMediaType() *UpdateProjectUnsupportedMediaType {
	return &UpdateProjectUnsupportedMediaType{}
}

/*UpdateProjectUnsupportedMediaType handles this case with default header values.

The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON).
*/
type UpdateProjectUnsupportedMediaType struct {
}

func (o *UpdateProjectUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectUnsupportedMediaType ", 415)
}

func (o *UpdateProjectUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectInternalServerError creates a UpdateProjectInternalServerError with default headers values
func NewUpdateProjectInternalServerError() *UpdateProjectInternalServerError {
	return &UpdateProjectInternalServerError{}
}

/*UpdateProjectInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type UpdateProjectInternalServerError struct {
}

func (o *UpdateProjectInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectInternalServerError ", 500)
}

func (o *UpdateProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectNotImplemented creates a UpdateProjectNotImplemented with default headers values
func NewUpdateProjectNotImplemented() *UpdateProjectNotImplemented {
	return &UpdateProjectNotImplemented{}
}

/*UpdateProjectNotImplemented handles this case with default header values.

The server has not implemented the functionality required to fulfill the request.
*/
type UpdateProjectNotImplemented struct {
}

func (o *UpdateProjectNotImplemented) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectNotImplemented ", 501)
}

func (o *UpdateProjectNotImplemented) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectServiceUnavailable creates a UpdateProjectServiceUnavailable with default headers values
func NewUpdateProjectServiceUnavailable() *UpdateProjectServiceUnavailable {
	return &UpdateProjectServiceUnavailable{}
}

/*UpdateProjectServiceUnavailable handles this case with default header values.

The server is (temporarily) unavailable.
*/
type UpdateProjectServiceUnavailable struct {
}

func (o *UpdateProjectServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectServiceUnavailable ", 503)
}

func (o *UpdateProjectServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProjectGatewayTimeout creates a UpdateProjectGatewayTimeout with default headers values
func NewUpdateProjectGatewayTimeout() *UpdateProjectGatewayTimeout {
	return &UpdateProjectGatewayTimeout{}
}

/*UpdateProjectGatewayTimeout handles this case with default header values.

The server did not respond inside time restrictions and timed-out.
*/
type UpdateProjectGatewayTimeout struct {
}

func (o *UpdateProjectGatewayTimeout) Error() string {
	return fmt.Sprintf("[PUT /dna/intent/api/v1/template-programmer/project][%d] updateProjectGatewayTimeout ", 504)
}

func (o *UpdateProjectGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
