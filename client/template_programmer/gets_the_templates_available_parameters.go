// Code generated by go-swagger; DO NOT EDIT.

package template_programmer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetsTheTemplatesAvailableParams creates a new GetsTheTemplatesAvailableParams object
// with the default values initialized.
func NewGetsTheTemplatesAvailableParams() *GetsTheTemplatesAvailableParams {
	var ()
	return &GetsTheTemplatesAvailableParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetsTheTemplatesAvailableParamsWithTimeout creates a new GetsTheTemplatesAvailableParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetsTheTemplatesAvailableParamsWithTimeout(timeout time.Duration) *GetsTheTemplatesAvailableParams {
	var ()
	return &GetsTheTemplatesAvailableParams{

		timeout: timeout,
	}
}

// NewGetsTheTemplatesAvailableParamsWithContext creates a new GetsTheTemplatesAvailableParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetsTheTemplatesAvailableParamsWithContext(ctx context.Context) *GetsTheTemplatesAvailableParams {
	var ()
	return &GetsTheTemplatesAvailableParams{

		Context: ctx,
	}
}

// NewGetsTheTemplatesAvailableParamsWithHTTPClient creates a new GetsTheTemplatesAvailableParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetsTheTemplatesAvailableParamsWithHTTPClient(client *http.Client) *GetsTheTemplatesAvailableParams {
	var ()
	return &GetsTheTemplatesAvailableParams{
		HTTPClient: client,
	}
}

/*GetsTheTemplatesAvailableParams contains all the parameters to send to the API endpoint
for the gets the templates available operation typically these are written to a http.Request
*/
type GetsTheTemplatesAvailableParams struct {

	/*FilterConflictingTemplates
	  filterConflictingTemplates

	*/
	FilterConflictingTemplates *bool
	/*ProductFamily
	  productFamily

	*/
	ProductFamily *string
	/*ProductSeries
	  productSeries

	*/
	ProductSeries *string
	/*ProductType
	  productType

	*/
	ProductType *string
	/*ProjectID
	  projectId

	*/
	ProjectID *string
	/*SoftwareType
	  softwareType

	*/
	SoftwareType *string
	/*SoftwareVersion
	  softwareVersion

	*/
	SoftwareVersion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithTimeout(timeout time.Duration) *GetsTheTemplatesAvailableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithContext(ctx context.Context) *GetsTheTemplatesAvailableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithHTTPClient(client *http.Client) *GetsTheTemplatesAvailableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilterConflictingTemplates adds the filterConflictingTemplates to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithFilterConflictingTemplates(filterConflictingTemplates *bool) *GetsTheTemplatesAvailableParams {
	o.SetFilterConflictingTemplates(filterConflictingTemplates)
	return o
}

// SetFilterConflictingTemplates adds the filterConflictingTemplates to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetFilterConflictingTemplates(filterConflictingTemplates *bool) {
	o.FilterConflictingTemplates = filterConflictingTemplates
}

// WithProductFamily adds the productFamily to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithProductFamily(productFamily *string) *GetsTheTemplatesAvailableParams {
	o.SetProductFamily(productFamily)
	return o
}

// SetProductFamily adds the productFamily to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetProductFamily(productFamily *string) {
	o.ProductFamily = productFamily
}

// WithProductSeries adds the productSeries to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithProductSeries(productSeries *string) *GetsTheTemplatesAvailableParams {
	o.SetProductSeries(productSeries)
	return o
}

// SetProductSeries adds the productSeries to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetProductSeries(productSeries *string) {
	o.ProductSeries = productSeries
}

// WithProductType adds the productType to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithProductType(productType *string) *GetsTheTemplatesAvailableParams {
	o.SetProductType(productType)
	return o
}

// SetProductType adds the productType to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetProductType(productType *string) {
	o.ProductType = productType
}

// WithProjectID adds the projectID to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithProjectID(projectID *string) *GetsTheTemplatesAvailableParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetProjectID(projectID *string) {
	o.ProjectID = projectID
}

// WithSoftwareType adds the softwareType to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithSoftwareType(softwareType *string) *GetsTheTemplatesAvailableParams {
	o.SetSoftwareType(softwareType)
	return o
}

// SetSoftwareType adds the softwareType to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetSoftwareType(softwareType *string) {
	o.SoftwareType = softwareType
}

// WithSoftwareVersion adds the softwareVersion to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) WithSoftwareVersion(softwareVersion *string) *GetsTheTemplatesAvailableParams {
	o.SetSoftwareVersion(softwareVersion)
	return o
}

// SetSoftwareVersion adds the softwareVersion to the gets the templates available params
func (o *GetsTheTemplatesAvailableParams) SetSoftwareVersion(softwareVersion *string) {
	o.SoftwareVersion = softwareVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetsTheTemplatesAvailableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilterConflictingTemplates != nil {

		// query param filterConflictingTemplates
		var qrFilterConflictingTemplates bool
		if o.FilterConflictingTemplates != nil {
			qrFilterConflictingTemplates = *o.FilterConflictingTemplates
		}
		qFilterConflictingTemplates := swag.FormatBool(qrFilterConflictingTemplates)
		if qFilterConflictingTemplates != "" {
			if err := r.SetQueryParam("filterConflictingTemplates", qFilterConflictingTemplates); err != nil {
				return err
			}
		}

	}

	if o.ProductFamily != nil {

		// query param productFamily
		var qrProductFamily string
		if o.ProductFamily != nil {
			qrProductFamily = *o.ProductFamily
		}
		qProductFamily := qrProductFamily
		if qProductFamily != "" {
			if err := r.SetQueryParam("productFamily", qProductFamily); err != nil {
				return err
			}
		}

	}

	if o.ProductSeries != nil {

		// query param productSeries
		var qrProductSeries string
		if o.ProductSeries != nil {
			qrProductSeries = *o.ProductSeries
		}
		qProductSeries := qrProductSeries
		if qProductSeries != "" {
			if err := r.SetQueryParam("productSeries", qProductSeries); err != nil {
				return err
			}
		}

	}

	if o.ProductType != nil {

		// query param productType
		var qrProductType string
		if o.ProductType != nil {
			qrProductType = *o.ProductType
		}
		qProductType := qrProductType
		if qProductType != "" {
			if err := r.SetQueryParam("productType", qProductType); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID string
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := qrProjectID
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if o.SoftwareType != nil {

		// query param softwareType
		var qrSoftwareType string
		if o.SoftwareType != nil {
			qrSoftwareType = *o.SoftwareType
		}
		qSoftwareType := qrSoftwareType
		if qSoftwareType != "" {
			if err := r.SetQueryParam("softwareType", qSoftwareType); err != nil {
				return err
			}
		}

	}

	if o.SoftwareVersion != nil {

		// query param softwareVersion
		var qrSoftwareVersion string
		if o.SoftwareVersion != nil {
			qrSoftwareVersion = *o.SoftwareVersion
		}
		qSoftwareVersion := qrSoftwareVersion
		if qSoftwareVersion != "" {
			if err := r.SetQueryParam("softwareVersion", qSoftwareVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
