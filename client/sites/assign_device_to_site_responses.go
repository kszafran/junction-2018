// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/kszafran/junction-2018/models"
)

// AssignDeviceToSiteReader is a Reader for the AssignDeviceToSite structure.
type AssignDeviceToSiteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignDeviceToSiteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAssignDeviceToSiteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAssignDeviceToSiteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAssignDeviceToSiteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAssignDeviceToSiteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAssignDeviceToSiteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAssignDeviceToSiteOK creates a AssignDeviceToSiteOK with default headers values
func NewAssignDeviceToSiteOK() *AssignDeviceToSiteOK {
	return &AssignDeviceToSiteOK{}
}

/*AssignDeviceToSiteOK handles this case with default header values.

The request was successful. The result is contained in the response body.
*/
type AssignDeviceToSiteOK struct {
	Payload *models.AssignDeviceToSiteResponse
}

func (o *AssignDeviceToSiteOK) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/site/{siteId}/device][%d] assignDeviceToSiteOK  %+v", 200, o.Payload)
}

func (o *AssignDeviceToSiteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AssignDeviceToSiteResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignDeviceToSiteBadRequest creates a AssignDeviceToSiteBadRequest with default headers values
func NewAssignDeviceToSiteBadRequest() *AssignDeviceToSiteBadRequest {
	return &AssignDeviceToSiteBadRequest{}
}

/*AssignDeviceToSiteBadRequest handles this case with default header values.

The client made a request that the server could not understand (for example, the request syntax is incorrect).
*/
type AssignDeviceToSiteBadRequest struct {
}

func (o *AssignDeviceToSiteBadRequest) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/site/{siteId}/device][%d] assignDeviceToSiteBadRequest ", 400)
}

func (o *AssignDeviceToSiteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignDeviceToSiteUnauthorized creates a AssignDeviceToSiteUnauthorized with default headers values
func NewAssignDeviceToSiteUnauthorized() *AssignDeviceToSiteUnauthorized {
	return &AssignDeviceToSiteUnauthorized{}
}

/*AssignDeviceToSiteUnauthorized handles this case with default header values.

The client's authentication credentials included with the request are missing or invalid.
*/
type AssignDeviceToSiteUnauthorized struct {
}

func (o *AssignDeviceToSiteUnauthorized) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/site/{siteId}/device][%d] assignDeviceToSiteUnauthorized ", 401)
}

func (o *AssignDeviceToSiteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignDeviceToSiteNotFound creates a AssignDeviceToSiteNotFound with default headers values
func NewAssignDeviceToSiteNotFound() *AssignDeviceToSiteNotFound {
	return &AssignDeviceToSiteNotFound{}
}

/*AssignDeviceToSiteNotFound handles this case with default header values.

The client made a request for a resource that does not exist.
*/
type AssignDeviceToSiteNotFound struct {
}

func (o *AssignDeviceToSiteNotFound) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/site/{siteId}/device][%d] assignDeviceToSiteNotFound ", 404)
}

func (o *AssignDeviceToSiteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAssignDeviceToSiteInternalServerError creates a AssignDeviceToSiteInternalServerError with default headers values
func NewAssignDeviceToSiteInternalServerError() *AssignDeviceToSiteInternalServerError {
	return &AssignDeviceToSiteInternalServerError{}
}

/*AssignDeviceToSiteInternalServerError handles this case with default header values.

The server could not fulfill the request.
*/
type AssignDeviceToSiteInternalServerError struct {
}

func (o *AssignDeviceToSiteInternalServerError) Error() string {
	return fmt.Sprintf("[POST /dna/intent/api/v1/site/{siteId}/device][%d] assignDeviceToSiteInternalServerError ", 500)
}

func (o *AssignDeviceToSiteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
