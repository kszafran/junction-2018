// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new sites API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sites API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AssignDeviceToSite assigns device to site

API to assign a list of ENCS devices to a site.
*/
func (a *Client) AssignDeviceToSite(params *AssignDeviceToSiteParams) (*AssignDeviceToSiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignDeviceToSiteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "assignDeviceToSite",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/site/{siteId}/device",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignDeviceToSiteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AssignDeviceToSiteOK), nil

}

/*
CreateSite creates site

API to create an area/building/floor with a specified hierarchy.  This api looks for the type attribute to create the corresponding site.
*/
func (a *Client) CreateSite(params *CreateSiteParams) (*CreateSiteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSiteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSite",
		Method:             "POST",
		PathPattern:        "/dna/system/api/v1/site",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSiteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSiteOK), nil

}

/*
GetSiteHealth gets site health

Returns Overall Health information for all sites
*/
func (a *Client) GetSiteHealth(params *GetSiteHealthParams) (*GetSiteHealthOK, *GetSiteHealthAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSiteHealthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSiteHealth",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/site-health",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSiteHealthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetSiteHealthOK:
		return value, nil, nil
	case *GetSiteHealthAccepted:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
