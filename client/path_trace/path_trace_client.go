// Code generated by go-swagger; DO NOT EDIT.

package path_trace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new path trace API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for path trace API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletesPathtraceByID deletes pathtrace by Id

Deletes a flow analysis request by its id
*/
func (a *Client) DeletesPathtraceByID(params *DeletesPathtraceByIDParams) (*DeletesPathtraceByIDOK, *DeletesPathtraceByIDNoContent, *DeletesPathtraceByIDPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletesPathtraceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletesPathtraceById",
		Method:             "DELETE",
		PathPattern:        "/dna/intent/api/v1/flow-analysis/{flowAnalysisId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletesPathtraceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *DeletesPathtraceByIDOK:
		return value, nil, nil, nil
	case *DeletesPathtraceByIDNoContent:
		return nil, value, nil, nil
	case *DeletesPathtraceByIDPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
InitiateANewPathtrace initiates a new pathtrace

Initiates a new flow analysis with periodic refresh and stat collection options. Returns a request id and a task id to get results and follow progress.
*/
func (a *Client) InitiateANewPathtrace(params *InitiateANewPathtraceParams) (*InitiateANewPathtraceOK, *InitiateANewPathtraceCreated, *InitiateANewPathtraceAccepted, *InitiateANewPathtraceNoContent, *InitiateANewPathtracePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitiateANewPathtraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "initiateANewPathtrace",
		Method:             "POST",
		PathPattern:        "/dna/intent/api/v1/flow-analysis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitiateANewPathtraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, nil, nil, err
	}
	switch value := result.(type) {
	case *InitiateANewPathtraceOK:
		return value, nil, nil, nil, nil, nil
	case *InitiateANewPathtraceCreated:
		return nil, value, nil, nil, nil, nil
	case *InitiateANewPathtraceAccepted:
		return nil, nil, value, nil, nil, nil
	case *InitiateANewPathtraceNoContent:
		return nil, nil, nil, value, nil, nil
	case *InitiateANewPathtracePartialContent:
		return nil, nil, nil, nil, value, nil
	}
	return nil, nil, nil, nil, nil, nil

}

/*
RetrievesPreviousPathtrace retrieves previous pathtrace

Returns result of a previously requested flow analysis by its Flow Analysis id
*/
func (a *Client) RetrievesPreviousPathtrace(params *RetrievesPreviousPathtraceParams) (*RetrievesPreviousPathtraceOK, *RetrievesPreviousPathtraceNoContent, *RetrievesPreviousPathtracePartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrievesPreviousPathtraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrievesPreviousPathtrace",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/flow-analysis/{flowAnalysisId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrievesPreviousPathtraceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RetrievesPreviousPathtraceOK:
		return value, nil, nil, nil
	case *RetrievesPreviousPathtraceNoContent:
		return nil, value, nil, nil
	case *RetrievesPreviousPathtracePartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

/*
RetrivesAllPreviousPathtracesSummary retrives all previous pathtraces summary

Returns a summary of all flow analyses stored. Results can be filtered by specified parameters.
*/
func (a *Client) RetrivesAllPreviousPathtracesSummary(params *RetrivesAllPreviousPathtracesSummaryParams) (*RetrivesAllPreviousPathtracesSummaryOK, *RetrivesAllPreviousPathtracesSummaryNoContent, *RetrivesAllPreviousPathtracesSummaryPartialContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrivesAllPreviousPathtracesSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retrivesAllPreviousPathtracesSummary",
		Method:             "GET",
		PathPattern:        "/dna/intent/api/v1/flow-analysis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrivesAllPreviousPathtracesSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *RetrivesAllPreviousPathtracesSummaryOK:
		return value, nil, nil, nil
	case *RetrivesAllPreviousPathtracesSummaryNoContent:
		return nil, value, nil, nil
	case *RetrivesAllPreviousPathtracesSummaryPartialContent:
		return nil, nil, value, nil
	}
	return nil, nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
