// Code generated by go-swagger; DO NOT EDIT.

package path_trace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRetrivesAllPreviousPathtracesSummaryParams creates a new RetrivesAllPreviousPathtracesSummaryParams object
// with the default values initialized.
func NewRetrivesAllPreviousPathtracesSummaryParams() *RetrivesAllPreviousPathtracesSummaryParams {
	var ()
	return &RetrivesAllPreviousPathtracesSummaryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRetrivesAllPreviousPathtracesSummaryParamsWithTimeout creates a new RetrivesAllPreviousPathtracesSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRetrivesAllPreviousPathtracesSummaryParamsWithTimeout(timeout time.Duration) *RetrivesAllPreviousPathtracesSummaryParams {
	var ()
	return &RetrivesAllPreviousPathtracesSummaryParams{

		timeout: timeout,
	}
}

// NewRetrivesAllPreviousPathtracesSummaryParamsWithContext creates a new RetrivesAllPreviousPathtracesSummaryParams object
// with the default values initialized, and the ability to set a context for a request
func NewRetrivesAllPreviousPathtracesSummaryParamsWithContext(ctx context.Context) *RetrivesAllPreviousPathtracesSummaryParams {
	var ()
	return &RetrivesAllPreviousPathtracesSummaryParams{

		Context: ctx,
	}
}

// NewRetrivesAllPreviousPathtracesSummaryParamsWithHTTPClient creates a new RetrivesAllPreviousPathtracesSummaryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRetrivesAllPreviousPathtracesSummaryParamsWithHTTPClient(client *http.Client) *RetrivesAllPreviousPathtracesSummaryParams {
	var ()
	return &RetrivesAllPreviousPathtracesSummaryParams{
		HTTPClient: client,
	}
}

/*RetrivesAllPreviousPathtracesSummaryParams contains all the parameters to send to the API endpoint
for the retrives all previous pathtraces summary operation typically these are written to a http.Request
*/
type RetrivesAllPreviousPathtracesSummaryParams struct {

	/*DestIP
	  Destination IP adress

	*/
	DestIP *string
	/*DestPort
	  Destination port

	*/
	DestPort *string
	/*GtCreateTime
	  Analyses requested after this time

	*/
	GtCreateTime *string
	/*LastUpdateTime
	  Last update time

	*/
	LastUpdateTime *string
	/*Limit
	  Number of resources returned

	*/
	Limit *string
	/*LtCreateTime
	  Analyses requested before this time

	*/
	LtCreateTime *string
	/*Offset
	  Start index of resources returned (1-based)

	*/
	Offset *string
	/*Order
	  Order by this field

	*/
	Order *string
	/*PeriodicRefresh
	  Is analysis periodically refreshed?

	*/
	PeriodicRefresh *bool
	/*Protocol
	  Protocol

	*/
	Protocol *string
	/*SortBy
	  Sort by this field

	*/
	SortBy *string
	/*SourceIP
	  Source IP address

	*/
	SourceIP *string
	/*SourcePort
	  Source port

	*/
	SourcePort *string
	/*Status
	  Status

	*/
	Status *string
	/*TaskID
	  Task ID

	*/
	TaskID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithTimeout(timeout time.Duration) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithContext(ctx context.Context) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithHTTPClient(client *http.Client) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDestIP adds the destIP to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithDestIP(destIP *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetDestIP(destIP)
	return o
}

// SetDestIP adds the destIp to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetDestIP(destIP *string) {
	o.DestIP = destIP
}

// WithDestPort adds the destPort to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithDestPort(destPort *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetDestPort(destPort)
	return o
}

// SetDestPort adds the destPort to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetDestPort(destPort *string) {
	o.DestPort = destPort
}

// WithGtCreateTime adds the gtCreateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithGtCreateTime(gtCreateTime *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetGtCreateTime(gtCreateTime)
	return o
}

// SetGtCreateTime adds the gtCreateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetGtCreateTime(gtCreateTime *string) {
	o.GtCreateTime = gtCreateTime
}

// WithLastUpdateTime adds the lastUpdateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithLastUpdateTime(lastUpdateTime *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetLastUpdateTime(lastUpdateTime)
	return o
}

// SetLastUpdateTime adds the lastUpdateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetLastUpdateTime(lastUpdateTime *string) {
	o.LastUpdateTime = lastUpdateTime
}

// WithLimit adds the limit to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithLimit(limit *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithLtCreateTime adds the ltCreateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithLtCreateTime(ltCreateTime *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetLtCreateTime(ltCreateTime)
	return o
}

// SetLtCreateTime adds the ltCreateTime to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetLtCreateTime(ltCreateTime *string) {
	o.LtCreateTime = ltCreateTime
}

// WithOffset adds the offset to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithOffset(offset *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetOffset(offset *string) {
	o.Offset = offset
}

// WithOrder adds the order to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithOrder(order *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetOrder(order *string) {
	o.Order = order
}

// WithPeriodicRefresh adds the periodicRefresh to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithPeriodicRefresh(periodicRefresh *bool) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetPeriodicRefresh(periodicRefresh)
	return o
}

// SetPeriodicRefresh adds the periodicRefresh to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetPeriodicRefresh(periodicRefresh *bool) {
	o.PeriodicRefresh = periodicRefresh
}

// WithProtocol adds the protocol to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithProtocol(protocol *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithSortBy adds the sortBy to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithSortBy(sortBy *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSourceIP adds the sourceIP to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithSourceIP(sourceIP *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetSourceIP(sourceIP)
	return o
}

// SetSourceIP adds the sourceIp to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetSourceIP(sourceIP *string) {
	o.SourceIP = sourceIP
}

// WithSourcePort adds the sourcePort to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithSourcePort(sourcePort *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetSourcePort(sourcePort)
	return o
}

// SetSourcePort adds the sourcePort to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetSourcePort(sourcePort *string) {
	o.SourcePort = sourcePort
}

// WithStatus adds the status to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithStatus(status *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetStatus(status *string) {
	o.Status = status
}

// WithTaskID adds the taskID to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) WithTaskID(taskID *string) *RetrivesAllPreviousPathtracesSummaryParams {
	o.SetTaskID(taskID)
	return o
}

// SetTaskID adds the taskId to the retrives all previous pathtraces summary params
func (o *RetrivesAllPreviousPathtracesSummaryParams) SetTaskID(taskID *string) {
	o.TaskID = taskID
}

// WriteToRequest writes these params to a swagger request
func (o *RetrivesAllPreviousPathtracesSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DestIP != nil {

		// query param destIP
		var qrDestIP string
		if o.DestIP != nil {
			qrDestIP = *o.DestIP
		}
		qDestIP := qrDestIP
		if qDestIP != "" {
			if err := r.SetQueryParam("destIP", qDestIP); err != nil {
				return err
			}
		}

	}

	if o.DestPort != nil {

		// query param destPort
		var qrDestPort string
		if o.DestPort != nil {
			qrDestPort = *o.DestPort
		}
		qDestPort := qrDestPort
		if qDestPort != "" {
			if err := r.SetQueryParam("destPort", qDestPort); err != nil {
				return err
			}
		}

	}

	if o.GtCreateTime != nil {

		// query param gtCreateTime
		var qrGtCreateTime string
		if o.GtCreateTime != nil {
			qrGtCreateTime = *o.GtCreateTime
		}
		qGtCreateTime := qrGtCreateTime
		if qGtCreateTime != "" {
			if err := r.SetQueryParam("gtCreateTime", qGtCreateTime); err != nil {
				return err
			}
		}

	}

	if o.LastUpdateTime != nil {

		// query param lastUpdateTime
		var qrLastUpdateTime string
		if o.LastUpdateTime != nil {
			qrLastUpdateTime = *o.LastUpdateTime
		}
		qLastUpdateTime := qrLastUpdateTime
		if qLastUpdateTime != "" {
			if err := r.SetQueryParam("lastUpdateTime", qLastUpdateTime); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LtCreateTime != nil {

		// query param ltCreateTime
		var qrLtCreateTime string
		if o.LtCreateTime != nil {
			qrLtCreateTime = *o.LtCreateTime
		}
		qLtCreateTime := qrLtCreateTime
		if qLtCreateTime != "" {
			if err := r.SetQueryParam("ltCreateTime", qLtCreateTime); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset string
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := qrOffset
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Order != nil {

		// query param order
		var qrOrder string
		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {
			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}

	}

	if o.PeriodicRefresh != nil {

		// query param periodicRefresh
		var qrPeriodicRefresh bool
		if o.PeriodicRefresh != nil {
			qrPeriodicRefresh = *o.PeriodicRefresh
		}
		qPeriodicRefresh := swag.FormatBool(qrPeriodicRefresh)
		if qPeriodicRefresh != "" {
			if err := r.SetQueryParam("periodicRefresh", qPeriodicRefresh); err != nil {
				return err
			}
		}

	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string
		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {
			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SourceIP != nil {

		// query param sourceIP
		var qrSourceIP string
		if o.SourceIP != nil {
			qrSourceIP = *o.SourceIP
		}
		qSourceIP := qrSourceIP
		if qSourceIP != "" {
			if err := r.SetQueryParam("sourceIP", qSourceIP); err != nil {
				return err
			}
		}

	}

	if o.SourcePort != nil {

		// query param sourcePort
		var qrSourcePort string
		if o.SourcePort != nil {
			qrSourcePort = *o.SourcePort
		}
		qSourcePort := qrSourcePort
		if qSourcePort != "" {
			if err := r.SetQueryParam("sourcePort", qSourcePort); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.TaskID != nil {

		// query param taskId
		var qrTaskID string
		if o.TaskID != nil {
			qrTaskID = *o.TaskID
		}
		qTaskID := qrTaskID
		if qTaskID != "" {
			if err := r.SetQueryParam("taskId", qTaskID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
