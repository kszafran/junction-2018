// Code generated by go-swagger; DO NOT EDIT.

package path_trace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRetrievesPreviousPathtraceParams creates a new RetrievesPreviousPathtraceParams object
// with the default values initialized.
func NewRetrievesPreviousPathtraceParams() *RetrievesPreviousPathtraceParams {
	var ()
	return &RetrievesPreviousPathtraceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRetrievesPreviousPathtraceParamsWithTimeout creates a new RetrievesPreviousPathtraceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRetrievesPreviousPathtraceParamsWithTimeout(timeout time.Duration) *RetrievesPreviousPathtraceParams {
	var ()
	return &RetrievesPreviousPathtraceParams{

		timeout: timeout,
	}
}

// NewRetrievesPreviousPathtraceParamsWithContext creates a new RetrievesPreviousPathtraceParams object
// with the default values initialized, and the ability to set a context for a request
func NewRetrievesPreviousPathtraceParamsWithContext(ctx context.Context) *RetrievesPreviousPathtraceParams {
	var ()
	return &RetrievesPreviousPathtraceParams{

		Context: ctx,
	}
}

// NewRetrievesPreviousPathtraceParamsWithHTTPClient creates a new RetrievesPreviousPathtraceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRetrievesPreviousPathtraceParamsWithHTTPClient(client *http.Client) *RetrievesPreviousPathtraceParams {
	var ()
	return &RetrievesPreviousPathtraceParams{
		HTTPClient: client,
	}
}

/*RetrievesPreviousPathtraceParams contains all the parameters to send to the API endpoint
for the retrieves previous pathtrace operation typically these are written to a http.Request
*/
type RetrievesPreviousPathtraceParams struct {

	/*FlowAnalysisID
	  Flow analysis request id

	*/
	FlowAnalysisID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) WithTimeout(timeout time.Duration) *RetrievesPreviousPathtraceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) WithContext(ctx context.Context) *RetrievesPreviousPathtraceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) WithHTTPClient(client *http.Client) *RetrievesPreviousPathtraceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlowAnalysisID adds the flowAnalysisID to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) WithFlowAnalysisID(flowAnalysisID string) *RetrievesPreviousPathtraceParams {
	o.SetFlowAnalysisID(flowAnalysisID)
	return o
}

// SetFlowAnalysisID adds the flowAnalysisId to the retrieves previous pathtrace params
func (o *RetrievesPreviousPathtraceParams) SetFlowAnalysisID(flowAnalysisID string) {
	o.FlowAnalysisID = flowAnalysisID
}

// WriteToRequest writes these params to a swagger request
func (o *RetrievesPreviousPathtraceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param flowAnalysisId
	if err := r.SetPathParam("flowAnalysisId", o.FlowAnalysisID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
