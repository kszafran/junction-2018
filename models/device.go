// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Device device
// swagger:model Device
type Device struct {

	// id
	ID string `json:"_id,omitempty"`

	// day zero config
	DayZeroConfig *DeviceDayZeroConfig `json:"dayZeroConfig,omitempty"`

	// day zero config preview
	DayZeroConfigPreview interface{} `json:"dayZeroConfigPreview,omitempty"`

	// device info
	DeviceInfo *DeviceDeviceInfo `json:"deviceInfo,omitempty"`

	// run summary list
	RunSummaryList []*DeviceRunSummaryListItems0 `json:"runSummaryList"`

	// system reset workflow
	SystemResetWorkflow *DeviceSystemResetWorkflow `json:"systemResetWorkflow,omitempty"`

	// system workflow
	SystemWorkflow *DeviceSystemWorkflow `json:"systemWorkflow,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`

	// workflow
	Workflow *DeviceWorkflow `json:"workflow,omitempty"`

	// workflow parameters
	WorkflowParameters *DeviceWorkflowParameters `json:"workflowParameters,omitempty"`
}

// Validate validates this device
func (m *Device) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayZeroConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSummaryList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemResetWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflowParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Device) validateDayZeroConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.DayZeroConfig) { // not required
		return nil
	}

	if m.DayZeroConfig != nil {
		if err := m.DayZeroConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dayZeroConfig")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateDeviceInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceInfo) { // not required
		return nil
	}

	if m.DeviceInfo != nil {
		if err := m.DeviceInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateRunSummaryList(formats strfmt.Registry) error {

	if swag.IsZero(m.RunSummaryList) { // not required
		return nil
	}

	for i := 0; i < len(m.RunSummaryList); i++ {
		if swag.IsZero(m.RunSummaryList[i]) { // not required
			continue
		}

		if m.RunSummaryList[i] != nil {
			if err := m.RunSummaryList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runSummaryList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Device) validateSystemResetWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemResetWorkflow) { // not required
		return nil
	}

	if m.SystemResetWorkflow != nil {
		if err := m.SystemResetWorkflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemResetWorkflow")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateSystemWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemWorkflow) { // not required
		return nil
	}

	if m.SystemWorkflow != nil {
		if err := m.SystemWorkflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("systemWorkflow")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflow) { // not required
		return nil
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

func (m *Device) validateWorkflowParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkflowParameters) { // not required
		return nil
	}

	if m.WorkflowParameters != nil {
		if err := m.WorkflowParameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflowParameters")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Device) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Device) UnmarshalBinary(b []byte) error {
	var res Device
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDayZeroConfig device day zero config
// swagger:model DeviceDayZeroConfig
type DeviceDayZeroConfig struct {

	// config
	Config string `json:"config,omitempty"`
}

// Validate validates this device day zero config
func (m *DeviceDayZeroConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDayZeroConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDayZeroConfig) UnmarshalBinary(b []byte) error {
	var res DeviceDayZeroConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfo device device info
// swagger:model DeviceDeviceInfo
type DeviceDeviceInfo struct {

	// aaa credentials
	AaaCredentials *DeviceDeviceInfoAaaCredentials `json:"aaaCredentials,omitempty"`

	// added on
	AddedOn float64 `json:"addedOn,omitempty"`

	// addn mac addrs
	AddnMacAddrs []string `json:"addnMacAddrs"`

	// agent type
	AgentType string `json:"agentType,omitempty"`

	// auth status
	AuthStatus string `json:"authStatus,omitempty"`

	// authenticated mic number
	AuthenticatedMicNumber string `json:"authenticatedMicNumber,omitempty"`

	// authenticated sudi serial no
	AuthenticatedSudiSerialNo string `json:"authenticatedSudiSerialNo,omitempty"`

	// capabilities supported
	CapabilitiesSupported []string `json:"capabilitiesSupported"`

	// cm state
	CmState string `json:"cmState,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// device sudi serial nos
	DeviceSudiSerialNos []string `json:"deviceSudiSerialNos"`

	// device type
	DeviceType string `json:"deviceType,omitempty"`

	// features supported
	FeaturesSupported []string `json:"featuresSupported"`

	// file system list
	FileSystemList []*DeviceDeviceInfoFileSystemListItems0 `json:"fileSystemList"`

	// first contact
	FirstContact float64 `json:"firstContact,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// http headers
	HTTPHeaders []*DeviceDeviceInfoHTTPHeadersItems0 `json:"httpHeaders"`

	// image file
	ImageFile string `json:"imageFile,omitempty"`

	// image version
	ImageVersion string `json:"imageVersion,omitempty"`

	// ip interfaces
	IPInterfaces []*DeviceDeviceInfoIPInterfacesItems0 `json:"ipInterfaces"`

	// last contact
	LastContact float64 `json:"lastContact,omitempty"`

	// last sync time
	LastSyncTime float64 `json:"lastSyncTime,omitempty"`

	// last update on
	LastUpdateOn float64 `json:"lastUpdateOn,omitempty"`

	// location
	Location *DeviceDeviceInfoLocation `json:"location,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// neighbor links
	NeighborLinks []*DeviceDeviceInfoNeighborLinksItems0 `json:"neighborLinks"`

	// onb state
	OnbState string `json:"onbState,omitempty"`

	// pid
	Pid string `json:"pid,omitempty"`

	// pnp profile list
	PnpProfileList []*DeviceDeviceInfoPnpProfileListItems0 `json:"pnpProfileList"`

	// populate inventory
	PopulateInventory bool `json:"populateInventory,omitempty"`

	// pre workflow cli ouputs
	PreWorkflowCliOuputs []*DeviceDeviceInfoPreWorkflowCliOuputsItems0 `json:"preWorkflowCliOuputs"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// reload requested
	ReloadRequested bool `json:"reloadRequested,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// site Id
	SiteID string `json:"siteId,omitempty"`

	// site name
	SiteName string `json:"siteName,omitempty"`

	// smart account Id
	SmartAccountID string `json:"smartAccountId,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// stack
	Stack bool `json:"stack,omitempty"`

	// stack info
	StackInfo *DeviceDeviceInfoStackInfo `json:"stackInfo,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// sudi required
	SudiRequired bool `json:"sudiRequired,omitempty"`

	// tags
	Tags interface{} `json:"tags,omitempty"`

	// user mic numbers
	UserMicNumbers []string `json:"userMicNumbers"`

	// user sudi serial nos
	UserSudiSerialNos []string `json:"userSudiSerialNos"`

	// virtual account Id
	VirtualAccountID string `json:"virtualAccountId,omitempty"`

	// workflow Id
	WorkflowID string `json:"workflowId,omitempty"`

	// workflow name
	WorkflowName string `json:"workflowName,omitempty"`
}

// Validate validates this device device info
func (m *DeviceDeviceInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAaaCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSystemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPHeaders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeighborLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePnpProfileList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreWorkflowCliOuputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceDeviceInfo) validateAaaCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.AaaCredentials) { // not required
		return nil
	}

	if m.AaaCredentials != nil {
		if err := m.AaaCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo" + "." + "aaaCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceDeviceInfo) validateFileSystemList(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSystemList) { // not required
		return nil
	}

	for i := 0; i < len(m.FileSystemList); i++ {
		if swag.IsZero(m.FileSystemList[i]) { // not required
			continue
		}

		if m.FileSystemList[i] != nil {
			if err := m.FileSystemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "fileSystemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validateHTTPHeaders(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPHeaders) { // not required
		return nil
	}

	for i := 0; i < len(m.HTTPHeaders); i++ {
		if swag.IsZero(m.HTTPHeaders[i]) { // not required
			continue
		}

		if m.HTTPHeaders[i] != nil {
			if err := m.HTTPHeaders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "httpHeaders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validateIPInterfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.IPInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.IPInterfaces); i++ {
		if swag.IsZero(m.IPInterfaces[i]) { // not required
			continue
		}

		if m.IPInterfaces[i] != nil {
			if err := m.IPInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "ipInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceDeviceInfo) validateNeighborLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.NeighborLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.NeighborLinks); i++ {
		if swag.IsZero(m.NeighborLinks[i]) { // not required
			continue
		}

		if m.NeighborLinks[i] != nil {
			if err := m.NeighborLinks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "neighborLinks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validatePnpProfileList(formats strfmt.Registry) error {

	if swag.IsZero(m.PnpProfileList) { // not required
		return nil
	}

	for i := 0; i < len(m.PnpProfileList); i++ {
		if swag.IsZero(m.PnpProfileList[i]) { // not required
			continue
		}

		if m.PnpProfileList[i] != nil {
			if err := m.PnpProfileList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "pnpProfileList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validatePreWorkflowCliOuputs(formats strfmt.Registry) error {

	if swag.IsZero(m.PreWorkflowCliOuputs) { // not required
		return nil
	}

	for i := 0; i < len(m.PreWorkflowCliOuputs); i++ {
		if swag.IsZero(m.PreWorkflowCliOuputs[i]) { // not required
			continue
		}

		if m.PreWorkflowCliOuputs[i] != nil {
			if err := m.PreWorkflowCliOuputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "preWorkflowCliOuputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceDeviceInfo) validateStackInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.StackInfo) { // not required
		return nil
	}

	if m.StackInfo != nil {
		if err := m.StackInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceInfo" + "." + "stackInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfo) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoAaaCredentials device device info aaa credentials
// swagger:model DeviceDeviceInfoAaaCredentials
type DeviceDeviceInfoAaaCredentials struct {

	// password
	Password string `json:"password,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this device device info aaa credentials
func (m *DeviceDeviceInfoAaaCredentials) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoAaaCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoAaaCredentials) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoAaaCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoFileSystemListItems0 device device info file system list items0
// swagger:model DeviceDeviceInfoFileSystemListItems0
type DeviceDeviceInfoFileSystemListItems0 struct {

	// freespace
	Freespace float64 `json:"freespace,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// readable
	Readable bool `json:"readable,omitempty"`

	// size
	Size float64 `json:"size,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// writeable
	Writeable bool `json:"writeable,omitempty"`
}

// Validate validates this device device info file system list items0
func (m *DeviceDeviceInfoFileSystemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoFileSystemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoFileSystemListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoFileSystemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoHTTPHeadersItems0 device device info HTTP headers items0
// swagger:model DeviceDeviceInfoHTTPHeadersItems0
type DeviceDeviceInfoHTTPHeadersItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this device device info HTTP headers items0
func (m *DeviceDeviceInfoHTTPHeadersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoHTTPHeadersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoHTTPHeadersItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoHTTPHeadersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoIPInterfacesItems0 device device info IP interfaces items0
// swagger:model DeviceDeviceInfoIPInterfacesItems0
type DeviceDeviceInfoIPInterfacesItems0 struct {

	// ipv4 address
	IPV4Address interface{} `json:"ipv4Address,omitempty"`

	// ipv6 address list
	IPV6AddressList []interface{} `json:"ipv6AddressList"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this device device info IP interfaces items0
func (m *DeviceDeviceInfoIPInterfacesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoIPInterfacesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoIPInterfacesItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoIPInterfacesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoLocation device device info location
// swagger:model DeviceDeviceInfoLocation
type DeviceDeviceInfoLocation struct {

	// address
	Address string `json:"address,omitempty"`

	// altitude
	Altitude string `json:"altitude,omitempty"`

	// latitude
	Latitude string `json:"latitude,omitempty"`

	// longitude
	Longitude string `json:"longitude,omitempty"`

	// site Id
	SiteID string `json:"siteId,omitempty"`
}

// Validate validates this device device info location
func (m *DeviceDeviceInfoLocation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoLocation) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoNeighborLinksItems0 device device info neighbor links items0
// swagger:model DeviceDeviceInfoNeighborLinksItems0
type DeviceDeviceInfoNeighborLinksItems0 struct {

	// local interface name
	LocalInterfaceName string `json:"localInterfaceName,omitempty"`

	// local mac address
	LocalMacAddress string `json:"localMacAddress,omitempty"`

	// local short interface name
	LocalShortInterfaceName string `json:"localShortInterfaceName,omitempty"`

	// remote device name
	RemoteDeviceName string `json:"remoteDeviceName,omitempty"`

	// remote interface name
	RemoteInterfaceName string `json:"remoteInterfaceName,omitempty"`

	// remote mac address
	RemoteMacAddress string `json:"remoteMacAddress,omitempty"`

	// remote platform
	RemotePlatform string `json:"remotePlatform,omitempty"`

	// remote short interface name
	RemoteShortInterfaceName string `json:"remoteShortInterfaceName,omitempty"`

	// remote version
	RemoteVersion string `json:"remoteVersion,omitempty"`
}

// Validate validates this device device info neighbor links items0
func (m *DeviceDeviceInfoNeighborLinksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoNeighborLinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoNeighborLinksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoNeighborLinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoPnpProfileListItems0 device device info pnp profile list items0
// swagger:model DeviceDeviceInfoPnpProfileListItems0
type DeviceDeviceInfoPnpProfileListItems0 struct {

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// discovery created
	DiscoveryCreated bool `json:"discoveryCreated,omitempty"`

	// primary endpoint
	PrimaryEndpoint *DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint `json:"primaryEndpoint,omitempty"`

	// profile name
	ProfileName string `json:"profileName,omitempty"`

	// secondary endpoint
	SecondaryEndpoint *DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint `json:"secondaryEndpoint,omitempty"`
}

// Validate validates this device device info pnp profile list items0
func (m *DeviceDeviceInfoPnpProfileListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrimaryEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceDeviceInfoPnpProfileListItems0) validatePrimaryEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryEndpoint) { // not required
		return nil
	}

	if m.PrimaryEndpoint != nil {
		if err := m.PrimaryEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryEndpoint")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceDeviceInfoPnpProfileListItems0) validateSecondaryEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryEndpoint) { // not required
		return nil
	}

	if m.SecondaryEndpoint != nil {
		if err := m.SecondaryEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("secondaryEndpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoPnpProfileListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint device device info pnp profile list items0 primary endpoint
// swagger:model DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint
type DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint struct {

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// ipv4 address
	IPV4Address interface{} `json:"ipv4Address,omitempty"`

	// ipv6 address
	IPV6Address interface{} `json:"ipv6Address,omitempty"`

	// port
	Port float64 `json:"port,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this device device info pnp profile list items0 primary endpoint
func (m *DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoPnpProfileListItems0PrimaryEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint device device info pnp profile list items0 secondary endpoint
// swagger:model DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint
type DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint struct {

	// certificate
	Certificate string `json:"certificate,omitempty"`

	// fqdn
	Fqdn string `json:"fqdn,omitempty"`

	// ipv4 address
	IPV4Address interface{} `json:"ipv4Address,omitempty"`

	// ipv6 address
	IPV6Address interface{} `json:"ipv6Address,omitempty"`

	// port
	Port float64 `json:"port,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this device device info pnp profile list items0 secondary endpoint
func (m *DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoPnpProfileListItems0SecondaryEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoPreWorkflowCliOuputsItems0 device device info pre workflow cli ouputs items0
// swagger:model DeviceDeviceInfoPreWorkflowCliOuputsItems0
type DeviceDeviceInfoPreWorkflowCliOuputsItems0 struct {

	// cli
	Cli string `json:"cli,omitempty"`

	// cli output
	CliOutput string `json:"cliOutput,omitempty"`
}

// Validate validates this device device info pre workflow cli ouputs items0
func (m *DeviceDeviceInfoPreWorkflowCliOuputsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoPreWorkflowCliOuputsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoPreWorkflowCliOuputsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoPreWorkflowCliOuputsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoStackInfo device device info stack info
// swagger:model DeviceDeviceInfoStackInfo
type DeviceDeviceInfoStackInfo struct {

	// is full ring
	IsFullRing bool `json:"isFullRing,omitempty"`

	// stack member list
	StackMemberList []*DeviceDeviceInfoStackInfoStackMemberListItems0 `json:"stackMemberList"`

	// stack ring protocol
	StackRingProtocol string `json:"stackRingProtocol,omitempty"`

	// supports stack workflows
	SupportsStackWorkflows bool `json:"supportsStackWorkflows,omitempty"`

	// total member count
	TotalMemberCount float64 `json:"totalMemberCount,omitempty"`

	// valid license levels
	ValidLicenseLevels []string `json:"validLicenseLevels"`
}

// Validate validates this device device info stack info
func (m *DeviceDeviceInfoStackInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStackMemberList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceDeviceInfoStackInfo) validateStackMemberList(formats strfmt.Registry) error {

	if swag.IsZero(m.StackMemberList) { // not required
		return nil
	}

	for i := 0; i < len(m.StackMemberList); i++ {
		if swag.IsZero(m.StackMemberList[i]) { // not required
			continue
		}

		if m.StackMemberList[i] != nil {
			if err := m.StackMemberList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deviceInfo" + "." + "stackInfo" + "." + "stackMemberList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoStackInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoStackInfo) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoStackInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceDeviceInfoStackInfoStackMemberListItems0 device device info stack info stack member list items0
// swagger:model DeviceDeviceInfoStackInfoStackMemberListItems0
type DeviceDeviceInfoStackInfoStackMemberListItems0 struct {

	// hardware version
	HardwareVersion string `json:"hardwareVersion,omitempty"`

	// license level
	LicenseLevel string `json:"licenseLevel,omitempty"`

	// license type
	LicenseType string `json:"licenseType,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// pid
	Pid string `json:"pid,omitempty"`

	// priority
	Priority float64 `json:"priority,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// software version
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// stack number
	StackNumber float64 `json:"stackNumber,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// sudi serial number
	SudiSerialNumber string `json:"sudiSerialNumber,omitempty"`
}

// Validate validates this device device info stack info stack member list items0
func (m *DeviceDeviceInfoStackInfoStackMemberListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceDeviceInfoStackInfoStackMemberListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceDeviceInfoStackInfoStackMemberListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceDeviceInfoStackInfoStackMemberListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceRunSummaryListItems0 device run summary list items0
// swagger:model DeviceRunSummaryListItems0
type DeviceRunSummaryListItems0 struct {

	// details
	Details string `json:"details,omitempty"`

	// error flag
	ErrorFlag bool `json:"errorFlag,omitempty"`

	// history task info
	HistoryTaskInfo *DeviceRunSummaryListItems0HistoryTaskInfo `json:"historyTaskInfo,omitempty"`

	// timestamp
	Timestamp float64 `json:"timestamp,omitempty"`
}

// Validate validates this device run summary list items0
func (m *DeviceRunSummaryListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHistoryTaskInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceRunSummaryListItems0) validateHistoryTaskInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.HistoryTaskInfo) { // not required
		return nil
	}

	if m.HistoryTaskInfo != nil {
		if err := m.HistoryTaskInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("historyTaskInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceRunSummaryListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceRunSummaryListItems0HistoryTaskInfo device run summary list items0 history task info
// swagger:model DeviceRunSummaryListItems0HistoryTaskInfo
type DeviceRunSummaryListItems0HistoryTaskInfo struct {

	// addn details
	AddnDetails []*DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0 `json:"addnDetails"`

	// name
	Name string `json:"name,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0 `json:"workItemList"`
}

// Validate validates this device run summary list items0 history task info
func (m *DeviceRunSummaryListItems0HistoryTaskInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddnDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceRunSummaryListItems0HistoryTaskInfo) validateAddnDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AddnDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.AddnDetails); i++ {
		if swag.IsZero(m.AddnDetails[i]) { // not required
			continue
		}

		if m.AddnDetails[i] != nil {
			if err := m.AddnDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("historyTaskInfo" + "." + "addnDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceRunSummaryListItems0HistoryTaskInfo) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("historyTaskInfo" + "." + "workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfo) UnmarshalBinary(b []byte) error {
	var res DeviceRunSummaryListItems0HistoryTaskInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0 device run summary list items0 history task info addn details items0
// swagger:model DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0
type DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this device run summary list items0 history task info addn details items0
func (m *DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0) UnmarshalBinary(b []byte) error {
	var res DeviceRunSummaryListItems0HistoryTaskInfoAddnDetailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0 device run summary list items0 history task info work item list items0
// swagger:model DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0
type DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`
}

// Validate validates this device run summary list items0 history task info work item list items0
func (m *DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceRunSummaryListItems0HistoryTaskInfoWorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemResetWorkflow device system reset workflow
// swagger:model DeviceSystemResetWorkflow
type DeviceSystemResetWorkflow struct {

	// id
	ID string `json:"_id,omitempty"`

	// add to inventory
	AddToInventory bool `json:"addToInventory,omitempty"`

	// added on
	AddedOn float64 `json:"addedOn,omitempty"`

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// curr task idx
	CurrTaskIdx float64 `json:"currTaskIdx,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// exec time
	ExecTime float64 `json:"execTime,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// lastupdate on
	LastupdateOn float64 `json:"lastupdateOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tasks
	Tasks []*DeviceSystemResetWorkflowTasksItems0 `json:"tasks"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// use state
	UseState string `json:"useState,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`
}

// Validate validates this device system reset workflow
func (m *DeviceSystemResetWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemResetWorkflow) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemResetWorkflow" + "." + "tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemResetWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemResetWorkflow) UnmarshalBinary(b []byte) error {
	var res DeviceSystemResetWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemResetWorkflowTasksItems0 device system reset workflow tasks items0
// swagger:model DeviceSystemResetWorkflowTasksItems0
type DeviceSystemResetWorkflowTasksItems0 struct {

	// curr work item idx
	CurrWorkItemIdx float64 `json:"currWorkItemIdx,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// task seq no
	TaskSeqNo float64 `json:"taskSeqNo,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*DeviceSystemResetWorkflowTasksItems0WorkItemListItems0 `json:"workItemList"`
}

// Validate validates this device system reset workflow tasks items0
func (m *DeviceSystemResetWorkflowTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemResetWorkflowTasksItems0) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemResetWorkflowTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemResetWorkflowTasksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceSystemResetWorkflowTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemResetWorkflowTasksItems0WorkItemListItems0 device system reset workflow tasks items0 work item list items0
// swagger:model DeviceSystemResetWorkflowTasksItems0WorkItemListItems0
type DeviceSystemResetWorkflowTasksItems0WorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`
}

// Validate validates this device system reset workflow tasks items0 work item list items0
func (m *DeviceSystemResetWorkflowTasksItems0WorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemResetWorkflowTasksItems0WorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemResetWorkflowTasksItems0WorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceSystemResetWorkflowTasksItems0WorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemWorkflow device system workflow
// swagger:model DeviceSystemWorkflow
type DeviceSystemWorkflow struct {

	// id
	ID string `json:"_id,omitempty"`

	// add to inventory
	AddToInventory bool `json:"addToInventory,omitempty"`

	// added on
	AddedOn float64 `json:"addedOn,omitempty"`

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// curr task idx
	CurrTaskIdx float64 `json:"currTaskIdx,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// exec time
	ExecTime float64 `json:"execTime,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// lastupdate on
	LastupdateOn float64 `json:"lastupdateOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tasks
	Tasks []*DeviceSystemWorkflowTasksItems0 `json:"tasks"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// use state
	UseState string `json:"useState,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`
}

// Validate validates this device system workflow
func (m *DeviceSystemWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemWorkflow) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systemWorkflow" + "." + "tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemWorkflow) UnmarshalBinary(b []byte) error {
	var res DeviceSystemWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemWorkflowTasksItems0 device system workflow tasks items0
// swagger:model DeviceSystemWorkflowTasksItems0
type DeviceSystemWorkflowTasksItems0 struct {

	// curr work item idx
	CurrWorkItemIdx float64 `json:"currWorkItemIdx,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// task seq no
	TaskSeqNo float64 `json:"taskSeqNo,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*DeviceSystemWorkflowTasksItems0WorkItemListItems0 `json:"workItemList"`
}

// Validate validates this device system workflow tasks items0
func (m *DeviceSystemWorkflowTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceSystemWorkflowTasksItems0) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemWorkflowTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemWorkflowTasksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceSystemWorkflowTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceSystemWorkflowTasksItems0WorkItemListItems0 device system workflow tasks items0 work item list items0
// swagger:model DeviceSystemWorkflowTasksItems0WorkItemListItems0
type DeviceSystemWorkflowTasksItems0WorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`
}

// Validate validates this device system workflow tasks items0 work item list items0
func (m *DeviceSystemWorkflowTasksItems0WorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceSystemWorkflowTasksItems0WorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceSystemWorkflowTasksItems0WorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceSystemWorkflowTasksItems0WorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflow device workflow
// swagger:model DeviceWorkflow
type DeviceWorkflow struct {

	// id
	ID string `json:"_id,omitempty"`

	// add to inventory
	AddToInventory bool `json:"addToInventory,omitempty"`

	// added on
	AddedOn float64 `json:"addedOn,omitempty"`

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// curr task idx
	CurrTaskIdx float64 `json:"currTaskIdx,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// exec time
	ExecTime float64 `json:"execTime,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// lastupdate on
	LastupdateOn float64 `json:"lastupdateOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tasks
	Tasks []*DeviceWorkflowTasksItems0 `json:"tasks"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// use state
	UseState string `json:"useState,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`
}

// Validate validates this device workflow
func (m *DeviceWorkflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceWorkflow) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflow" + "." + "tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflow) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflowParameters device workflow parameters
// swagger:model DeviceWorkflowParameters
type DeviceWorkflowParameters struct {

	// config list
	ConfigList []*DeviceWorkflowParametersConfigListItems0 `json:"configList"`

	// license level
	LicenseLevel string `json:"licenseLevel,omitempty"`

	// license type
	LicenseType string `json:"licenseType,omitempty"`

	// top of stack serial number
	TopOfStackSerialNumber string `json:"topOfStackSerialNumber,omitempty"`
}

// Validate validates this device workflow parameters
func (m *DeviceWorkflowParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceWorkflowParameters) validateConfigList(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigList) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigList); i++ {
		if swag.IsZero(m.ConfigList[i]) { // not required
			continue
		}

		if m.ConfigList[i] != nil {
			if err := m.ConfigList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflowParameters" + "." + "configList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflowParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflowParameters) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflowParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflowParametersConfigListItems0 device workflow parameters config list items0
// swagger:model DeviceWorkflowParametersConfigListItems0
type DeviceWorkflowParametersConfigListItems0 struct {

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// config parameters
	ConfigParameters []*DeviceWorkflowParametersConfigListItems0ConfigParametersItems0 `json:"configParameters"`
}

// Validate validates this device workflow parameters config list items0
func (m *DeviceWorkflowParametersConfigListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceWorkflowParametersConfigListItems0) validateConfigParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigParameters); i++ {
		if swag.IsZero(m.ConfigParameters[i]) { // not required
			continue
		}

		if m.ConfigParameters[i] != nil {
			if err := m.ConfigParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflowParametersConfigListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflowParametersConfigListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflowParametersConfigListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflowParametersConfigListItems0ConfigParametersItems0 device workflow parameters config list items0 config parameters items0
// swagger:model DeviceWorkflowParametersConfigListItems0ConfigParametersItems0
type DeviceWorkflowParametersConfigListItems0ConfigParametersItems0 struct {

	// key
	Key string `json:"key,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this device workflow parameters config list items0 config parameters items0
func (m *DeviceWorkflowParametersConfigListItems0ConfigParametersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflowParametersConfigListItems0ConfigParametersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflowParametersConfigListItems0ConfigParametersItems0) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflowParametersConfigListItems0ConfigParametersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflowTasksItems0 device workflow tasks items0
// swagger:model DeviceWorkflowTasksItems0
type DeviceWorkflowTasksItems0 struct {

	// curr work item idx
	CurrWorkItemIdx float64 `json:"currWorkItemIdx,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// task seq no
	TaskSeqNo float64 `json:"taskSeqNo,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*DeviceWorkflowTasksItems0WorkItemListItems0 `json:"workItemList"`
}

// Validate validates this device workflow tasks items0
func (m *DeviceWorkflowTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceWorkflowTasksItems0) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflowTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflowTasksItems0) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflowTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceWorkflowTasksItems0WorkItemListItems0 device workflow tasks items0 work item list items0
// swagger:model DeviceWorkflowTasksItems0WorkItemListItems0
type DeviceWorkflowTasksItems0WorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`
}

// Validate validates this device workflow tasks items0 work item list items0
func (m *DeviceWorkflowTasksItems0WorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceWorkflowTasksItems0WorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceWorkflowTasksItems0WorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res DeviceWorkflowTasksItems0WorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
