// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SiteResult site result
// swagger:model SiteResult
type SiteResult struct {

	// response
	Response *SiteResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this site result
func (m *SiteResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteResult) UnmarshalBinary(b []byte) error {
	var res SiteResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteResultResponse site result response
// swagger:model SiteResultResponse
type SiteResultResponse struct {

	// sites
	Sites []*SiteResultResponseSitesItems0 `json:"sites"`
}

// Validate validates this site result response
func (m *SiteResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSites(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SiteResultResponse) validateSites(formats strfmt.Registry) error {

	if swag.IsZero(m.Sites) { // not required
		return nil
	}

	for i := 0; i < len(m.Sites); i++ {
		if swag.IsZero(m.Sites[i]) { // not required
			continue
		}

		if m.Sites[i] != nil {
			if err := m.Sites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "sites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SiteResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteResultResponse) UnmarshalBinary(b []byte) error {
	var res SiteResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SiteResultResponseSitesItems0 site result response sites items0
// swagger:model SiteResultResponseSitesItems0
type SiteResultResponseSitesItems0 struct {

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// group name hierarchy
	GroupNameHierarchy string `json:"groupNameHierarchy,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// latitude
	Latitude string `json:"latitude,omitempty"`

	// location address
	LocationAddress string `json:"locationAddress,omitempty"`

	// location country
	LocationCountry string `json:"locationCountry,omitempty"`

	// location type
	LocationType string `json:"locationType,omitempty"`

	// longitude
	Longitude string `json:"longitude,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parent Id
	ParentID string `json:"parentId,omitempty"`
}

// Validate validates this site result response sites items0
func (m *SiteResultResponseSitesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SiteResultResponseSitesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SiteResultResponseSitesItems0) UnmarshalBinary(b []byte) error {
	var res SiteResultResponseSitesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
