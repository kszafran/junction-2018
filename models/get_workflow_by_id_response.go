// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetWorkflowByIDResponse get workflow by Id response
// swagger:model GetWorkflowByIdResponse
type GetWorkflowByIDResponse struct {

	// id
	ID string `json:"_id,omitempty"`

	// add to inventory
	AddToInventory bool `json:"addToInventory,omitempty"`

	// added on
	AddedOn float64 `json:"addedOn,omitempty"`

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// curr task idx
	CurrTaskIdx float64 `json:"currTaskIdx,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// exec time
	ExecTime float64 `json:"execTime,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// instance type
	InstanceType string `json:"instanceType,omitempty"`

	// lastupdate on
	LastupdateOn float64 `json:"lastupdateOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tasks
	Tasks []*GetWorkflowByIDResponseTasksItems0 `json:"tasks"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// use state
	UseState string `json:"useState,omitempty"`

	// version
	Version float64 `json:"version,omitempty"`
}

// Validate validates this get workflow by Id response
func (m *GetWorkflowByIDResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetWorkflowByIDResponse) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetWorkflowByIDResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetWorkflowByIDResponse) UnmarshalBinary(b []byte) error {
	var res GetWorkflowByIDResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetWorkflowByIDResponseTasksItems0 get workflow by ID response tasks items0
// swagger:model GetWorkflowByIDResponseTasksItems0
type GetWorkflowByIDResponseTasksItems0 struct {

	// curr work item idx
	CurrWorkItemIdx float64 `json:"currWorkItemIdx,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// task seq no
	TaskSeqNo float64 `json:"taskSeqNo,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*GetWorkflowByIDResponseTasksItems0WorkItemListItems0 `json:"workItemList"`
}

// Validate validates this get workflow by ID response tasks items0
func (m *GetWorkflowByIDResponseTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetWorkflowByIDResponseTasksItems0) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetWorkflowByIDResponseTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetWorkflowByIDResponseTasksItems0) UnmarshalBinary(b []byte) error {
	var res GetWorkflowByIDResponseTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetWorkflowByIDResponseTasksItems0WorkItemListItems0 get workflow by ID response tasks items0 work item list items0
// swagger:model GetWorkflowByIDResponseTasksItems0WorkItemListItems0
type GetWorkflowByIDResponseTasksItems0WorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime float64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime float64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken float64 `json:"timeTaken,omitempty"`
}

// Validate validates this get workflow by ID response tasks items0 work item list items0
func (m *GetWorkflowByIDResponseTasksItems0WorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetWorkflowByIDResponseTasksItems0WorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetWorkflowByIDResponseTasksItems0WorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res GetWorkflowByIDResponseTasksItems0WorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
