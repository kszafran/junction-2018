// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiscoveryNIOResult discovery n i o result
// swagger:model DiscoveryNIOResult
type DiscoveryNIOResult struct {

	// response
	Response *DiscoveryNIOResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this discovery n i o result
func (m *DiscoveryNIOResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscoveryNIOResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscoveryNIOResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscoveryNIOResult) UnmarshalBinary(b []byte) error {
	var res DiscoveryNIOResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DiscoveryNIOResultResponse discovery n i o result response
// swagger:model DiscoveryNIOResultResponse
type DiscoveryNIOResultResponse struct {

	// attribute info
	AttributeInfo interface{} `json:"attributeInfo,omitempty"`

	// cdp level
	CdpLevel int64 `json:"cdpLevel,omitempty"`

	// device ids
	DeviceIds string `json:"deviceIds,omitempty"`

	// discovery condition
	DiscoveryCondition string `json:"discoveryCondition,omitempty"`

	// discovery status
	DiscoveryStatus string `json:"discoveryStatus,omitempty"`

	// discovery type
	DiscoveryType string `json:"discoveryType,omitempty"`

	// enable password list
	EnablePasswordList string `json:"enablePasswordList,omitempty"`

	// global credential Id list
	GlobalCredentialIDList []string `json:"globalCredentialIdList"`

	// http read credential
	HTTPReadCredential *DiscoveryNIOResultResponseHTTPReadCredential `json:"httpReadCredential,omitempty"`

	// http write credential
	HTTPWriteCredential *DiscoveryNIOResultResponseHTTPWriteCredential `json:"httpWriteCredential,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip address list
	IPAddressList string `json:"ipAddressList,omitempty"`

	// ip filter list
	IPFilterList string `json:"ipFilterList,omitempty"`

	// is auto cdp
	IsAutoCdp bool `json:"isAutoCdp,omitempty"`

	// lldp level
	LldpLevel int64 `json:"lldpLevel,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// netconf port
	NetconfPort string `json:"netconfPort,omitempty"`

	// num devices
	NumDevices int64 `json:"numDevices,omitempty"`

	// parent discovery Id
	ParentDiscoveryID string `json:"parentDiscoveryId,omitempty"`

	// password list
	PasswordList string `json:"passwordList,omitempty"`

	// preferred mgmt IP method
	PreferredMgmtIPMethod string `json:"preferredMgmtIPMethod,omitempty"`

	// protocol order
	ProtocolOrder string `json:"protocolOrder,omitempty"`

	// retry count
	RetryCount int64 `json:"retryCount,omitempty"`

	// snmp auth passphrase
	SnmpAuthPassphrase string `json:"snmpAuthPassphrase,omitempty"`

	// snmp auth protocol
	SnmpAuthProtocol string `json:"snmpAuthProtocol,omitempty"`

	// snmp mode
	SnmpMode string `json:"snmpMode,omitempty"`

	// snmp priv passphrase
	SnmpPrivPassphrase string `json:"snmpPrivPassphrase,omitempty"`

	// snmp priv protocol
	SnmpPrivProtocol string `json:"snmpPrivProtocol,omitempty"`

	// snmp ro community
	SnmpRoCommunity string `json:"snmpRoCommunity,omitempty"`

	// snmp ro community desc
	SnmpRoCommunityDesc string `json:"snmpRoCommunityDesc,omitempty"`

	// snmp rw community
	SnmpRwCommunity string `json:"snmpRwCommunity,omitempty"`

	// snmp rw community desc
	SnmpRwCommunityDesc string `json:"snmpRwCommunityDesc,omitempty"`

	// snmp user name
	SnmpUserName string `json:"snmpUserName,omitempty"`

	// time out
	TimeOut int64 `json:"timeOut,omitempty"`

	// update mgmt Ip
	UpdateMgmtIP bool `json:"updateMgmtIp,omitempty"`

	// user name list
	UserNameList string `json:"userNameList,omitempty"`
}

// Validate validates this discovery n i o result response
func (m *DiscoveryNIOResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTPReadCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPWriteCredential(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscoveryNIOResultResponse) validateHTTPReadCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPReadCredential) { // not required
		return nil
	}

	if m.HTTPReadCredential != nil {
		if err := m.HTTPReadCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response" + "." + "httpReadCredential")
			}
			return err
		}
	}

	return nil
}

func (m *DiscoveryNIOResultResponse) validateHTTPWriteCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPWriteCredential) { // not required
		return nil
	}

	if m.HTTPWriteCredential != nil {
		if err := m.HTTPWriteCredential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response" + "." + "httpWriteCredential")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscoveryNIOResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscoveryNIOResultResponse) UnmarshalBinary(b []byte) error {
	var res DiscoveryNIOResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DiscoveryNIOResultResponseHTTPReadCredential discovery n i o result response HTTP read credential
// swagger:model DiscoveryNIOResultResponseHTTPReadCredential
type DiscoveryNIOResultResponseHTTPReadCredential struct {

	// comments
	Comments string `json:"comments,omitempty"`

	// credential type
	// Enum: [GLOBAL APP]
	CredentialType string `json:"credentialType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// secure
	Secure bool `json:"secure,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this discovery n i o result response HTTP read credential
func (m *DiscoveryNIOResultResponseHTTPReadCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var discoveryNIOResultResponseHttpReadCredentialTypeCredentialTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GLOBAL","APP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		discoveryNIOResultResponseHttpReadCredentialTypeCredentialTypePropEnum = append(discoveryNIOResultResponseHttpReadCredentialTypeCredentialTypePropEnum, v)
	}
}

const (

	// DiscoveryNIOResultResponseHTTPReadCredentialCredentialTypeGLOBAL captures enum value "GLOBAL"
	DiscoveryNIOResultResponseHTTPReadCredentialCredentialTypeGLOBAL string = "GLOBAL"

	// DiscoveryNIOResultResponseHTTPReadCredentialCredentialTypeAPP captures enum value "APP"
	DiscoveryNIOResultResponseHTTPReadCredentialCredentialTypeAPP string = "APP"
)

// prop value enum
func (m *DiscoveryNIOResultResponseHTTPReadCredential) validateCredentialTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, discoveryNIOResultResponseHttpReadCredentialTypeCredentialTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiscoveryNIOResultResponseHTTPReadCredential) validateCredentialType(formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCredentialTypeEnum("response"+"."+"httpReadCredential"+"."+"credentialType", "body", m.CredentialType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscoveryNIOResultResponseHTTPReadCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscoveryNIOResultResponseHTTPReadCredential) UnmarshalBinary(b []byte) error {
	var res DiscoveryNIOResultResponseHTTPReadCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DiscoveryNIOResultResponseHTTPWriteCredential discovery n i o result response HTTP write credential
// swagger:model DiscoveryNIOResultResponseHTTPWriteCredential
type DiscoveryNIOResultResponseHTTPWriteCredential struct {

	// comments
	Comments string `json:"comments,omitempty"`

	// credential type
	// Enum: [GLOBAL APP]
	CredentialType string `json:"credentialType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// secure
	Secure bool `json:"secure,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this discovery n i o result response HTTP write credential
func (m *DiscoveryNIOResultResponseHTTPWriteCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var discoveryNIOResultResponseHttpWriteCredentialTypeCredentialTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GLOBAL","APP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		discoveryNIOResultResponseHttpWriteCredentialTypeCredentialTypePropEnum = append(discoveryNIOResultResponseHttpWriteCredentialTypeCredentialTypePropEnum, v)
	}
}

const (

	// DiscoveryNIOResultResponseHTTPWriteCredentialCredentialTypeGLOBAL captures enum value "GLOBAL"
	DiscoveryNIOResultResponseHTTPWriteCredentialCredentialTypeGLOBAL string = "GLOBAL"

	// DiscoveryNIOResultResponseHTTPWriteCredentialCredentialTypeAPP captures enum value "APP"
	DiscoveryNIOResultResponseHTTPWriteCredentialCredentialTypeAPP string = "APP"
)

// prop value enum
func (m *DiscoveryNIOResultResponseHTTPWriteCredential) validateCredentialTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, discoveryNIOResultResponseHttpWriteCredentialTypeCredentialTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DiscoveryNIOResultResponseHTTPWriteCredential) validateCredentialType(formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCredentialTypeEnum("response"+"."+"httpWriteCredential"+"."+"credentialType", "body", m.CredentialType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DiscoveryNIOResultResponseHTTPWriteCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscoveryNIOResultResponseHTTPWriteCredential) UnmarshalBinary(b []byte) error {
	var res DiscoveryNIOResultResponseHTTPWriteCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
