// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetDeviceDetailResponse get device detail response
// swagger:model GetDeviceDetailResponse
type GetDeviceDetailResponse struct {

	// response
	Response *GetDeviceDetailResponseResponse `json:"response,omitempty"`
}

// Validate validates this get device detail response
func (m *GetDeviceDetailResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDeviceDetailResponse) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDeviceDetailResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDeviceDetailResponse) UnmarshalBinary(b []byte) error {
	var res GetDeviceDetailResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetDeviceDetailResponseResponse get device detail response response
// swagger:model GetDeviceDetailResponseResponse
type GetDeviceDetailResponseResponse struct {

	// connected time
	ConnectedTime string `json:"connectedTime,omitempty"`

	// cpu score
	CPUScore string `json:"cpuScore,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// management Ip addr
	ManagementIPAddr string `json:"managementIpAddr,omitempty"`

	// memory score
	MemoryScore string `json:"memoryScore,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// nw device family
	NwDeviceFamily string `json:"nwDeviceFamily,omitempty"`

	// nw device Id
	NwDeviceID string `json:"nwDeviceId,omitempty"`

	// nw device name
	NwDeviceName string `json:"nwDeviceName,omitempty"`

	// nw device role
	NwDeviceRole string `json:"nwDeviceRole,omitempty"`

	// nw device type
	NwDeviceType string `json:"nwDeviceType,omitempty"`

	// op state
	OpState string `json:"opState,omitempty"`

	// overall health
	OverallHealth string `json:"overallHealth,omitempty"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// reset reason
	ResetReason string `json:"resetReason,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// software version
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// sub mode
	SubMode string `json:"subMode,omitempty"`

	// sys uptime
	SysUptime string `json:"sysUptime,omitempty"`

	// up time
	UpTime string `json:"upTime,omitempty"`
}

// Validate validates this get device detail response response
func (m *GetDeviceDetailResponseResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetDeviceDetailResponseResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDeviceDetailResponseResponse) UnmarshalBinary(b []byte) error {
	var res GetDeviceDetailResponseResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
