// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SNMPvCredentialDTO s n m pv credential d t o
// swagger:model SNMPvCredentialDTO
type SNMPvCredentialDTO []*SNMPvCredentialDTOItems0

// Validate validates this s n m pv credential d t o
func (m SNMPvCredentialDTO) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SNMPvCredentialDTOItems0 s n m pv credential d t o items0
// swagger:model SNMPvCredentialDTOItems0
type SNMPvCredentialDTOItems0 struct {

	// auth password
	AuthPassword string `json:"authPassword,omitempty"`

	// auth type
	// Enum: [SHA MD5]
	AuthType string `json:"authType,omitempty"`

	// comments
	Comments string `json:"comments,omitempty"`

	// credential type
	// Enum: [GLOBAL APP]
	CredentialType string `json:"credentialType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// privacy password
	PrivacyPassword string `json:"privacyPassword,omitempty"`

	// privacy type
	// Enum: [DES AES128]
	PrivacyType string `json:"privacyType,omitempty"`

	// snmp mode
	// Enum: [AUTHPRIV AUTHNOPRIV NOAUTHNOPRIV]
	SnmpMode string `json:"snmpMode,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this s n m pv credential d t o items0
func (m *SNMPvCredentialDTOItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sNMPvCredentialDTOItems0TypeAuthTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHA","MD5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sNMPvCredentialDTOItems0TypeAuthTypePropEnum = append(sNMPvCredentialDTOItems0TypeAuthTypePropEnum, v)
	}
}

const (

	// SNMPvCredentialDTOItems0AuthTypeSHA captures enum value "SHA"
	SNMPvCredentialDTOItems0AuthTypeSHA string = "SHA"

	// SNMPvCredentialDTOItems0AuthTypeMD5 captures enum value "MD5"
	SNMPvCredentialDTOItems0AuthTypeMD5 string = "MD5"
)

// prop value enum
func (m *SNMPvCredentialDTOItems0) validateAuthTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sNMPvCredentialDTOItems0TypeAuthTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SNMPvCredentialDTOItems0) validateAuthType(formats strfmt.Registry) error {

	if swag.IsZero(m.AuthType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthTypeEnum("authType", "body", m.AuthType); err != nil {
		return err
	}

	return nil
}

var sNMPvCredentialDTOItems0TypeCredentialTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GLOBAL","APP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sNMPvCredentialDTOItems0TypeCredentialTypePropEnum = append(sNMPvCredentialDTOItems0TypeCredentialTypePropEnum, v)
	}
}

const (

	// SNMPvCredentialDTOItems0CredentialTypeGLOBAL captures enum value "GLOBAL"
	SNMPvCredentialDTOItems0CredentialTypeGLOBAL string = "GLOBAL"

	// SNMPvCredentialDTOItems0CredentialTypeAPP captures enum value "APP"
	SNMPvCredentialDTOItems0CredentialTypeAPP string = "APP"
)

// prop value enum
func (m *SNMPvCredentialDTOItems0) validateCredentialTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sNMPvCredentialDTOItems0TypeCredentialTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SNMPvCredentialDTOItems0) validateCredentialType(formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCredentialTypeEnum("credentialType", "body", m.CredentialType); err != nil {
		return err
	}

	return nil
}

var sNMPvCredentialDTOItems0TypePrivacyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DES","AES128"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sNMPvCredentialDTOItems0TypePrivacyTypePropEnum = append(sNMPvCredentialDTOItems0TypePrivacyTypePropEnum, v)
	}
}

const (

	// SNMPvCredentialDTOItems0PrivacyTypeDES captures enum value "DES"
	SNMPvCredentialDTOItems0PrivacyTypeDES string = "DES"

	// SNMPvCredentialDTOItems0PrivacyTypeAES128 captures enum value "AES128"
	SNMPvCredentialDTOItems0PrivacyTypeAES128 string = "AES128"
)

// prop value enum
func (m *SNMPvCredentialDTOItems0) validatePrivacyTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sNMPvCredentialDTOItems0TypePrivacyTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SNMPvCredentialDTOItems0) validatePrivacyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivacyType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivacyTypeEnum("privacyType", "body", m.PrivacyType); err != nil {
		return err
	}

	return nil
}

var sNMPvCredentialDTOItems0TypeSnmpModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AUTHPRIV","AUTHNOPRIV","NOAUTHNOPRIV"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sNMPvCredentialDTOItems0TypeSnmpModePropEnum = append(sNMPvCredentialDTOItems0TypeSnmpModePropEnum, v)
	}
}

const (

	// SNMPvCredentialDTOItems0SnmpModeAUTHPRIV captures enum value "AUTHPRIV"
	SNMPvCredentialDTOItems0SnmpModeAUTHPRIV string = "AUTHPRIV"

	// SNMPvCredentialDTOItems0SnmpModeAUTHNOPRIV captures enum value "AUTHNOPRIV"
	SNMPvCredentialDTOItems0SnmpModeAUTHNOPRIV string = "AUTHNOPRIV"

	// SNMPvCredentialDTOItems0SnmpModeNOAUTHNOPRIV captures enum value "NOAUTHNOPRIV"
	SNMPvCredentialDTOItems0SnmpModeNOAUTHNOPRIV string = "NOAUTHNOPRIV"
)

// prop value enum
func (m *SNMPvCredentialDTOItems0) validateSnmpModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sNMPvCredentialDTOItems0TypeSnmpModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SNMPvCredentialDTOItems0) validateSnmpMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSnmpModeEnum("snmpMode", "body", m.SnmpMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SNMPvCredentialDTOItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SNMPvCredentialDTOItems0) UnmarshalBinary(b []byte) error {
	var res SNMPvCredentialDTOItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
