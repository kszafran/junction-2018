// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WirelessInfoResult wireless info result
// swagger:model WirelessInfoResult
type WirelessInfoResult struct {

	// response
	Response *WirelessInfoResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this wireless info result
func (m *WirelessInfoResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WirelessInfoResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WirelessInfoResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WirelessInfoResult) UnmarshalBinary(b []byte) error {
	var res WirelessInfoResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WirelessInfoResultResponse wireless info result response
// swagger:model WirelessInfoResultResponse
type WirelessInfoResultResponse struct {

	// admin enabled ports
	AdminEnabledPorts []int64 `json:"adminEnabledPorts"`

	// ap group name
	ApGroupName string `json:"apGroupName,omitempty"`

	// device Id
	DeviceID string `json:"deviceId,omitempty"`

	// eth mac address
	EthMacAddress string `json:"ethMacAddress,omitempty"`

	// flex group name
	FlexGroupName string `json:"flexGroupName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// lag mode enabled
	LagModeEnabled bool `json:"lagModeEnabled,omitempty"`

	// netconf enabled
	NetconfEnabled bool `json:"netconfEnabled,omitempty"`

	// wireless license info
	// Enum: [ADVANTAGE ESSENTIALS]
	WirelessLicenseInfo string `json:"wirelessLicenseInfo,omitempty"`

	// wireless package installed
	WirelessPackageInstalled bool `json:"wirelessPackageInstalled,omitempty"`
}

// Validate validates this wireless info result response
func (m *WirelessInfoResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWirelessLicenseInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var wirelessInfoResultResponseTypeWirelessLicenseInfoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADVANTAGE","ESSENTIALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wirelessInfoResultResponseTypeWirelessLicenseInfoPropEnum = append(wirelessInfoResultResponseTypeWirelessLicenseInfoPropEnum, v)
	}
}

const (

	// WirelessInfoResultResponseWirelessLicenseInfoADVANTAGE captures enum value "ADVANTAGE"
	WirelessInfoResultResponseWirelessLicenseInfoADVANTAGE string = "ADVANTAGE"

	// WirelessInfoResultResponseWirelessLicenseInfoESSENTIALS captures enum value "ESSENTIALS"
	WirelessInfoResultResponseWirelessLicenseInfoESSENTIALS string = "ESSENTIALS"
)

// prop value enum
func (m *WirelessInfoResultResponse) validateWirelessLicenseInfoEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wirelessInfoResultResponseTypeWirelessLicenseInfoPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WirelessInfoResultResponse) validateWirelessLicenseInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.WirelessLicenseInfo) { // not required
		return nil
	}

	// value enum
	if err := m.validateWirelessLicenseInfoEnum("response"+"."+"wirelessLicenseInfo", "body", m.WirelessLicenseInfo); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WirelessInfoResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WirelessInfoResultResponse) UnmarshalBinary(b []byte) error {
	var res WirelessInfoResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
