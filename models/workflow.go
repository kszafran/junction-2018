// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Workflow workflow
// swagger:model Workflow
type Workflow struct {

	// id
	ID string `json:"_id,omitempty"`

	// add to inventory
	AddToInventory bool `json:"addToInventory,omitempty"`

	// added on
	AddedOn int64 `json:"addedOn,omitempty"`

	// config Id
	ConfigID string `json:"configId,omitempty"`

	// curr task idx
	CurrTaskIdx int64 `json:"currTaskIdx,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// exec time
	ExecTime int64 `json:"execTime,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// instance type
	// Enum: [SystemWorkflow UserWorkflow SystemResetWorkflow]
	InstanceType string `json:"instanceType,omitempty"`

	// lastupdate on
	LastupdateOn int64 `json:"lastupdateOn,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// tasks
	Tasks []*WorkflowTasksItems0 `json:"tasks"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// use state
	UseState string `json:"useState,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this workflow
func (m *Workflow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workflowTypeInstanceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SystemWorkflow","UserWorkflow","SystemResetWorkflow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workflowTypeInstanceTypePropEnum = append(workflowTypeInstanceTypePropEnum, v)
	}
}

const (

	// WorkflowInstanceTypeSystemWorkflow captures enum value "SystemWorkflow"
	WorkflowInstanceTypeSystemWorkflow string = "SystemWorkflow"

	// WorkflowInstanceTypeUserWorkflow captures enum value "UserWorkflow"
	WorkflowInstanceTypeUserWorkflow string = "UserWorkflow"

	// WorkflowInstanceTypeSystemResetWorkflow captures enum value "SystemResetWorkflow"
	WorkflowInstanceTypeSystemResetWorkflow string = "SystemResetWorkflow"
)

// prop value enum
func (m *Workflow) validateInstanceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workflowTypeInstanceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Workflow) validateInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstanceTypeEnum("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

func (m *Workflow) validateTasks(formats strfmt.Registry) error {

	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workflow) UnmarshalBinary(b []byte) error {
	var res Workflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowTasksItems0 workflow tasks items0
// swagger:model WorkflowTasksItems0
type WorkflowTasksItems0 struct {

	// curr work item idx
	CurrWorkItemIdx int64 `json:"currWorkItemIdx,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// task seq no
	TaskSeqNo int64 `json:"taskSeqNo,omitempty"`

	// time taken
	TimeTaken int64 `json:"timeTaken,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// work item list
	WorkItemList []*WorkflowTasksItems0WorkItemListItems0 `json:"workItemList"`
}

// Validate validates this workflow tasks items0
func (m *WorkflowTasksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWorkItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowTasksItems0) validateWorkItemList(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkItemList) { // not required
		return nil
	}

	for i := 0; i < len(m.WorkItemList); i++ {
		if swag.IsZero(m.WorkItemList[i]) { // not required
			continue
		}

		if m.WorkItemList[i] != nil {
			if err := m.WorkItemList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workItemList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTasksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTasksItems0) UnmarshalBinary(b []byte) error {
	var res WorkflowTasksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// WorkflowTasksItems0WorkItemListItems0 workflow tasks items0 work item list items0
// swagger:model WorkflowTasksItems0WorkItemListItems0
type WorkflowTasksItems0WorkItemListItems0 struct {

	// command
	Command string `json:"command,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// output str
	OutputStr string `json:"outputStr,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// time taken
	TimeTaken int64 `json:"timeTaken,omitempty"`
}

// Validate validates this workflow tasks items0 work item list items0
func (m *WorkflowTasksItems0WorkItemListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowTasksItems0WorkItemListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowTasksItems0WorkItemListItems0) UnmarshalBinary(b []byte) error {
	var res WorkflowTasksItems0WorkItemListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
