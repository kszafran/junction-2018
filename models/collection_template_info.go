// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CollectionTemplateInfo collection template info
// swagger:model CollectionTemplateInfo
type CollectionTemplateInfo []*CollectionTemplateInfoItems0

// Validate validates this collection template info
func (m CollectionTemplateInfo) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CollectionTemplateInfoItems0 collection template info items0
// swagger:model CollectionTemplateInfoItems0
type CollectionTemplateInfoItems0 struct {

	// composite
	Composite bool `json:"composite,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// template Id
	TemplateID string `json:"templateId,omitempty"`

	// versions info
	VersionsInfo []*CollectionTemplateInfoItems0VersionsInfoItems0 `json:"versionsInfo"`
}

// Validate validates this collection template info items0
func (m *CollectionTemplateInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVersionsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionTemplateInfoItems0) validateVersionsInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VersionsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.VersionsInfo); i++ {
		if swag.IsZero(m.VersionsInfo[i]) { // not required
			continue
		}

		if m.VersionsInfo[i] != nil {
			if err := m.VersionsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("versionsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionTemplateInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionTemplateInfoItems0) UnmarshalBinary(b []byte) error {
	var res CollectionTemplateInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CollectionTemplateInfoItems0VersionsInfoItems0 collection template info items0 versions info items0
// swagger:model CollectionTemplateInfoItems0VersionsInfoItems0
type CollectionTemplateInfoItems0VersionsInfoItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// version time
	VersionTime float64 `json:"versionTime,omitempty"`
}

// Validate validates this collection template info items0 versions info items0
func (m *CollectionTemplateInfoItems0VersionsInfoItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CollectionTemplateInfoItems0VersionsInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionTemplateInfoItems0VersionsInfoItems0) UnmarshalBinary(b []byte) error {
	var res CollectionTemplateInfoItems0VersionsInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
