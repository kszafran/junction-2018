// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NetworkDeviceListResult network device list result
// swagger:model NetworkDeviceListResult
type NetworkDeviceListResult struct {

	// response
	Response []*NetworkDeviceListResultResponseItems0 `json:"response"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this network device list result
func (m *NetworkDeviceListResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkDeviceListResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	for i := 0; i < len(m.Response); i++ {
		if swag.IsZero(m.Response[i]) { // not required
			continue
		}

		if m.Response[i] != nil {
			if err := m.Response[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkDeviceListResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkDeviceListResult) UnmarshalBinary(b []byte) error {
	var res NetworkDeviceListResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkDeviceListResultResponseItems0 network device list result response items0
// swagger:model NetworkDeviceListResultResponseItems0
type NetworkDeviceListResultResponseItems0 struct {

	// ap manager interface Ip
	ApManagerInterfaceIP string `json:"apManagerInterfaceIp,omitempty"`

	// associated wlc Ip
	AssociatedWlcIP string `json:"associatedWlcIp,omitempty"`

	// boot date time
	BootDateTime string `json:"bootDateTime,omitempty"`

	// collection interval
	CollectionInterval string `json:"collectionInterval,omitempty"`

	// collection status
	CollectionStatus string `json:"collectionStatus,omitempty"`

	// error code
	ErrorCode string `json:"errorCode,omitempty"`

	// error description
	ErrorDescription string `json:"errorDescription,omitempty"`

	// family
	Family string `json:"family,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// interface count
	InterfaceCount string `json:"interfaceCount,omitempty"`

	// inventory status detail
	InventoryStatusDetail string `json:"inventoryStatusDetail,omitempty"`

	// last update time
	LastUpdateTime string `json:"lastUpdateTime,omitempty"`

	// last updated
	LastUpdated string `json:"lastUpdated,omitempty"`

	// line card count
	LineCardCount string `json:"lineCardCount,omitempty"`

	// line card Id
	LineCardID string `json:"lineCardId,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// location name
	LocationName string `json:"locationName,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// management Ip address
	ManagementIPAddress string `json:"managementIpAddress,omitempty"`

	// memory size
	MemorySize string `json:"memorySize,omitempty"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// reachability failure reason
	ReachabilityFailureReason string `json:"reachabilityFailureReason,omitempty"`

	// reachability status
	ReachabilityStatus string `json:"reachabilityStatus,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// role source
	RoleSource string `json:"roleSource,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// series
	Series string `json:"series,omitempty"`

	// snmp contact
	SnmpContact string `json:"snmpContact,omitempty"`

	// snmp location
	SnmpLocation string `json:"snmpLocation,omitempty"`

	// software type
	SoftwareType string `json:"softwareType,omitempty"`

	// software version
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// tag count
	TagCount string `json:"tagCount,omitempty"`

	// tunnel Udp port
	TunnelUDPPort string `json:"tunnelUdpPort,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// up time
	UpTime string `json:"upTime,omitempty"`

	// waas device mode
	WaasDeviceMode string `json:"waasDeviceMode,omitempty"`
}

// Validate validates this network device list result response items0
func (m *NetworkDeviceListResultResponseItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkDeviceListResultResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkDeviceListResultResponseItems0) UnmarshalBinary(b []byte) error {
	var res NetworkDeviceListResultResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
