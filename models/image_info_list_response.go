// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageInfoListResponse image info list response
// swagger:model ImageInfoListResponse
type ImageInfoListResponse struct {

	// response
	Response []*ImageInfoListResponseResponseItems0 `json:"response"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this image info list response
func (m *ImageInfoListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInfoListResponse) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	for i := 0; i < len(m.Response); i++ {
		if swag.IsZero(m.Response[i]) { // not required
			continue
		}

		if m.Response[i] != nil {
			if err := m.Response[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageInfoListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInfoListResponse) UnmarshalBinary(b []byte) error {
	var res ImageInfoListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageInfoListResponseResponseItems0 image info list response response items0
// swagger:model ImageInfoListResponseResponseItems0
type ImageInfoListResponseResponseItems0 struct {

	// applicable devices for image
	ApplicableDevicesForImage []*ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0 `json:"applicableDevicesForImage"`

	// application type
	ApplicationType string `json:"applicationType,omitempty"`

	// created time
	CreatedTime string `json:"createdTime,omitempty"`

	// extended attributes
	ExtendedAttributes interface{} `json:"extendedAttributes,omitempty"`

	// family
	Family string `json:"family,omitempty"`

	// feature
	Feature string `json:"feature,omitempty"`

	// file service Id
	FileServiceID string `json:"fileServiceId,omitempty"`

	// file size
	FileSize string `json:"fileSize,omitempty"`

	// image integrity status
	ImageIntegrityStatus string `json:"imageIntegrityStatus,omitempty"`

	// image name
	ImageName string `json:"imageName,omitempty"`

	// image series
	ImageSeries []string `json:"imageSeries"`

	// image source
	ImageSource string `json:"imageSource,omitempty"`

	// image type
	ImageType string `json:"imageType,omitempty"`

	// image Uuid
	ImageUUID string `json:"imageUuid,omitempty"`

	// import source type
	// Enum: [DEVICE REMOTEURL CCO FILESYSTEM]
	ImportSourceType string `json:"importSourceType,omitempty"`

	// is tagged golden
	IsTaggedGolden bool `json:"isTaggedGolden,omitempty"`

	// md5 checksum
	Md5Checksum string `json:"md5Checksum,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// profile info
	ProfileInfo []*ImageInfoListResponseResponseItems0ProfileInfoItems0 `json:"profileInfo"`

	// sha check sum
	ShaCheckSum string `json:"shaCheckSum,omitempty"`

	// vendor
	Vendor string `json:"vendor,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this image info list response response items0
func (m *ImageInfoListResponseResponseItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicableDevicesForImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProfileInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageInfoListResponseResponseItems0) validateApplicableDevicesForImage(formats strfmt.Registry) error {

	if swag.IsZero(m.ApplicableDevicesForImage) { // not required
		return nil
	}

	for i := 0; i < len(m.ApplicableDevicesForImage); i++ {
		if swag.IsZero(m.ApplicableDevicesForImage[i]) { // not required
			continue
		}

		if m.ApplicableDevicesForImage[i] != nil {
			if err := m.ApplicableDevicesForImage[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("applicableDevicesForImage" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var imageInfoListResponseResponseItems0TypeImportSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEVICE","REMOTEURL","CCO","FILESYSTEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageInfoListResponseResponseItems0TypeImportSourceTypePropEnum = append(imageInfoListResponseResponseItems0TypeImportSourceTypePropEnum, v)
	}
}

const (

	// ImageInfoListResponseResponseItems0ImportSourceTypeDEVICE captures enum value "DEVICE"
	ImageInfoListResponseResponseItems0ImportSourceTypeDEVICE string = "DEVICE"

	// ImageInfoListResponseResponseItems0ImportSourceTypeREMOTEURL captures enum value "REMOTEURL"
	ImageInfoListResponseResponseItems0ImportSourceTypeREMOTEURL string = "REMOTEURL"

	// ImageInfoListResponseResponseItems0ImportSourceTypeCCO captures enum value "CCO"
	ImageInfoListResponseResponseItems0ImportSourceTypeCCO string = "CCO"

	// ImageInfoListResponseResponseItems0ImportSourceTypeFILESYSTEM captures enum value "FILESYSTEM"
	ImageInfoListResponseResponseItems0ImportSourceTypeFILESYSTEM string = "FILESYSTEM"
)

// prop value enum
func (m *ImageInfoListResponseResponseItems0) validateImportSourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageInfoListResponseResponseItems0TypeImportSourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ImageInfoListResponseResponseItems0) validateImportSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ImportSourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateImportSourceTypeEnum("importSourceType", "body", m.ImportSourceType); err != nil {
		return err
	}

	return nil
}

func (m *ImageInfoListResponseResponseItems0) validateProfileInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.ProfileInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.ProfileInfo); i++ {
		if swag.IsZero(m.ProfileInfo[i]) { // not required
			continue
		}

		if m.ProfileInfo[i] != nil {
			if err := m.ProfileInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("profileInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0) UnmarshalBinary(b []byte) error {
	var res ImageInfoListResponseResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0 image info list response response items0 applicable devices for image items0
// swagger:model ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0
type ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0 struct {

	// mdf Id
	MdfID string `json:"mdfId,omitempty"`

	// product Id
	ProductID []string `json:"productId"`

	// product name
	ProductName string `json:"productName,omitempty"`
}

// Validate validates this image info list response response items0 applicable devices for image items0
func (m *ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0) UnmarshalBinary(b []byte) error {
	var res ImageInfoListResponseResponseItems0ApplicableDevicesForImageItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ImageInfoListResponseResponseItems0ProfileInfoItems0 image info list response response items0 profile info items0
// swagger:model ImageInfoListResponseResponseItems0ProfileInfoItems0
type ImageInfoListResponseResponseItems0ProfileInfoItems0 struct {

	// description
	Description string `json:"description,omitempty"`

	// extended attributes
	ExtendedAttributes interface{} `json:"extendedAttributes,omitempty"`

	// memory
	Memory int64 `json:"memory,omitempty"`

	// product type
	ProductType string `json:"productType,omitempty"`

	// profile name
	ProfileName string `json:"profileName,omitempty"`

	// shares
	Shares int64 `json:"shares,omitempty"`

	// v Cpu
	VCPU int64 `json:"vCpu,omitempty"`
}

// Validate validates this image info list response response items0 profile info items0
func (m *ImageInfoListResponseResponseItems0ProfileInfoItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0ProfileInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageInfoListResponseResponseItems0ProfileInfoItems0) UnmarshalBinary(b []byte) error {
	var res ImageInfoListResponseResponseItems0ProfileInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
