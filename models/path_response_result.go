// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PathResponseResult path response result
// swagger:model PathResponseResult
type PathResponseResult struct {

	// response
	Response *PathResponseResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this path response result
func (m *PathResponseResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResult) UnmarshalBinary(b []byte) error {
	var res PathResponseResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponse path response result response
// swagger:model PathResponseResultResponse
type PathResponseResultResponse struct {

	// detailed status
	DetailedStatus *PathResponseResultResponseDetailedStatus `json:"detailedStatus,omitempty"`

	// last update
	LastUpdate string `json:"lastUpdate,omitempty"`

	// network elements
	NetworkElements []*PathResponseResultResponseNetworkElementsItems0 `json:"networkElements"`

	// network elements info
	NetworkElementsInfo []*PathResponseResultResponseNetworkElementsInfoItems0 `json:"networkElementsInfo"`

	// properties
	Properties []string `json:"properties"`

	// request
	Request *PathResponseResultResponseRequest `json:"request,omitempty"`
}

// Validate validates this path response result response
func (m *PathResponseResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetailedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkElementsInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponse) validateDetailedStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailedStatus) { // not required
		return nil
	}

	if m.DetailedStatus != nil {
		if err := m.DetailedStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response" + "." + "detailedStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponse) validateNetworkElements(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElements) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkElements); i++ {
		if swag.IsZero(m.NetworkElements[i]) { // not required
			continue
		}

		if m.NetworkElements[i] != nil {
			if err := m.NetworkElements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "networkElements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponse) validateNetworkElementsInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkElementsInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkElementsInfo); i++ {
		if swag.IsZero(m.NetworkElementsInfo[i]) { // not required
			continue
		}

		if m.NetworkElementsInfo[i] != nil {
			if err := m.NetworkElementsInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "networkElementsInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponse) validateRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.Request) { // not required
		return nil
	}

	if m.Request != nil {
		if err := m.Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response" + "." + "request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponse) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseDetailedStatus path response result response detailed status
// swagger:model PathResponseResultResponseDetailedStatus
type PathResponseResultResponseDetailedStatus struct {

	// acl trace calculation
	ACLTraceCalculation string `json:"aclTraceCalculation,omitempty"`

	// acl trace calculation failure reason
	ACLTraceCalculationFailureReason string `json:"aclTraceCalculationFailureReason,omitempty"`
}

// Validate validates this path response result response detailed status
func (m *PathResponseResultResponseDetailedStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseDetailedStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseDetailedStatus) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseDetailedStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0 path response result response network elements info items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0
type PathResponseResultResponseNetworkElementsInfoItems0 struct {

	// accuracy list
	AccuracyList []*PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0 `json:"accuracyList"`

	// detailed status
	DetailedStatus *PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus `json:"detailedStatus,omitempty"`

	// device statistics
	DeviceStatistics *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics `json:"deviceStatistics,omitempty"`

	// device stats collection
	DeviceStatsCollection string `json:"deviceStatsCollection,omitempty"`

	// device stats collection failure reason
	DeviceStatsCollectionFailureReason string `json:"deviceStatsCollectionFailureReason,omitempty"`

	// egress interface
	EgressInterface *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface `json:"egressInterface,omitempty"`

	// flex connect
	FlexConnect *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect `json:"flexConnect,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ingress interface
	IngressInterface *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface `json:"ingressInterface,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// link information source
	LinkInformationSource string `json:"linkInformationSource,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// perf mon collection
	PerfMonCollection string `json:"perfMonCollection,omitempty"`

	// perf mon collection failure reason
	PerfMonCollectionFailureReason string `json:"perfMonCollectionFailureReason,omitempty"`

	// perf monitor statistics
	PerfMonitorStatistics []*PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0 `json:"perfMonitorStatistics"`

	// role
	Role string `json:"role,omitempty"`

	// ssid
	Ssid string `json:"ssid,omitempty"`

	// tunnels
	Tunnels []string `json:"tunnels"`

	// type
	Type string `json:"type,omitempty"`

	// wlan Id
	WlanID string `json:"wlanId,omitempty"`
}

// Validate validates this path response result response network elements info items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccuracyList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexConnect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerfMonitorStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateAccuracyList(formats strfmt.Registry) error {

	if swag.IsZero(m.AccuracyList) { // not required
		return nil
	}

	for i := 0; i < len(m.AccuracyList); i++ {
		if swag.IsZero(m.AccuracyList[i]) { // not required
			continue
		}

		if m.AccuracyList[i] != nil {
			if err := m.AccuracyList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accuracyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateDetailedStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailedStatus) { // not required
		return nil
	}

	if m.DetailedStatus != nil {
		if err := m.DetailedStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateDeviceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceStatistics) { // not required
		return nil
	}

	if m.DeviceStatistics != nil {
		if err := m.DeviceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateEgressInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressInterface) { // not required
		return nil
	}

	if m.EgressInterface != nil {
		if err := m.EgressInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateFlexConnect(formats strfmt.Registry) error {

	if swag.IsZero(m.FlexConnect) { // not required
		return nil
	}

	if m.FlexConnect != nil {
		if err := m.FlexConnect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validateIngressInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressInterface) { // not required
		return nil
	}

	if m.IngressInterface != nil {
		if err := m.IngressInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0) validatePerfMonitorStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.PerfMonitorStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.PerfMonitorStatistics); i++ {
		if swag.IsZero(m.PerfMonitorStatistics[i]) { // not required
			continue
		}

		if m.PerfMonitorStatistics[i] != nil {
			if err := m.PerfMonitorStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("perfMonitorStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0 path response result response network elements info items0 accuracy list items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0
type PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0 struct {

	// percent
	Percent int64 `json:"percent,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this path response result response network elements info items0 accuracy list items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0AccuracyListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus path response result response network elements info items0 detailed status
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus
type PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus struct {

	// acl trace calculation
	ACLTraceCalculation string `json:"aclTraceCalculation,omitempty"`

	// acl trace calculation failure reason
	ACLTraceCalculationFailureReason string `json:"aclTraceCalculationFailureReason,omitempty"`
}

// Validate validates this path response result response network elements info items0 detailed status
func (m *PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0DetailedStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics path response result response network elements info items0 device statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics
type PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics struct {

	// cpu statistics
	CPUStatistics *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics `json:"cpuStatistics,omitempty"`

	// memory statistics
	MemoryStatistics *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics `json:"memoryStatistics,omitempty"`
}

// Validate validates this path response result response network elements info items0 device statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics) validateCPUStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUStatistics) { // not required
		return nil
	}

	if m.CPUStatistics != nil {
		if err := m.CPUStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics" + "." + "cpuStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics) validateMemoryStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryStatistics) { // not required
		return nil
	}

	if m.MemoryStatistics != nil {
		if err := m.MemoryStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics" + "." + "memoryStatistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0DeviceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics path response result response network elements info items0 device statistics CPU statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics
type PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics struct {

	// five min usage in percentage
	FiveMinUsageInPercentage float64 `json:"fiveMinUsageInPercentage,omitempty"`

	// five secs usage in percentage
	FiveSecsUsageInPercentage float64 `json:"fiveSecsUsageInPercentage,omitempty"`

	// one min usage in percentage
	OneMinUsageInPercentage float64 `json:"oneMinUsageInPercentage,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 device statistics CPU statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsCPUStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics path response result response network elements info items0 device statistics memory statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics
type PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics struct {

	// memory usage
	MemoryUsage int64 `json:"memoryUsage,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`

	// total memory
	TotalMemory int64 `json:"totalMemory,omitempty"`
}

// Validate validates this path response result response network elements info items0 device statistics memory statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0DeviceStatisticsMemoryStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterface path response result response network elements info items0 egress interface
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterface
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterface struct {

	// physical interface
	PhysicalInterface *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface `json:"physicalInterface,omitempty"`

	// virtual interface
	VirtualInterface []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0 `json:"virtualInterface"`
}

// Validate validates this path response result response network elements info items0 egress interface
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicalInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualInterface(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface) validatePhysicalInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalInterface) { // not required
		return nil
	}

	if m.PhysicalInterface != nil {
		if err := m.PhysicalInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressInterface" + "." + "physicalInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface) validateVirtualInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualInterface) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualInterface); i++ {
		if swag.IsZero(m.VirtualInterface[i]) { // not required
			continue
		}

		if m.VirtualInterface[i] != nil {
			if err := m.VirtualInterface[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressInterface" + "." + "virtualInterface" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface path response result response network elements info items0 egress interface physical interface
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressInterface" + "." + "physicalInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressInterface" + "." + "physicalInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressInterface" + "." + "physicalInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressInterface" + "." + "physicalInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis path response result response network elements info items0 egress interface physical interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressInterface" + "." + "physicalInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics path response result response network elements info items0 egress interface physical interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface interface statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0 path response result response network elements info items0 egress interface physical interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements info items0 egress interface physical interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0 path response result response network elements info items0 egress interface physical interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface physical interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfacePhysicalInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0 path response result response network elements info items0 egress interface virtual interface items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0 struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis path response result response network elements info items0 egress interface virtual interface items0 ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics path response result response network elements info items0 egress interface virtual interface items0 interface statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 interface statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0InterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 path response result response network elements info items0 egress interface virtual interface items0 path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 path overlay info items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo path response result response network elements info items0 egress interface virtual interface items0 path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0 path response result response network elements info items0 egress interface virtual interface items0 qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0
type PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 egress interface virtual interface items0 qos statistics items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0EgressInterfaceVirtualInterfaceItems0QosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnect path response result response network elements info items0 flex connect
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnect
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnect struct {

	// authentication
	// Enum: [LOCAL CENTRAL]
	Authentication string `json:"authentication,omitempty"`

	// data switching
	// Enum: [LOCAL CENTRAL]
	DataSwitching string `json:"dataSwitching,omitempty"`

	// egress Acl analysis
	EgressACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis `json:"egressAclAnalysis,omitempty"`

	// ingress Acl analysis
	IngressACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis `json:"ingressAclAnalysis,omitempty"`

	// wireless lan controller Id
	WirelessLanControllerID string `json:"wirelessLanControllerId,omitempty"`

	// wireless lan controller name
	WirelessLanControllerName string `json:"wirelessLanControllerName,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSwitching(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCAL","CENTRAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeAuthenticationPropEnum = append(pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeAuthenticationPropEnum, v)
	}
}

const (

	// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectAuthenticationLOCAL captures enum value "LOCAL"
	PathResponseResultResponseNetworkElementsInfoItems0FlexConnectAuthenticationLOCAL string = "LOCAL"

	// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectAuthenticationCENTRAL captures enum value "CENTRAL"
	PathResponseResultResponseNetworkElementsInfoItems0FlexConnectAuthenticationCENTRAL string = "CENTRAL"
)

// prop value enum
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationEnum("flexConnect"+"."+"authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

var pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeDataSwitchingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCAL","CENTRAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeDataSwitchingPropEnum = append(pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeDataSwitchingPropEnum, v)
	}
}

const (

	// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectDataSwitchingLOCAL captures enum value "LOCAL"
	PathResponseResultResponseNetworkElementsInfoItems0FlexConnectDataSwitchingLOCAL string = "LOCAL"

	// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectDataSwitchingCENTRAL captures enum value "CENTRAL"
	PathResponseResultResponseNetworkElementsInfoItems0FlexConnectDataSwitchingCENTRAL string = "CENTRAL"
)

// prop value enum
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateDataSwitchingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pathResponseResultResponseNetworkElementsInfoItems0FlexConnectTypeDataSwitchingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateDataSwitching(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSwitching) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataSwitchingEnum("flexConnect"+"."+"dataSwitching", "body", m.DataSwitching); err != nil {
		return err
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateEgressACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressACLAnalysis) { // not required
		return nil
	}

	if m.EgressACLAnalysis != nil {
		if err := m.EgressACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect" + "." + "egressAclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) validateIngressACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressACLAnalysis) { // not required
		return nil
	}

	if m.IngressACLAnalysis != nil {
		if err := m.IngressACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect" + "." + "ingressAclAnalysis")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnect) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis path response result response network elements info items0 flex connect egress ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect egress ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flexConnect" + "." + "egressAclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 path response result response network elements info items0 flex connect egress ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect egress ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 flex connect egress ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect egress ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 flex connect egress ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 flex connect egress ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis path response result response network elements info items0 flex connect ingress ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect ingress ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flexConnect" + "." + "ingressAclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 flex connect ingress ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterface path response result response network elements info items0 ingress interface
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterface
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterface struct {

	// physical interface
	PhysicalInterface *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface `json:"physicalInterface,omitempty"`

	// virtual interface
	VirtualInterface []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0 `json:"virtualInterface"`
}

// Validate validates this path response result response network elements info items0 ingress interface
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhysicalInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualInterface(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface) validatePhysicalInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.PhysicalInterface) { // not required
		return nil
	}

	if m.PhysicalInterface != nil {
		if err := m.PhysicalInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressInterface" + "." + "physicalInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface) validateVirtualInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualInterface) { // not required
		return nil
	}

	for i := 0; i < len(m.VirtualInterface); i++ {
		if swag.IsZero(m.VirtualInterface[i]) { // not required
			continue
		}

		if m.VirtualInterface[i] != nil {
			if err := m.VirtualInterface[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressInterface" + "." + "virtualInterface" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface path response result response network elements info items0 ingress interface physical interface
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressInterface" + "." + "physicalInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressInterface" + "." + "physicalInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressInterface" + "." + "physicalInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressInterface" + "." + "physicalInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis path response result response network elements info items0 ingress interface physical interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressInterface" + "." + "physicalInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics path response result response network elements info items0 ingress interface physical interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface interface statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0 path response result response network elements info items0 ingress interface physical interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements info items0 ingress interface physical interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0 path response result response network elements info items0 ingress interface physical interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface physical interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfacePhysicalInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0 path response result response network elements info items0 ingress interface virtual interface items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0 struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0ACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics path response result response network elements info items0 ingress interface virtual interface items0 interface statistics
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 interface statistics
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0InterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 path response result response network elements info items0 ingress interface virtual interface items0 path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 path overlay info items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo path response result response network elements info items0 ingress interface virtual interface items0 path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0PathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0 path response result response network elements info items0 ingress interface virtual interface items0 qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0
type PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements info items0 ingress interface virtual interface items0 qos statistics items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0IngressInterfaceVirtualInterfaceItems0QosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0 path response result response network elements info items0 perf monitor statistics items0
// swagger:model PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0
type PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0 struct {

	// byte rate
	ByteRate int64 `json:"byteRate,omitempty"`

	// dest Ip address
	DestIPAddress string `json:"destIpAddress,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// input interface
	InputInterface string `json:"inputInterface,omitempty"`

	// ipv4 d s c p
	IPV4DSCP string `json:"ipv4DSCP,omitempty"`

	// ipv4 TTL
	IPV4TTL int64 `json:"ipv4TTL,omitempty"`

	// output interface
	OutputInterface string `json:"outputInterface,omitempty"`

	// packet bytes
	PacketBytes int64 `json:"packetBytes,omitempty"`

	// packet count
	PacketCount int64 `json:"packetCount,omitempty"`

	// packet loss
	PacketLoss int64 `json:"packetLoss,omitempty"`

	// packet loss percentage
	PacketLossPercentage float64 `json:"packetLossPercentage,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`

	// rtp jitter max
	RtpJitterMax int64 `json:"rtpJitterMax,omitempty"`

	// rtp jitter mean
	RtpJitterMean int64 `json:"rtpJitterMean,omitempty"`

	// rtp jitter min
	RtpJitterMin int64 `json:"rtpJitterMin,omitempty"`

	// source Ip address
	SourceIPAddress string `json:"sourceIpAddress,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`
}

// Validate validates this path response result response network elements info items0 perf monitor statistics items0
func (m *PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsInfoItems0PerfMonitorStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0 path response result response network elements items0
// swagger:model PathResponseResultResponseNetworkElementsItems0
type PathResponseResultResponseNetworkElementsItems0 struct {

	// accuracy list
	AccuracyList []*PathResponseResultResponseNetworkElementsItems0AccuracyListItems0 `json:"accuracyList"`

	// detailed status
	DetailedStatus *PathResponseResultResponseNetworkElementsItems0DetailedStatus `json:"detailedStatus,omitempty"`

	// device statistics
	DeviceStatistics *PathResponseResultResponseNetworkElementsItems0DeviceStatistics `json:"deviceStatistics,omitempty"`

	// device stats collection
	DeviceStatsCollection string `json:"deviceStatsCollection,omitempty"`

	// device stats collection failure reason
	DeviceStatsCollectionFailureReason string `json:"deviceStatsCollectionFailureReason,omitempty"`

	// egress physical interface
	EgressPhysicalInterface *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface `json:"egressPhysicalInterface,omitempty"`

	// egress virtual interface
	EgressVirtualInterface *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface `json:"egressVirtualInterface,omitempty"`

	// flex connect
	FlexConnect *PathResponseResultResponseNetworkElementsItems0FlexConnect `json:"flexConnect,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ingress physical interface
	IngressPhysicalInterface *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface `json:"ingressPhysicalInterface,omitempty"`

	// ingress virtual interface
	IngressVirtualInterface *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface `json:"ingressVirtualInterface,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// link information source
	LinkInformationSource string `json:"linkInformationSource,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// perf mon collection
	PerfMonCollection string `json:"perfMonCollection,omitempty"`

	// perf mon collection failure reason
	PerfMonCollectionFailureReason string `json:"perfMonCollectionFailureReason,omitempty"`

	// perf mon statistics
	PerfMonStatistics []*PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0 `json:"perfMonStatistics"`

	// role
	Role string `json:"role,omitempty"`

	// ssid
	Ssid string `json:"ssid,omitempty"`

	// tunnels
	Tunnels []string `json:"tunnels"`

	// type
	Type string `json:"type,omitempty"`

	// wlan Id
	WlanID string `json:"wlanId,omitempty"`
}

// Validate validates this path response result response network elements items0
func (m *PathResponseResultResponseNetworkElementsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccuracyList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailedStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressPhysicalInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressVirtualInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexConnect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressPhysicalInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressVirtualInterface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerfMonStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateAccuracyList(formats strfmt.Registry) error {

	if swag.IsZero(m.AccuracyList) { // not required
		return nil
	}

	for i := 0; i < len(m.AccuracyList); i++ {
		if swag.IsZero(m.AccuracyList[i]) { // not required
			continue
		}

		if m.AccuracyList[i] != nil {
			if err := m.AccuracyList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accuracyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateDetailedStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailedStatus) { // not required
		return nil
	}

	if m.DetailedStatus != nil {
		if err := m.DetailedStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("detailedStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateDeviceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.DeviceStatistics) { // not required
		return nil
	}

	if m.DeviceStatistics != nil {
		if err := m.DeviceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateEgressPhysicalInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressPhysicalInterface) { // not required
		return nil
	}

	if m.EgressPhysicalInterface != nil {
		if err := m.EgressPhysicalInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressPhysicalInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateEgressVirtualInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressVirtualInterface) { // not required
		return nil
	}

	if m.EgressVirtualInterface != nil {
		if err := m.EgressVirtualInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressVirtualInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateFlexConnect(formats strfmt.Registry) error {

	if swag.IsZero(m.FlexConnect) { // not required
		return nil
	}

	if m.FlexConnect != nil {
		if err := m.FlexConnect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateIngressPhysicalInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressPhysicalInterface) { // not required
		return nil
	}

	if m.IngressPhysicalInterface != nil {
		if err := m.IngressPhysicalInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressPhysicalInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validateIngressVirtualInterface(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressVirtualInterface) { // not required
		return nil
	}

	if m.IngressVirtualInterface != nil {
		if err := m.IngressVirtualInterface.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressVirtualInterface")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0) validatePerfMonStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.PerfMonStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.PerfMonStatistics); i++ {
		if swag.IsZero(m.PerfMonStatistics[i]) { // not required
			continue
		}

		if m.PerfMonStatistics[i] != nil {
			if err := m.PerfMonStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("perfMonStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0AccuracyListItems0 path response result response network elements items0 accuracy list items0
// swagger:model PathResponseResultResponseNetworkElementsItems0AccuracyListItems0
type PathResponseResultResponseNetworkElementsItems0AccuracyListItems0 struct {

	// percent
	Percent int64 `json:"percent,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`
}

// Validate validates this path response result response network elements items0 accuracy list items0
func (m *PathResponseResultResponseNetworkElementsItems0AccuracyListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0AccuracyListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0AccuracyListItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0AccuracyListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0DetailedStatus path response result response network elements items0 detailed status
// swagger:model PathResponseResultResponseNetworkElementsItems0DetailedStatus
type PathResponseResultResponseNetworkElementsItems0DetailedStatus struct {

	// acl trace calculation
	ACLTraceCalculation string `json:"aclTraceCalculation,omitempty"`

	// acl trace calculation failure reason
	ACLTraceCalculationFailureReason string `json:"aclTraceCalculationFailureReason,omitempty"`
}

// Validate validates this path response result response network elements items0 detailed status
func (m *PathResponseResultResponseNetworkElementsItems0DetailedStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DetailedStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DetailedStatus) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0DetailedStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0DeviceStatistics path response result response network elements items0 device statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0DeviceStatistics
type PathResponseResultResponseNetworkElementsItems0DeviceStatistics struct {

	// cpu statistics
	CPUStatistics *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics `json:"cpuStatistics,omitempty"`

	// memory statistics
	MemoryStatistics *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics `json:"memoryStatistics,omitempty"`
}

// Validate validates this path response result response network elements items0 device statistics
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatistics) validateCPUStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.CPUStatistics) { // not required
		return nil
	}

	if m.CPUStatistics != nil {
		if err := m.CPUStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics" + "." + "cpuStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatistics) validateMemoryStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.MemoryStatistics) { // not required
		return nil
	}

	if m.MemoryStatistics != nil {
		if err := m.MemoryStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deviceStatistics" + "." + "memoryStatistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0DeviceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics path response result response network elements items0 device statistics CPU statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics
type PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics struct {

	// five min usage in percentage
	FiveMinUsageInPercentage float64 `json:"fiveMinUsageInPercentage,omitempty"`

	// five secs usage in percentage
	FiveSecsUsageInPercentage float64 `json:"fiveSecsUsageInPercentage,omitempty"`

	// one min usage in percentage
	OneMinUsageInPercentage float64 `json:"oneMinUsageInPercentage,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 device statistics CPU statistics
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0DeviceStatisticsCPUStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics path response result response network elements items0 device statistics memory statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics
type PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics struct {

	// memory usage
	MemoryUsage int64 `json:"memoryUsage,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`

	// total memory
	TotalMemory int64 `json:"totalMemory,omitempty"`
}

// Validate validates this path response result response network elements items0 device statistics memory statistics
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0DeviceStatisticsMemoryStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface path response result response network elements items0 egress physical interface
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressPhysicalInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressPhysicalInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressPhysicalInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressPhysicalInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis path response result response network elements items0 egress physical interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressPhysicalInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements items0 egress physical interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 egress physical interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 egress physical interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 egress physical interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics path response result response network elements items0 egress physical interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface interface statistics
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0 path response result response network elements items0 egress physical interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements items0 egress physical interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0 path response result response network elements items0 egress physical interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 egress physical interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressPhysicalInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface path response result response network elements items0 egress virtual interface
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressVirtualInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("egressVirtualInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressVirtualInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressVirtualInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis path response result response network elements items0 egress virtual interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("egressVirtualInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements items0 egress virtual interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 egress virtual interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 egress virtual interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 egress virtual interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics path response result response network elements items0 egress virtual interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface interface statistics
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0 path response result response network elements items0 egress virtual interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements items0 egress virtual interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0 path response result response network elements items0 egress virtual interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 egress virtual interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0EgressVirtualInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnect path response result response network elements items0 flex connect
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnect
type PathResponseResultResponseNetworkElementsItems0FlexConnect struct {

	// authentication
	// Enum: [LOCAL CENTRAL]
	Authentication string `json:"authentication,omitempty"`

	// data switching
	// Enum: [LOCAL CENTRAL]
	DataSwitching string `json:"dataSwitching,omitempty"`

	// egress Acl analysis
	EgressACLAnalysis *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis `json:"egressAclAnalysis,omitempty"`

	// ingress Acl analysis
	IngressACLAnalysis *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis `json:"ingressAclAnalysis,omitempty"`

	// wireless lan controller Id
	WirelessLanControllerID string `json:"wirelessLanControllerId,omitempty"`

	// wireless lan controller name
	WirelessLanControllerName string `json:"wirelessLanControllerName,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSwitching(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEgressACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngressACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pathResponseResultResponseNetworkElementsItems0FlexConnectTypeAuthenticationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCAL","CENTRAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pathResponseResultResponseNetworkElementsItems0FlexConnectTypeAuthenticationPropEnum = append(pathResponseResultResponseNetworkElementsItems0FlexConnectTypeAuthenticationPropEnum, v)
	}
}

const (

	// PathResponseResultResponseNetworkElementsItems0FlexConnectAuthenticationLOCAL captures enum value "LOCAL"
	PathResponseResultResponseNetworkElementsItems0FlexConnectAuthenticationLOCAL string = "LOCAL"

	// PathResponseResultResponseNetworkElementsItems0FlexConnectAuthenticationCENTRAL captures enum value "CENTRAL"
	PathResponseResultResponseNetworkElementsItems0FlexConnectAuthenticationCENTRAL string = "CENTRAL"
)

// prop value enum
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateAuthenticationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pathResponseResultResponseNetworkElementsItems0FlexConnectTypeAuthenticationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationEnum("flexConnect"+"."+"authentication", "body", m.Authentication); err != nil {
		return err
	}

	return nil
}

var pathResponseResultResponseNetworkElementsItems0FlexConnectTypeDataSwitchingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCAL","CENTRAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pathResponseResultResponseNetworkElementsItems0FlexConnectTypeDataSwitchingPropEnum = append(pathResponseResultResponseNetworkElementsItems0FlexConnectTypeDataSwitchingPropEnum, v)
	}
}

const (

	// PathResponseResultResponseNetworkElementsItems0FlexConnectDataSwitchingLOCAL captures enum value "LOCAL"
	PathResponseResultResponseNetworkElementsItems0FlexConnectDataSwitchingLOCAL string = "LOCAL"

	// PathResponseResultResponseNetworkElementsItems0FlexConnectDataSwitchingCENTRAL captures enum value "CENTRAL"
	PathResponseResultResponseNetworkElementsItems0FlexConnectDataSwitchingCENTRAL string = "CENTRAL"
)

// prop value enum
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateDataSwitchingEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pathResponseResultResponseNetworkElementsItems0FlexConnectTypeDataSwitchingPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateDataSwitching(formats strfmt.Registry) error {

	if swag.IsZero(m.DataSwitching) { // not required
		return nil
	}

	// value enum
	if err := m.validateDataSwitchingEnum("flexConnect"+"."+"dataSwitching", "body", m.DataSwitching); err != nil {
		return err
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateEgressACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.EgressACLAnalysis) { // not required
		return nil
	}

	if m.EgressACLAnalysis != nil {
		if err := m.EgressACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect" + "." + "egressAclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) validateIngressACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.IngressACLAnalysis) { // not required
		return nil
	}

	if m.IngressACLAnalysis != nil {
		if err := m.IngressACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexConnect" + "." + "ingressAclAnalysis")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnect) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnect
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis path response result response network elements items0 flex connect egress ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis
type PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect egress ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flexConnect" + "." + "egressAclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 path response result response network elements items0 flex connect egress ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect egress ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 flex connect egress ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect egress ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 flex connect egress ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 flex connect egress ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectEgressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis path response result response network elements items0 flex connect ingress ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis
type PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect ingress ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("flexConnect" + "." + "ingressAclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 path response result response network elements items0 flex connect ingress ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect ingress ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 flex connect ingress ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 flex connect ingress ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 flex connect ingress ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 flex connect ingress ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0FlexConnectIngressACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface path response result response network elements items0 ingress physical interface
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressPhysicalInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressPhysicalInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressPhysicalInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressPhysicalInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis path response result response network elements items0 ingress physical interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressPhysicalInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements items0 ingress physical interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 ingress physical interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 ingress physical interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 ingress physical interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics path response result response network elements items0 ingress physical interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface interface statistics
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0 path response result response network elements items0 ingress physical interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements items0 ingress physical interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0 path response result response network elements items0 ingress physical interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress physical interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressPhysicalInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface path response result response network elements items0 ingress virtual interface
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface struct {

	// acl analysis
	ACLAnalysis *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis `json:"aclAnalysis,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// interface statistics
	InterfaceStatistics *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics `json:"interfaceStatistics,omitempty"`

	// interface stats collection
	InterfaceStatsCollection string `json:"interfaceStatsCollection,omitempty"`

	// interface stats collection failure reason
	InterfaceStatsCollectionFailureReason string `json:"interfaceStatsCollectionFailureReason,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// path overlay info
	PathOverlayInfo []*PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0 `json:"pathOverlayInfo"`

	// qos statistics
	QosStatistics []*PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0 `json:"qosStatistics"`

	// qos stats collection
	QosStatsCollection string `json:"qosStatsCollection,omitempty"`

	// qos stats collection failure reason
	QosStatsCollectionFailureReason string `json:"qosStatsCollectionFailureReason,omitempty"`

	// used vlan
	UsedVlan string `json:"usedVlan,omitempty"`

	// vrf name
	VrfName string `json:"vrfName,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLAnalysis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterfaceStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathOverlayInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQosStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) validateACLAnalysis(formats strfmt.Registry) error {

	if swag.IsZero(m.ACLAnalysis) { // not required
		return nil
	}

	if m.ACLAnalysis != nil {
		if err := m.ACLAnalysis.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressVirtualInterface" + "." + "aclAnalysis")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) validateInterfaceStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.InterfaceStatistics) { // not required
		return nil
	}

	if m.InterfaceStatistics != nil {
		if err := m.InterfaceStatistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingressVirtualInterface" + "." + "interfaceStatistics")
			}
			return err
		}
	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) validatePathOverlayInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.PathOverlayInfo) { // not required
		return nil
	}

	for i := 0; i < len(m.PathOverlayInfo); i++ {
		if swag.IsZero(m.PathOverlayInfo[i]) { // not required
			continue
		}

		if m.PathOverlayInfo[i] != nil {
			if err := m.PathOverlayInfo[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressVirtualInterface" + "." + "pathOverlayInfo" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) validateQosStatistics(formats strfmt.Registry) error {

	if swag.IsZero(m.QosStatistics) { // not required
		return nil
	}

	for i := 0; i < len(m.QosStatistics); i++ {
		if swag.IsZero(m.QosStatistics[i]) { // not required
			continue
		}

		if m.QosStatistics[i] != nil {
			if err := m.QosStatistics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressVirtualInterface" + "." + "qosStatistics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis path response result response network elements items0 ingress virtual interface ACL analysis
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis struct {

	// acl name
	ACLName string `json:"aclName,omitempty"`

	// matching aces
	MatchingAces []*PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0 `json:"matchingAces"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface ACL analysis
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingAces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis) validateMatchingAces(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingAces) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingAces); i++ {
		if swag.IsZero(m.MatchingAces[i]) { // not required
			continue
		}

		if m.MatchingAces[i] != nil {
			if err := m.MatchingAces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingressVirtualInterface" + "." + "aclAnalysis" + "." + "matchingAces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysis
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0 path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0 struct {

	// ace
	Ace string `json:"ace,omitempty"`

	// matching ports
	MatchingPorts []*PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 `json:"matchingPorts"`

	// result
	Result string `json:"result,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchingPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0) validateMatchingPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchingPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchingPorts); i++ {
		if swag.IsZero(m.MatchingPorts[i]) { // not required
			continue
		}

		if m.MatchingPorts[i] != nil {
			if err := m.MatchingPorts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchingPorts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0 matching ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0 struct {

	// ports
	Ports []*PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 `json:"ports"`

	// protocol
	Protocol string `json:"protocol,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0 matching ports items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) validatePorts(formats strfmt.Registry) error {

	if swag.IsZero(m.Ports) { // not required
		return nil
	}

	for i := 0; i < len(m.Ports); i++ {
		if swag.IsZero(m.Ports[i]) { // not required
			continue
		}

		if m.Ports[i] != nil {
			if err := m.Ports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0 matching ports items0 ports items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0 struct {

	// dest ports
	DestPorts []string `json:"destPorts"`

	// source ports
	SourcePorts []string `json:"sourcePorts"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface ACL analysis matching aces items0 matching ports items0 ports items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceACLAnalysisMatchingAcesItems0MatchingPortsItems0PortsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics path response result response network elements items0 ingress virtual interface interface statistics
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// input packets
	InputPackets int64 `json:"inputPackets,omitempty"`

	// input queue count
	InputQueueCount int64 `json:"inputQueueCount,omitempty"`

	// input queue drops
	InputQueueDrops int64 `json:"inputQueueDrops,omitempty"`

	// input queue flushes
	InputQueueFlushes int64 `json:"inputQueueFlushes,omitempty"`

	// input queue max depth
	InputQueueMaxDepth int64 `json:"inputQueueMaxDepth,omitempty"`

	// input ratebps
	InputRatebps int64 `json:"inputRatebps,omitempty"`

	// operational status
	OperationalStatus string `json:"operationalStatus,omitempty"`

	// output drop
	OutputDrop int64 `json:"outputDrop,omitempty"`

	// output packets
	OutputPackets int64 `json:"outputPackets,omitempty"`

	// output queue count
	OutputQueueCount int64 `json:"outputQueueCount,omitempty"`

	// output queue depth
	OutputQueueDepth int64 `json:"outputQueueDepth,omitempty"`

	// output ratebps
	OutputRatebps int64 `json:"outputRatebps,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface interface statistics
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceInterfaceStatistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0 path response result response network elements items0 ingress virtual interface path overlay info items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0 struct {

	// control plane
	ControlPlane string `json:"controlPlane,omitempty"`

	// data packet encapsulation
	DataPacketEncapsulation string `json:"dataPacketEncapsulation,omitempty"`

	// dest Ip
	DestIP string `json:"destIp,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source Ip
	SourceIP string `json:"sourceIp,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// vxlan info
	VxlanInfo *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo `json:"vxlanInfo,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface path overlay info items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVxlanInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0) validateVxlanInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.VxlanInfo) { // not required
		return nil
	}

	if m.VxlanInfo != nil {
		if err := m.VxlanInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vxlanInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo path response result response network elements items0 ingress virtual interface path overlay info items0 vxlan info
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo struct {

	// dscp
	Dscp string `json:"dscp,omitempty"`

	// vnid
	Vnid string `json:"vnid,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface path overlay info items0 vxlan info
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfacePathOverlayInfoItems0VxlanInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0 path response result response network elements items0 ingress virtual interface qos statistics items0
// swagger:model PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0
type PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0 struct {

	// class map name
	ClassMapName string `json:"classMapName,omitempty"`

	// drop rate
	DropRate int64 `json:"dropRate,omitempty"`

	// num bytes
	NumBytes int64 `json:"numBytes,omitempty"`

	// num packets
	NumPackets int64 `json:"numPackets,omitempty"`

	// offered rate
	OfferedRate int64 `json:"offeredRate,omitempty"`

	// queue bandwidthbps
	QueueBandwidthbps string `json:"queueBandwidthbps,omitempty"`

	// queue depth
	QueueDepth int64 `json:"queueDepth,omitempty"`

	// queue no buffer drops
	QueueNoBufferDrops int64 `json:"queueNoBufferDrops,omitempty"`

	// queue total drops
	QueueTotalDrops int64 `json:"queueTotalDrops,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`
}

// Validate validates this path response result response network elements items0 ingress virtual interface qos statistics items0
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0IngressVirtualInterfaceQosStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0 path response result response network elements items0 perf mon statistics items0
// swagger:model PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0
type PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0 struct {

	// byte rate
	ByteRate int64 `json:"byteRate,omitempty"`

	// dest Ip address
	DestIPAddress string `json:"destIpAddress,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// input interface
	InputInterface string `json:"inputInterface,omitempty"`

	// ipv4 d s c p
	IPV4DSCP string `json:"ipv4DSCP,omitempty"`

	// ipv4 TTL
	IPV4TTL int64 `json:"ipv4TTL,omitempty"`

	// output interface
	OutputInterface string `json:"outputInterface,omitempty"`

	// packet bytes
	PacketBytes int64 `json:"packetBytes,omitempty"`

	// packet count
	PacketCount int64 `json:"packetCount,omitempty"`

	// packet loss
	PacketLoss int64 `json:"packetLoss,omitempty"`

	// packet loss percentage
	PacketLossPercentage float64 `json:"packetLossPercentage,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// refreshed at
	RefreshedAt int64 `json:"refreshedAt,omitempty"`

	// rtp jitter max
	RtpJitterMax int64 `json:"rtpJitterMax,omitempty"`

	// rtp jitter mean
	RtpJitterMean int64 `json:"rtpJitterMean,omitempty"`

	// rtp jitter min
	RtpJitterMin int64 `json:"rtpJitterMin,omitempty"`

	// source Ip address
	SourceIPAddress string `json:"sourceIpAddress,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`
}

// Validate validates this path response result response network elements items0 perf mon statistics items0
func (m *PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseNetworkElementsItems0PerfMonStatisticsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PathResponseResultResponseRequest path response result response request
// swagger:model PathResponseResultResponseRequest
type PathResponseResultResponseRequest struct {

	// control path
	ControlPath bool `json:"controlPath,omitempty"`

	// create time
	CreateTime int64 `json:"createTime,omitempty"`

	// dest IP
	DestIP string `json:"destIP,omitempty"`

	// dest port
	DestPort string `json:"destPort,omitempty"`

	// failure reason
	FailureReason string `json:"failureReason,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// inclusions
	Inclusions []string `json:"inclusions"`

	// last update time
	LastUpdateTime int64 `json:"lastUpdateTime,omitempty"`

	// periodic refresh
	PeriodicRefresh bool `json:"periodicRefresh,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// source IP
	SourceIP string `json:"sourceIP,omitempty"`

	// source port
	SourcePort string `json:"sourcePort,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this path response result response request
func (m *PathResponseResultResponseRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PathResponseResultResponseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathResponseResultResponseRequest) UnmarshalBinary(b []byte) error {
	var res PathResponseResultResponseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
