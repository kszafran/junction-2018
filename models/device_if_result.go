// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DeviceIfResult device if result
// swagger:model DeviceIfResult
type DeviceIfResult struct {

	// response
	Response *DeviceIfResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this device if result
func (m *DeviceIfResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceIfResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIfResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIfResult) UnmarshalBinary(b []byte) error {
	var res DeviceIfResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DeviceIfResultResponse device if result response
// swagger:model DeviceIfResultResponse
type DeviceIfResultResponse struct {

	// admin status
	AdminStatus string `json:"adminStatus,omitempty"`

	// class name
	ClassName string `json:"className,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// device Id
	DeviceID string `json:"deviceId,omitempty"`

	// duplex
	Duplex string `json:"duplex,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// if index
	IfIndex string `json:"ifIndex,omitempty"`

	// instance tenant Id
	InstanceTenantID string `json:"instanceTenantId,omitempty"`

	// instance Uuid
	InstanceUUID string `json:"instanceUuid,omitempty"`

	// interface type
	InterfaceType string `json:"interfaceType,omitempty"`

	// ipv4 address
	IPV4Address string `json:"ipv4Address,omitempty"`

	// ipv4 mask
	IPV4Mask string `json:"ipv4Mask,omitempty"`

	// isis support
	IsisSupport string `json:"isisSupport,omitempty"`

	// last updated
	LastUpdated string `json:"lastUpdated,omitempty"`

	// mac address
	MacAddress string `json:"macAddress,omitempty"`

	// mapped physical interface Id
	MappedPhysicalInterfaceID string `json:"mappedPhysicalInterfaceId,omitempty"`

	// mapped physical interface name
	MappedPhysicalInterfaceName string `json:"mappedPhysicalInterfaceName,omitempty"`

	// media type
	MediaType string `json:"mediaType,omitempty"`

	// native vlan Id
	NativeVlanID string `json:"nativeVlanId,omitempty"`

	// ospf support
	OspfSupport string `json:"ospfSupport,omitempty"`

	// pid
	Pid string `json:"pid,omitempty"`

	// port mode
	PortMode string `json:"portMode,omitempty"`

	// port name
	PortName string `json:"portName,omitempty"`

	// port type
	PortType string `json:"portType,omitempty"`

	// serial no
	SerialNo string `json:"serialNo,omitempty"`

	// series
	Series string `json:"series,omitempty"`

	// speed
	Speed string `json:"speed,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// vlan Id
	VlanID string `json:"vlanId,omitempty"`

	// voice vlan
	VoiceVlan string `json:"voiceVlan,omitempty"`
}

// Validate validates this device if result response
func (m *DeviceIfResultResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeviceIfResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceIfResultResponse) UnmarshalBinary(b []byte) error {
	var res DeviceIfResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
