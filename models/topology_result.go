// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TopologyResult topology result
// swagger:model TopologyResult
type TopologyResult struct {

	// response
	Response *TopologyResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this topology result
func (m *TopologyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyResult) UnmarshalBinary(b []byte) error {
	var res TopologyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopologyResultResponse topology result response
// swagger:model TopologyResultResponse
type TopologyResultResponse struct {

	// id
	ID string `json:"id,omitempty"`

	// links
	Links []*TopologyResultResponseLinksItems0 `json:"links"`

	// nodes
	Nodes []*TopologyResultResponseNodesItems0 `json:"nodes"`
}

// Validate validates this topology result response
func (m *TopologyResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyResultResponse) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopologyResultResponse) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	for i := 0; i < len(m.Nodes); i++ {
		if swag.IsZero(m.Nodes[i]) { // not required
			continue
		}

		if m.Nodes[i] != nil {
			if err := m.Nodes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + "nodes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyResultResponse) UnmarshalBinary(b []byte) error {
	var res TopologyResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopologyResultResponseLinksItems0 topology result response links items0
// swagger:model TopologyResultResponseLinksItems0
type TopologyResultResponseLinksItems0 struct {

	// additional info
	AdditionalInfo interface{} `json:"additionalInfo,omitempty"`

	// end port ID
	EndPortID string `json:"endPortID,omitempty"`

	// end port ipv4 address
	EndPortIPV4Address string `json:"endPortIpv4Address,omitempty"`

	// end port ipv4 mask
	EndPortIPV4Mask string `json:"endPortIpv4Mask,omitempty"`

	// end port name
	EndPortName string `json:"endPortName,omitempty"`

	// end port speed
	EndPortSpeed string `json:"endPortSpeed,omitempty"`

	// grey out
	GreyOut bool `json:"greyOut,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// link status
	LinkStatus string `json:"linkStatus,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// start port ID
	StartPortID string `json:"startPortID,omitempty"`

	// start port ipv4 address
	StartPortIPV4Address string `json:"startPortIpv4Address,omitempty"`

	// start port ipv4 mask
	StartPortIPV4Mask string `json:"startPortIpv4Mask,omitempty"`

	// start port name
	StartPortName string `json:"startPortName,omitempty"`

	// start port speed
	StartPortSpeed string `json:"startPortSpeed,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// target
	Target string `json:"target,omitempty"`
}

// Validate validates this topology result response links items0
func (m *TopologyResultResponseLinksItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TopologyResultResponseLinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyResultResponseLinksItems0) UnmarshalBinary(b []byte) error {
	var res TopologyResultResponseLinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopologyResultResponseNodesItems0 topology result response nodes items0
// swagger:model TopologyResultResponseNodesItems0
type TopologyResultResponseNodesItems0 struct {

	// acl applied
	ACLApplied bool `json:"aclApplied,omitempty"`

	// additional info
	AdditionalInfo interface{} `json:"additionalInfo,omitempty"`

	// custom param
	CustomParam *TopologyResultResponseNodesItems0CustomParam `json:"customParam,omitempty"`

	// data path Id
	DataPathID string `json:"dataPathId,omitempty"`

	// device type
	DeviceType string `json:"deviceType,omitempty"`

	// family
	Family string `json:"family,omitempty"`

	// fixed
	Fixed bool `json:"fixed,omitempty"`

	// grey out
	GreyOut bool `json:"greyOut,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// network type
	NetworkType string `json:"networkType,omitempty"`

	// node type
	NodeType string `json:"nodeType,omitempty"`

	// order
	Order int64 `json:"order,omitempty"`

	// os type
	OsType string `json:"osType,omitempty"`

	// platform Id
	PlatformID string `json:"platformId,omitempty"`

	// role
	Role string `json:"role,omitempty"`

	// role source
	RoleSource string `json:"roleSource,omitempty"`

	// software version
	SoftwareVersion string `json:"softwareVersion,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// upper node
	UpperNode string `json:"upperNode,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// vlan Id
	VlanID string `json:"vlanId,omitempty"`

	// x
	X int64 `json:"x,omitempty"`

	// y
	Y int64 `json:"y,omitempty"`
}

// Validate validates this topology result response nodes items0
func (m *TopologyResultResponseNodesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomParam(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopologyResultResponseNodesItems0) validateCustomParam(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomParam) { // not required
		return nil
	}

	if m.CustomParam != nil {
		if err := m.CustomParam.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customParam")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopologyResultResponseNodesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyResultResponseNodesItems0) UnmarshalBinary(b []byte) error {
	var res TopologyResultResponseNodesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopologyResultResponseNodesItems0CustomParam topology result response nodes items0 custom param
// swagger:model TopologyResultResponseNodesItems0CustomParam
type TopologyResultResponseNodesItems0CustomParam struct {

	// id
	ID string `json:"id,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// parent node Id
	ParentNodeID string `json:"parentNodeId,omitempty"`

	// x
	X int64 `json:"x,omitempty"`

	// y
	Y int64 `json:"y,omitempty"`
}

// Validate validates this topology result response nodes items0 custom param
func (m *TopologyResultResponseNodesItems0CustomParam) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TopologyResultResponseNodesItems0CustomParam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopologyResultResponseNodesItems0CustomParam) UnmarshalBinary(b []byte) error {
	var res TopologyResultResponseNodesItems0CustomParam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
