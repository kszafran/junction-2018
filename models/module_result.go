// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModuleResult module result
// swagger:model ModuleResult
type ModuleResult struct {

	// response
	Response *ModuleResultResponse `json:"response,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this module result
func (m *ModuleResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModuleResult) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if m.Response != nil {
		if err := m.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleResult) UnmarshalBinary(b []byte) error {
	var res ModuleResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ModuleResultResponse module result response
// swagger:model ModuleResultResponse
type ModuleResultResponse struct {

	// assembly number
	AssemblyNumber string `json:"assemblyNumber,omitempty"`

	// assembly revision
	AssemblyRevision string `json:"assemblyRevision,omitempty"`

	// attribute info
	AttributeInfo interface{} `json:"attributeInfo,omitempty"`

	// containment entity
	ContainmentEntity string `json:"containmentEntity,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// entity physical index
	EntityPhysicalIndex string `json:"entityPhysicalIndex,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is field replaceable
	// Enum: [UNKNOWN TRUE FALSE NOT_APPLICABLE]
	IsFieldReplaceable string `json:"isFieldReplaceable,omitempty"`

	// is reporting alarms allowed
	// Enum: [UNKNOWN TRUE FALSE NOT_APPLICABLE]
	IsReportingAlarmsAllowed string `json:"isReportingAlarmsAllowed,omitempty"`

	// manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// module index
	ModuleIndex int64 `json:"moduleIndex,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operational state code
	OperationalStateCode string `json:"operationalStateCode,omitempty"`

	// part number
	PartNumber string `json:"partNumber,omitempty"`

	// serial number
	SerialNumber string `json:"serialNumber,omitempty"`

	// vendor equipment type
	VendorEquipmentType string `json:"vendorEquipmentType,omitempty"`
}

// Validate validates this module result response
func (m *ModuleResultResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsFieldReplaceable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsReportingAlarmsAllowed(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var moduleResultResponseTypeIsFieldReplaceablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","TRUE","FALSE","NOT_APPLICABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moduleResultResponseTypeIsFieldReplaceablePropEnum = append(moduleResultResponseTypeIsFieldReplaceablePropEnum, v)
	}
}

const (

	// ModuleResultResponseIsFieldReplaceableUNKNOWN captures enum value "UNKNOWN"
	ModuleResultResponseIsFieldReplaceableUNKNOWN string = "UNKNOWN"

	// ModuleResultResponseIsFieldReplaceableTRUE captures enum value "TRUE"
	ModuleResultResponseIsFieldReplaceableTRUE string = "TRUE"

	// ModuleResultResponseIsFieldReplaceableFALSE captures enum value "FALSE"
	ModuleResultResponseIsFieldReplaceableFALSE string = "FALSE"

	// ModuleResultResponseIsFieldReplaceableNOTAPPLICABLE captures enum value "NOT_APPLICABLE"
	ModuleResultResponseIsFieldReplaceableNOTAPPLICABLE string = "NOT_APPLICABLE"
)

// prop value enum
func (m *ModuleResultResponse) validateIsFieldReplaceableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moduleResultResponseTypeIsFieldReplaceablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ModuleResultResponse) validateIsFieldReplaceable(formats strfmt.Registry) error {

	if swag.IsZero(m.IsFieldReplaceable) { // not required
		return nil
	}

	// value enum
	if err := m.validateIsFieldReplaceableEnum("response"+"."+"isFieldReplaceable", "body", m.IsFieldReplaceable); err != nil {
		return err
	}

	return nil
}

var moduleResultResponseTypeIsReportingAlarmsAllowedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","TRUE","FALSE","NOT_APPLICABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		moduleResultResponseTypeIsReportingAlarmsAllowedPropEnum = append(moduleResultResponseTypeIsReportingAlarmsAllowedPropEnum, v)
	}
}

const (

	// ModuleResultResponseIsReportingAlarmsAllowedUNKNOWN captures enum value "UNKNOWN"
	ModuleResultResponseIsReportingAlarmsAllowedUNKNOWN string = "UNKNOWN"

	// ModuleResultResponseIsReportingAlarmsAllowedTRUE captures enum value "TRUE"
	ModuleResultResponseIsReportingAlarmsAllowedTRUE string = "TRUE"

	// ModuleResultResponseIsReportingAlarmsAllowedFALSE captures enum value "FALSE"
	ModuleResultResponseIsReportingAlarmsAllowedFALSE string = "FALSE"

	// ModuleResultResponseIsReportingAlarmsAllowedNOTAPPLICABLE captures enum value "NOT_APPLICABLE"
	ModuleResultResponseIsReportingAlarmsAllowedNOTAPPLICABLE string = "NOT_APPLICABLE"
)

// prop value enum
func (m *ModuleResultResponse) validateIsReportingAlarmsAllowedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, moduleResultResponseTypeIsReportingAlarmsAllowedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ModuleResultResponse) validateIsReportingAlarmsAllowed(formats strfmt.Registry) error {

	if swag.IsZero(m.IsReportingAlarmsAllowed) { // not required
		return nil
	}

	// value enum
	if err := m.validateIsReportingAlarmsAllowedEnum("response"+"."+"isReportingAlarmsAllowed", "body", m.IsReportingAlarmsAllowed); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModuleResultResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModuleResultResponse) UnmarshalBinary(b []byte) error {
	var res ModuleResultResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
