// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetSiteHealthResponse get site health response
// swagger:model GetSiteHealthResponse
type GetSiteHealthResponse struct {

	// response
	Response []*GetSiteHealthResponseResponseItems0 `json:"response"`
}

// Validate validates this get site health response
func (m *GetSiteHealthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSiteHealthResponse) validateResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.Response) { // not required
		return nil
	}

	for i := 0; i < len(m.Response); i++ {
		if swag.IsZero(m.Response[i]) { // not required
			continue
		}

		if m.Response[i] != nil {
			if err := m.Response[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("response" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSiteHealthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSiteHealthResponse) UnmarshalBinary(b []byte) error {
	var res GetSiteHealthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetSiteHealthResponseResponseItems0 get site health response response items0
// swagger:model GetSiteHealthResponseResponseItems0
type GetSiteHealthResponseResponseItems0 struct {

	// access good count
	AccessGoodCount string `json:"accessGoodCount,omitempty"`

	// access total count
	AccessTotalCount string `json:"accessTotalCount,omitempty"`

	// application bytes total count
	ApplicationBytesTotalCount interface{} `json:"applicationBytesTotalCount,omitempty"`

	// application good count
	ApplicationGoodCount interface{} `json:"applicationGoodCount,omitempty"`

	// application health
	ApplicationHealth interface{} `json:"applicationHealth,omitempty"`

	// application total count
	ApplicationTotalCount interface{} `json:"applicationTotalCount,omitempty"`

	// client health wired
	ClientHealthWired string `json:"clientHealthWired,omitempty"`

	// client health wireless
	ClientHealthWireless interface{} `json:"clientHealthWireless,omitempty"`

	// client issue count
	ClientIssueCount interface{} `json:"clientIssueCount,omitempty"`

	// client number of issues
	ClientNumberOfIssues interface{} `json:"clientNumberOfIssues,omitempty"`

	// core good count
	CoreGoodCount string `json:"coreGoodCount,omitempty"`

	// core total count
	CoreTotalCount string `json:"coreTotalCount,omitempty"`

	// distribution good count
	DistributionGoodCount string `json:"distributionGoodCount,omitempty"`

	// distribution total count
	DistributionTotalCount string `json:"distributionTotalCount,omitempty"`

	// healthy clients percentage
	HealthyClientsPercentage string `json:"healthyClientsPercentage,omitempty"`

	// healthy network device percentage
	HealthyNetworkDevicePercentage string `json:"healthyNetworkDevicePercentage,omitempty"`

	// latitude
	Latitude interface{} `json:"latitude,omitempty"`

	// longitude
	Longitude interface{} `json:"longitude,omitempty"`

	// network health access
	NetworkHealthAccess string `json:"networkHealthAccess,omitempty"`

	// network health average
	NetworkHealthAverage interface{} `json:"networkHealthAverage,omitempty"`

	// network health core
	NetworkHealthCore string `json:"networkHealthCore,omitempty"`

	// network health distribution
	NetworkHealthDistribution string `json:"networkHealthDistribution,omitempty"`

	// network health others
	NetworkHealthOthers interface{} `json:"networkHealthOthers,omitempty"`

	// network health router
	NetworkHealthRouter string `json:"networkHealthRouter,omitempty"`

	// network health wireless
	NetworkHealthWireless interface{} `json:"networkHealthWireless,omitempty"`

	// network number of issues
	NetworkNumberOfIssues interface{} `json:"networkNumberOfIssues,omitempty"`

	// number of clients
	NumberOfClients string `json:"numberOfClients,omitempty"`

	// number of network device
	NumberOfNetworkDevice string `json:"numberOfNetworkDevice,omitempty"`

	// number of wired clients
	NumberOfWiredClients string `json:"numberOfWiredClients,omitempty"`

	// number of wireless clients
	NumberOfWirelessClients interface{} `json:"numberOfWirelessClients,omitempty"`

	// overall good devices
	OverallGoodDevices string `json:"overallGoodDevices,omitempty"`

	// parent site Id
	ParentSiteID string `json:"parentSiteId,omitempty"`

	// parent site name
	ParentSiteName string `json:"parentSiteName,omitempty"`

	// router good count
	RouterGoodCount string `json:"routerGoodCount,omitempty"`

	// router total count
	RouterTotalCount string `json:"routerTotalCount,omitempty"`

	// site Id
	SiteID string `json:"siteId,omitempty"`

	// site name
	SiteName string `json:"siteName,omitempty"`

	// site type
	SiteType string `json:"siteType,omitempty"`

	// wired good clients
	WiredGoodClients string `json:"wiredGoodClients,omitempty"`

	// wireless device good count
	WirelessDeviceGoodCount string `json:"wirelessDeviceGoodCount,omitempty"`

	// wireless device total count
	WirelessDeviceTotalCount string `json:"wirelessDeviceTotalCount,omitempty"`

	// wireless good clients
	WirelessGoodClients interface{} `json:"wirelessGoodClients,omitempty"`
}

// Validate validates this get site health response response items0
func (m *GetSiteHealthResponseResponseItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetSiteHealthResponseResponseItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSiteHealthResponseResponseItems0) UnmarshalBinary(b []byte) error {
	var res GetSiteHealthResponseResponseItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
